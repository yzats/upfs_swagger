{
    "swagger": 2.0,
    "info": {
        "version": "9.0.0", 
        "description": "This document describes the UPFS Web API.", 
        "title": "UPFS API"
    }, 
    "paths": {
        "/accounts/ghosts": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/accounts_confirm_response"
                        }
                    }, 
                    "403": {
                        "description": "Possible messages:\n- **invalid_user_status**: user already has a confirmed account\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal server error"
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_request**:\n  - invalid request body\n  - invalid parameter\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "This endpoint promotes and confirms a ghost user. The user must supply a promotion code obtained from a call to the PUT variant of this endpoint.\n\nIf only_check is true, this endpoint only checks the validity of the promotion code, and does not perform any mutations.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The email address of the ghost user to promote", 
                        "in": "body", 
                        "name": "email"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "A promotion code returned by a call to the PUT variant of this endpoint.", 
                        "in": "body", 
                        "name": "promotion_code"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "The password for the new user. This password must meet the requirements described in the documentation for POST /accounts/passwords. Required if **only_check** is false.\n", 
                        "name": "password"
                    }, 
                    {
                        "in": "body", 
                        "type": "object", 
                        "description": "Required if **only_check is false.", 
                        "name": "metadata", 
                        "schema": {
                            "$ref": "#/definitions/signup_user_metadata"
                        }
                    }, 
                    {
                        "in": "body", 
                        "type": "boolean", 
                        "description": "If true, only check the validatiy of the promotion code.\n", 
                        "name": "only_check"
                    }, 
                    {
                        "in": "body", 
                        "type": "integer", 
                        "description": "Client ID of the client making the request. This must be included for a parley token to be included in the response.\n", 
                        "name": "client_id"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "Device ID of the device making the request. This must be included for a parley token to be included in the response.\n", 
                        "name": "device_id"
                    }
                ], 
                "tags": [
                    "accounts"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Promote a ghost user"
            }
        }, 
        "/accounts/passwords": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/accounts_empty_success_response"
                        }
                    }, 
                    "403": {
                        "description": "Possible messages:\n- **access_denied**: no user corresponds to the provided email\n- **invalid_user_status**: user's account status does not permit password reset\n- **account_locked**: user has exceeded the rate limiter\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal server error"
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_request**: \n  - invalid request body\n  - invalid email address\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "This endpoint initiates the reset password flow. It triggers a confirmation email to the user with a confirmation code. This code must be submitted to  the POST variant to perform the reset itself. The code expires, but clients must not make assumptions regarding how long the code will remain valid  before it does.\n\nThis endpoint is rate limited per user. If a user exceeds the number of  allowed requests, the request will fail and the user's ability to reset their  password will be locked for a period of time. The client must not make assumptions about the number of allowed requests, duration of the lock, or time period over which the requests are counted. \n\nNo email is sent when a 4XX error is returned. \n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The email address of the account desiring a password reset", 
                        "in": "body", 
                        "name": "email"
                    }
                ], 
                "tags": [
                    "accounts"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Initiate password reset"
            }, 
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/accounts_empty_success_response"
                        }
                    }, 
                    "403": {
                        "description": "Possible messages:\n- **access_denied**: no user corresponds to the provided email\n- **invalid_code**: the confirmation code has already been used\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal server error"
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_request**: \n  - invalid request body\n  - invalid email address\n  - invalid or expired confirmation code\n- **invalid_password_format**:\n  - invalid password format\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "This endpoint finishes the reset password flow and performs the password change. The caller must supply a not-expired cofirmation code that was sent to the user by the PUT variant of this endpoint.  This code may be used only once.\n\nA user's password must be valid according to the following requirements:\n- Length of at least 8 characters and at most 50 characters\n- Must not be all numbers.\n- Must not be on a server-stored list of the most obvious passwords. Clients must not make assumptions\n  regarding the contents of this list.\n- The string \"upthere\" is case-insensitively ignored in the string when checking validity. \n\nIf the only_check parameter is set to true, this endpoint checks the password's validity only. It does not require a confirmation code, and does not make any changes. \n\nIf only_check is false and this endpoint returns success, it will perform the following actions in addition to  changing the user's password:\n- Invalidate all of the user's refresh tokens\n- Unlock the rate limiter used by the POST /accounts/tokens endpoint\n- Clear the user's token cookies, if the client is a web client\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The email address of the user whose password should be reset.", 
                        "in": "body", 
                        "name": "email"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "The confirmation code sent to the user after a call to PUT variant of this endpoint. Required unless only_check is true. This code must not be expired and must not have already been used.\n", 
                        "name": "reset_code"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The new password to set for the user. This password must satsify the requirements listed in this endpoint's description.\n", 
                        "in": "body", 
                        "name": "new_password"
                    }, 
                    {
                        "in": "body", 
                        "type": "boolean", 
                        "description": "If this is set to true, this endpoint checks the password's validity only and does not make any changes. \n", 
                        "name": "only_check"
                    }
                ], 
                "tags": [
                    "accounts"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Confirm password reset"
            }
        }, 
        "/accounts/preferences": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/accounts_empty_success_response"
                        }
                    }, 
                    "401": {
                        "description": "Possible messages:\n- **invalid_token**: invalid token\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_request**:\n  - invalid request body\n  - invalid parameter\n  - requested scope not allowed for client\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "This endpoint will set a user's analytics collection opt-in selection as well as the user's marketing email opt-in selection.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "Analytics collection opt-in selection. May be empty if not set by the client. An empty value is does not update the timestamp of the most recent change to analytics_opt_in. Must have the form opt-in or opt-out.\n", 
                        "Allowed values are": [
                            "opt-in", 
                            "opt-out"
                        ], 
                        "name": "analytics_opt_in"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "Marketing collection opt-in selection. May be empty if not set by the client. An empty value is does not update the timestamp of the most recent change to marketing_opt_in. Must have the form opt-in or opt-out.\n", 
                        "Allowed values are": [
                            "opt-in", 
                            "opt-out"
                        ], 
                        "name": "marketing_opt_in"
                    }
                ], 
                "tags": [
                    "accounts"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Set account preferences for a user"
            }
        }, 
        "/accounts/promotions/code": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Promo code has been successfully applied to this user account"
                    }, 
                    "500": {
                        "description": "Internal server error"
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_request**: error in the request\n- **invalid_request_body**: error in request body\n- **invalid_promotion_code**: provided code is not a valid promotion code\n- **used_code**: code has already been used by another user\n- **used_code_same_user**: code has already been used by the same user\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "This endpoint activates a promo code for the user\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Promo code, coupon code or referral code to use", 
                        "in": "body", 
                        "name": "promo_code"
                    }
                ], 
                "tags": [
                    "accounts"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Use promo code"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success. The code is valid and exists"
                    }, 
                    "500": {
                        "description": "Possible messages:\n- **internal_error**: internal error validating code\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_request**: missing \"code\" query parameter\n- **invalid_promotion_code**: invalid promotion code\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "This endpoint will check the validity of a promotion code (including promo, referral, or coupon codes)\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The promotion code to be checked", 
                        "in": "query", 
                        "name": "code"
                    }
                ], 
                "tags": [
                    "accounts"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Check the validity of a promotion code"
            }
        }, 
        "/accounts/signupthere": {
            "post": {
                "responses": {
                    "300": {
                        "description": "Possible messages:\n- **need_redirect**: user already has a confirmed account\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "required": [
                                "user_id"
                            ], 
                            "type": "object", 
                            "properties": {
                                "cluster": {
                                    "type": "string", 
                                    "description": "Cluster where the user is created"
                                }, 
                                "user_id": {
                                    "type": "int64", 
                                    "description": "User ID of the newly created user"
                                }
                            }
                        }
                    }, 
                    "403": {
                        "description": "Possible messages:\n- **invalid_user_status**: user already has a confirmed account\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal server error"
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_request**:\n  - invalid request body\n  - invalid parameter\n  - invalid secret header\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "This endpoint creates users for testing. Users created by this endpoint are confirmed automatically and do not require a second request.\n\nUsers created by this endpoint must have an email of the form uptheretest+<value>@upthere.com. Additionally, a secret must be supplied in the X-Upthere-TestCode header.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Secret authorizing the request. If you do not know what the secret is, it's doing its job well.\n", 
                        "in": "header", 
                        "name": "X-Upthere-TestCode"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The email address of the user to create. Must have the form uptheretest+<value>@upthere.com\n", 
                        "in": "body", 
                        "name": "email"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The password for the new user. This password must meet the requirements described in the documentation for POST /accounts/passwords.\n", 
                        "in": "body", 
                        "name": "password"
                    }, 
                    {
                        "required": true, 
                        "type": "object", 
                        "name": "metadata", 
                        "in": "body", 
                        "schema": {
                            "$ref": "#/definitions/signup_user_metadata"
                        }
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "The cluster at which the user should be created. This is an optional parameter and if not specified the user will be allocated at the local cluster\n", 
                        "name": "cluster"
                    }
                ], 
                "tags": [
                    "accounts"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "HIDDEN - Create a test user"
            }
        }, 
        "/accounts/tfa": {
            "put": {
                "responses": {
                    "200": {
                        "type": "object", 
                        "description": "Success", 
                        "schema": {
                            "required": [
                                "state_token"
                            ], 
                            "properties": {
                                "state_token": {
                                    "type": "string", 
                                    "description": "State token used to confirm 2FA setup."
                                }, 
                                "provision_uri": {
                                    "type": "string", 
                                    "description": "URI used to generate a QR code to configure an authenticator app. Present only when setting up an authenticator app.\n"
                                }, 
                                "secret": {
                                    "type": "string", 
                                    "description": "Secret used to configure an authenticator app. This is the same secret returned in the uri, but allows the user to enter the secret into the authenticator app manually. Present only when setting up an authenticator app.\n"
                                }
                            }
                        }
                    }, 
                    "403": {
                        "description": "Possible messages:\n- **account_locked**: user has exceeded the SMS rate limiter\n- **access_denied**: the super access token cookie does not refer to a valid user\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "401": {
                        "description": "Possible messages:\n- **invalid token**: the super access token cookie is missing, invalid, or expired\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal server error"
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_request**: \n  - invalid request body\n  - invalid parameter\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "This endpoint initiates the 2FA setup flow. This endpoint on its own does not make any changes to the user's account. The server returns a state token to be passed to the POST variant to complete 2FA setup. This token expires, but the client must not make any assumptions regarding how long the token will remain valid before it does.\n\nIf a phone number is provided, SMS-based 2FA is assumed. A successful call to this endpoint will trigger an SMS message containing a TOTP code necessary to complete 2FA setup. These messages are rate limited. If the limit is exceeded, the endpoint will return an error and the ability to send 2FA SMS messages will be locked for a period  of time. Clients must make no assumptions about the number of allowed requests, duration of a lock, or time period  over which they are counted. \n\nIf no phone number is provided, app-based 2FA is used. This endpoint will return a secret and uri the user can use to  configure their TOTP authenticator app. The secret and uri contain the same information - the uri should be used to generate a QR code for the user to scan with an app, and the secret should be displayed for the user to enter manually. \n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The user is identified through a valid Super Access Token cookie.", 
                        "in": "cookie", 
                        "name": "SuperAccessToken"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Email address to encode in the uri returned for app-based 2FA for accurate labeling within the user's authenticator app. The server does not use this value for any other purpose.\n", 
                        "in": "body", 
                        "name": "email"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "Phone number to use for SMS-based 2FA. This is required for SMS-based 2FA and must be omitted when enabling app-based 2FA.\n\nMaximum Length: 25\n", 
                        "name": "phone"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "[International calling code](https://en.wikipedia.org/wiki/List_of_country_calling_codes#Alphabetical_listing_by_country_or_region) for the provided phone number. This is required for SMS-based 2FA and should be omitted when enabling app-based 2FA. \n\nMaximum Length: 3\n", 
                        "name": "country"
                    }
                ], 
                "tags": [
                    "accounts"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Initiate 2FA setup"
            }, 
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/accounts_empty_success_response"
                        }
                    }, 
                    "403": {
                        "description": "Possible messages:\n- **access_denied**: \n  - invalid or expired state token\n  - 2FA already enabled for the user\n  - the super access token cookie does not refer to a valid user\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "401": {
                        "description": "Possible messages:\n- **invalid token**: the super access token cookie is missing, invalid, or expired\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal server error"
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_request**: \n  - invalid request body\n  - invalid parameter\n- **invalid_code**:\n  - invalid TOTP code\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "This endpoint finishes the 2FA setup flow and enables two-factor authentication for the user.\n\nThe caller must provide a state token returned by the PUT variant in addition to a valid TOTP code. This code is either sent via SMS by the PUT variant (SMS-based 2FA), or generated by an  authenticator app configured with the secret or uri returned by the PUT variant (app-based 2FA).\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The user is identified through a valid Super Access Token cookie.", 
                        "in": "cookie", 
                        "name": "SuperAccessToken"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Valid state token returned by the PUT variant.", 
                        "in": "body", 
                        "name": "state_token"
                    }, 
                    {
                        "required": true, 
                        "type": "int", 
                        "description": "A TOTP code that corresponds to the state token.", 
                        "in": "body", 
                        "name": "code"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "If true, Upthere Support is allowed to disable TFA for this user. If false, or omitted, then Upthere Support will not disable TFA for the user if they lose their backup code.\n", 
                        "in": "body", 
                        "name": "support_can_disable"
                    }
                ], 
                "tags": [
                    "accounts"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Confirm 2FA setup"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "type": "object", 
                        "description": "Success", 
                        "schema": {
                            "properties": {
                                "login_type": {
                                    "type": "string", 
                                    "description": "the user's login type. Possible values are \"normal\" (TFA not enabled), \"app\" and \"sms\"."
                                }, 
                                "backup_code": {
                                    "type": "string", 
                                    "description": "The user's backup code. Omitted if the user's does not have TFA enabled."
                                }
                            }
                        }
                    }, 
                    "403": {
                        "description": "Possible messages:\n- **access_denied**:\n  - the super access token cookie does not refer to a valid user\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "401": {
                        "description": "Possible messages:\n- **invalid token**: the super access token cookie is missing, invalid, or expired\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal server error"
                    }
                }, 
                "description": "This endpoint returns the user's 2FA login type and backup code.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The user is identified through a valid Super Access Token cookie.", 
                        "in": "cookie", 
                        "name": "SuperAccessToken"
                    }
                ], 
                "tags": [
                    "accounts"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Get 2FA settings"
            }
        }, 
        "/accounts/tfa/backup": {
            "post": {
                "responses": {
                    "200": {
                        "type": "object", 
                        "description": "Success", 
                        "schema": {
                            "required": [
                                "backup_code"
                            ], 
                            "properties": {
                                "backup_code": {
                                    "type": "string", 
                                    "description": "The user's backup code"
                                }
                            }
                        }
                    }, 
                    "403": {
                        "description": "Possible messages:\n- **access_denied**: \n  - the user does not have 2FA enabled\n  - the super access token cookie does not refer to a valid user\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "401": {
                        "description": "Possible messages:\n- **invalid token**: the super access token cookie is missing, invalid, or expired\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal server error"
                    }
                }, 
                "description": "This endpoint generates and returns a new 2FA backup code for the user. The user's  previous backup code becomes invalid.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The user is identified through a valid Super Access Token cookie.", 
                        "in": "cookie", 
                        "name": "SuperAccessToken"
                    }
                ], 
                "tags": [
                    "accounts"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Generate new 2FA backup code"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "type": "object", 
                        "description": "Success", 
                        "schema": {
                            "required": [
                                "code"
                            ], 
                            "properties": {
                                "code": {
                                    "type": "string", 
                                    "description": "The user's backup code"
                                }
                            }
                        }
                    }, 
                    "403": {
                        "description": "Possible messages:\n- **access_denied**: \n  - the user does not have 2FA enabled\n  - the super access token cookie does not refer to a valid user\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "401": {
                        "description": "Possible messages:\n- **invalid token**: the super access token cookie is missing, invalid, or expired\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal server error"
                    }
                }, 
                "description": "This endpoint returns the user's 2FA backup code.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The user is identified through a valid Super Access Token cookie.", 
                        "in": "cookie", 
                        "name": "SuperAccessToken"
                    }
                ], 
                "tags": [
                    "accounts"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Get 2FA backup code (deprecated)"
            }
        }, 
        "/accounts/tfa/code": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/accounts_empty_success_response"
                        }
                    }, 
                    "403": {
                        "description": "Possible messages:\n- **access_denied**: \n  - invalid or expired state token or challenge token\n  - user does not have SMS-based 2FA enabled\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal server error"
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_request**: invalid request body\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "This endpoint sends a new SMS 2FA code to the user. The user must supply a valid token corresponding to an in-progress 2FA operation:\n- Challenge token, obtained during login\n- State token, obtained during 2FA setup\n", 
                "parameters": [
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "Valid challenge token obtained during login. Either this or **state_token** must be provided. \n", 
                        "name": "challenge_token"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "Valid state token obtained during 2FA setup. Either this or **challenge_token** must be provided.\n", 
                        "name": "state_token"
                    }
                ], 
                "tags": [
                    "accounts"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Resend SMS 2FA code"
            }
        }, 
        "/accounts/tfa/disable": {
            "post": {
                "responses": {
                    "200": {
                        "type": "object", 
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/accounts_empty_success_response"
                        }
                    }, 
                    "403": {
                        "description": "Possible messages:\n- **access_denied**: \n  - invalid challenge token\n  - invalid backup code\n  - the user does not have 2FA enabled\n  - the super access token cookie does not refer to a valid user\n- **account_locked**:\n  - user has exceeded the backup code rate limiter\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "401": {
                        "description": "Possible messages:\n- **invalid token**: the super access token cookie is invalid, or expired\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal server error"
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_request**: invalid request body\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "This endpoint disables 2FA for a user. The request can be authenticated with either a valid super access token or a valid challenge token and backup code.\n\nRequests made with invalid backup codes are rate limited per user. If the limit is exceeded, a lock is placed on the ability to check backup codes. No further  requests with backup codes (valid or not) will be accepted for a period of time.  The client must not make assumptions regarding the limit, duration of the lock, or period of time over which attempts are counted. Requests made with super access tokens are not affected by the rate limiter.\n\nIf this endpoint returns successfully, the rate limiter state is cleared for 2FA code checks (used in login) and backup code checks (used in this endpoint). Any existing  locks from these rate limiters are unlocked. \n", 
                "parameters": [
                    {
                        "in": "cookie", 
                        "type": "string", 
                        "description": "The user is identified through a valid Super Access Token cookie. If this is  provided, no backup code or challenge token are needed.\n", 
                        "name": "SuperAccessToken"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "The user's backup code. This is required if no super access token is provided.\n", 
                        "name": "backup_code"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "A valid challenge token obtained from POST /accounts/tokens. This is required if no super access token is provided.\n", 
                        "name": "challenge_token"
                    }
                ], 
                "tags": [
                    "accounts"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Disable 2FA"
            }
        }, 
        "/accounts/tokens": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Access Token", 
                        "schema": {
                            "required": [
                                "access_token", 
                                "scope", 
                                "token_type", 
                                "expires_in", 
                                "user_id", 
                                "user_instance_id"
                            ], 
                            "type": "object", 
                            "properties": {
                                "new_user_created": {
                                    "type": "boolean", 
                                    "description": "A flag to signal that a new user was created during a login request with a grant type of **social_login**. Will be omitted for other grant types."
                                }, 
                                "user_id": {
                                    "type": "int64", 
                                    "description": "User ID of the user associated with the access token"
                                }, 
                                "parley_token": {
                                    "type": "bytes", 
                                    "description": "The parley token. Returned with the \"parley\" token type only."
                                }, 
                                "access_token": {
                                    "type": "bytes", 
                                    "description": "An access token. On web clients, this is returned in the AccessToken or SuperAccessToken cookie instead.\n"
                                }, 
                                "expires_in": {
                                    "type": "int64", 
                                    "description": "Seconds until the access token expires"
                                }, 
                                "refresh_token_expires_in": {
                                    "type": "int64", 
                                    "description": "Seconds until the refresh token expires. Will be omitted if there is no refresh token."
                                }, 
                                "token_type": {
                                    "type": "string", 
                                    "description": "Either \"bearer\" or \"parley\", matching the value provided in the request."
                                }, 
                                "scope": {
                                    "type": "string array", 
                                    "description": "List of scopes associated with the access token. This may not be the exactly the same as the scopes requested by the client\n"
                                }, 
                                "refresh_token": {
                                    "type": "bytes", 
                                    "description": "A refresh token. On web clients, this is returned in the RefreshToken cookie instead. The server may not always return a refresh token with every access token\n"
                                }, 
                                "user_instance_id": {
                                    "type": "int32", 
                                    "description": "A shorthand id representing a (device id, client id, user id) combo.\n"
                                }
                            }
                        }
                    }, 
                    "403": {
                        "description": "Possible messages:\n- **access_denied**:\n  - User does not exist\n  - Incorrect password\n  - Invalid challenge token\n  - Invalid social token\n  - 2FA login attempted but 2FA not enabled\n- **invalid_grant**: invalid or expired refresh token or parley token\n- **intentional_logout**: refresh requests; indicates refresh token is no longer valid due to intentional logout by user\n- **invalid_user_status**: user's status does not allow login (e.g the user is a ghost or unconfirmed user)\n- **user_flaggod_for_deletion**: the user is in the process of being deleted and cannot login\n- **account_locked**: the password-checking rate limit has been exceeded\n- **missing_primary_email**: the social token is not associated with an external account which has primary email\n- **user_must_accept_tos**: the user must accept the most recent terms of service to login\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "412": {
                        "description": "2FA challenge", 
                        "schema": {
                            "required": [
                                "challenge_token", 
                                "method", 
                                "reason"
                            ], 
                            "type": "object", 
                            "properties": {
                                "reason": {
                                    "type": "string", 
                                    "description": "Reason behind the 2FA challenge. This value is used to inform UI only. Possible values: \"user_setting\"\", \"account_locked\", \"new_device\"\n"
                                }, 
                                "challenge_token": {
                                    "type": "bytes", 
                                    "description": "Challenge token associated with this 2FA challenge.\n"
                                }, 
                                "method": {
                                    "type": "string", 
                                    "description": "Method by which the user should obtain the TOTP code needed for this challenge. This value is used to inform UI only. Possible values: \"phone\", \"app\", \"email\"\n"
                                }
                            }
                        }
                    }, 
                    "500": {
                        "description": "Internal server error"
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_request**:\n  - invalid request body\n  - invalid parameter\n  - requested scope not allowed for client\n- **unsupported_response_type**: invalid grant type\n- **invalid_code**: invalid 2FA code\n- **invalid_referrer_id**: invalid referral code\n- **invalid_promotion_code**: invalid promotion code\n- **obsolete_api**: api version is obsolete\n- **obsolete_sdk**: sdk (framework) version is obsolete\n- **obsolete_client**: client version is obsolete\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "This endpoint logs a user in. \"Login\" is the process of obtaining an access token, which identifies the user to other endpoints.\n\nThis endpoint can return the following ways:\n- With an access token (status 200, token type = \"bearer\"). This access token is valid for a period of time (specified in the\n  response), after which another access token must be requested. The response may also include\n  a refresh token which can be used to obtain a new access token without user involvement, but\n  the client must not assume the a refresh token will be returned.\n- With a 2FA challenge (status 412). The response will include a challenge token representing a challenge, and\n  the client must respond with a valid TOTP 2FA code supplied by the user. Depending on the user's 2FA\n  settings, the user obtains the code from their TOTP authenticator app, an SMS sent to them, or\n  an email sent to them.\n- With a parley token (status 200 and token type = \"parley\"). This will only occur when the token type field in the request\n  is set to \"parley\". A parley token can be given to another device, which can then exchange the parley token for its own\n  refresh token. Parley tokens are single-use and expire after a period of time (specified in the response). The account service\n  will accept a parley token multiple times from the client within a short period of time to ensure requests can be replayed, but\n  clients must not make assumptions about the length of this time.\n- With an error\n\nRequests for access tokens can be authenticated four ways:\n- With the user's identifier (email) and password (grant_type=\"password\")\n- With a refresh token (grant_type=\"refresh_token\")\n- With a challenge token and TOTP 2FA code (grant_type=\"tfa_code\")\n- With a parley token (grant_type=\"parley_token\")\n- With a social token from a third party identity provider, such as Google or Facebook (grant_type=\"social_token\", grant_type=\"social_token_login_only\")\n\n  Password-based login requests are subject to a rate limit. If too many requests with invalid passwords are made, the account will be temporarily locked and no password-based login requests will be accepted until the lock expires. Other grant types are not affected by this limit or lock. Clients must not make assumptions regarding the limit, the duration of the lock, or the period over which requests are counted. Grant types **social_token** and **social_token_login** have different behavior. Clients should use **social_token** when sending login requests on initial user signup. Login requests for exisiting users should use grant type **social_token_login_only** to authenticate. Grant type **social_token_login_only** will not create a new users and requests will only succeed when the user is in a normal state (e.g. the user is neither a ghost nor uncofirmed).\n\nAs this endpoint is the first endpoint most clients contact on startup, it informs clients when they are obsolete through a 400 error and the messages **obsolete_api**, **obsolete_sdk**, and **obsolete_client**.\n", 
                "parameters": [
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "Indicates the purpose of the token requested, which affects the type of token that is returned. If omitted, defaults to \"bearer\".\nAllowed values are:\n  -  **bearer**:  indicates the token will be used by the device making the request (e.g. return an access token or refresh token directly).\n  -  **parley**: indicates the token will be handed off to another device (e.g. return a parley token).\n\nIf the parley token type is used, grant_type must be \"refresh_token\" and the scope must be \"generic\".\n", 
                        "in": "body", 
                        "name": "token_type"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Specifies how this login request will be authenticated. This parameter controls which other parameters must be set.\nAllowed grant types, and the parameters they require, are:\n  - **password**: requires **identifier**, **password**\n  - **refresh_token**: requires **refresh_token**\n  - **tfa_code**: requires **challenge_token**, **code**\n  - **parley_token**: requires **parley_token**\n  - **social_token**: requires **identity_provider** and **social_token**\n  - **social_token_login_only**: requires **identity_provider** and **social_token**\n\nAdditionally, the **scope**, **client_id**, and **device_id** parameters must be set for all grant types.\n", 
                        "in": "body", 
                        "name": "grant_type"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The access token scope requested. This must be a subset of the scopes allowed for **client_id**. An access token's scope controls what actions can be performed with the token, how long the token lasts until it expires, and whether or not a refresh token is granted with the access token.\n\nPossible scopes are:\n- **generic**: all standard actions. If no scope is mentioned in the documentation for an endpoint, this should be assumed.\n  This is the default.\n\n- **upload**: allows upload actions including CreateDocOp, PartialPayloadClientOp, PayloadCompleteOp, MergeOp.\n- **super**: allows access to account settings endpoints. *password* grant type only. This may be requested alongside\n  generic in a single token.\n\n- **readdoc**: allows read-only access to a single doc. *refresh_token* grant type only.\n  Must be requested in the format 'readdoc,b=x&d=y&v=z', where x,y, and z are hex-encoded branch, doc and view ids.\n", 
                        "in": "body", 
                        "name": "scope"
                    }, 
                    {
                        "required": true, 
                        "type": "integer", 
                        "description": "The client ID of the client making the request", 
                        "in": "body", 
                        "name": "client_id"
                    }, 
                    {
                        "required": true, 
                        "type": "integer", 
                        "description": "The device ID of the device making the request. If possible, this should be a 256-bit hash of a system-provided device identifier. If that is not possible, this should be a random 256-bit number stored in persistant storage and reused in future requests.\n", 
                        "in": "body", 
                        "name": "device_id"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "An identifier identifying the user to login. This must be the email address associated with the user's account. Required for the **password** grant type only.\n", 
                        "name": "identifier"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "The password associated with the user's account. Required for the **password** grant type only.\n", 
                        "name": "password"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "A valid refresh token returned by a prior call to this endpoint. Required for the **refresh_token** grant type only.\n", 
                        "name": "refresh_token"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "A challenge token returned by a prior call to this endpoint. Required for the **tfa_code** grant type only.\n", 
                        "name": "challenge_token"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "A valid TOTP 2FA code associated with the challenge token. This must be obtained from the user's TOTP authenticator app (if app 2FA is enabled) or from an SMS sent to their phone (if SMS 2FA is enabled). Required for the **tfa_code** grant type only.\n", 
                        "name": "code"
                    }, 
                    {
                        "in": "body", 
                        "type": "integer", 
                        "description": "An identity provider associated with the social token which identifies the user to login. Required for the **social_token** and **social_token_login_only** grant types only.\n", 
                        "name": "identity_provider"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "The social token identifying the user to login. Required for the **social_token** and **social_token_login_only** grant types only.\n", 
                        "name": "social_token"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "The parley token to exchange for a refresh token. Required for the **parley_token** grant type only.\n", 
                        "name": "parley_token"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "The referral code of the referrer which refers the user to login. Optional for the **social_token** and **social_token_login_only** grant types only.\n", 
                        "name": "referrer_id"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "The promotion code the user applied to login. Optional for the **social_token** and **social_token_login_only** grant types only.\n", 
                        "name": "promotion_code"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "Indicates the marketing affiliate with the user. e.g. WD, Sandisk. This is restricted to 100 characters. Optional for the **social_token** and **social_token_login_only** grant types only.\n", 
                        "name": "affiliate"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "Indicates the signup source where the created user was initiated. Ex: Share, Organic, Waitlist etc. This is restricted to 100 characters. Optional for the **social_token** and **social_token_login_only** grant types only.\n", 
                        "name": "source"
                    }, 
                    {
                        "in": "body", 
                        "type": "boolean", 
                        "description": "A flag to indicate wether or not the user has accepted the terms of service presented by the client on login.\n", 
                        "name": "tos_was_accepted"
                    }
                ], 
                "tags": [
                    "accounts"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Login"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/accounts_empty_success_response"
                        }
                    }, 
                    "403": {
                        "description": "Possible messages:\n- **invalid_grant**: invalid or expired refresh token\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal server error"
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_request**:\n  - invalid request body\n  - invalid parameter\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "This endpoint logs a user out by invalidating a refresh token. For web clients, this clears all token-related cookies as well.\nThis can be used for self-logout or remote logout. In self-logout, a client requests that its own refresh token be invalidated. A refresh token is required for this request. In remote-logout, a client requests that another client by logged out. This requires a super access token.\nIf the device is a registered with the backend (such as Skyline), it is deregistered during logout.\n", 
                "parameters": [
                    {
                        "in": "header", 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded), Super scope required. Not necessary for self logout.", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "in": "cookie", 
                        "type": "string", 
                        "description": "The refresh token to invalidate. For self-logout, either this or the **refresh_token** body parameter must be provided. Not necessary for remote logout.\n", 
                        "name": "RefreshToken"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "The refresh token to invalidate. Either this or the **RefreshToken** cookie must be provided.\n", 
                        "name": "refresh_token"
                    }, 
                    {
                        "in": "body", 
                        "type": "integer", 
                        "description": "The client ID associated with the refresh token.", 
                        "name": "client_id"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "The device ID associated with the refresh token.", 
                        "name": "device_id"
                    }
                ], 
                "tags": [
                    "accounts"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Logout"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "required": [
                                "user_id", 
                                "expires_at", 
                                "scopes"
                            ], 
                            "type": "object", 
                            "properties": {
                                "scopes": {
                                    "type": "string array", 
                                    "description": "The scopes of the token passed in the X-Upthere-At header\n"
                                }, 
                                "user_id": {
                                    "type": "int64", 
                                    "description": "The user ID of the token passed in the X-Upthere-At header\n"
                                }, 
                                "expires_at": {
                                    "type": "int64", 
                                    "description": "The expiration date of the token passed in the X-Upthere-At header\n"
                                }
                            }
                        }
                    }, 
                    "401": {
                        "description": "Possible messages:\n- **invalid_token**: invalid token\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "This endpoint will check the validity and the contents of a token request that is sent in, then send out a response with this information.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }
                ], 
                "tags": [
                    "accounts"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Check Access Token"
            }
        }, 
        "/accounts/tokens/invalidate": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/accounts_empty_success_response"
                        }
                    }, 
                    "403": {
                        "description": "Possible messages:\n- **invalid_grant**: invalid or expired refresh token\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal server error"
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_request**:\n  - invalid request body\n  - invalid parameter\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "This endpoint logs a user out by invalidating a refresh token. For web clients, this clears all token-related cookies as well.\nThis can be used for self-logout or remote logout. In self-logout, a client requests that its own refresh token be invalidated. A refresh token is required for this request. In remote-logout, a client requests that another client by logged out. This requires a super access token.\nIf the device is a registered with the backend (such as Skyline), it is deregistered during logout.\n", 
                "parameters": [
                    {
                        "in": "header", 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded), Super scope required. Not necessary for self logout.", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "in": "cookie", 
                        "type": "string", 
                        "description": "The refresh token to invalidate. For self-logout, either this or the **refresh_token** body parameter must be provided. Not necessary for remote logout.\n", 
                        "name": "RefreshToken"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "The refresh token to invalidate. Either this or the **RefreshToken** cookie must be provided.\n", 
                        "name": "refresh_token"
                    }, 
                    {
                        "in": "body", 
                        "type": "integer", 
                        "description": "The client ID associated with the refresh token.", 
                        "name": "client_id"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "The device ID associated with the refresh token.", 
                        "name": "device_id"
                    }
                ], 
                "tags": [
                    "accounts"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Logout"
            }
        }, 
        "/accounts/users": {
            "put": {
                "responses": {
                    "300": {
                        "description": "Possible messages:\n- **need_redirect**:\n  - user already has a confirmed account\n  - signups currently closed\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/accounts_signup_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal server error"
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_request**:\n  - invalid request body\n  - invalid parameter\n- **invalid_promotion_code**:\n  - invalid promotion code\n- **obsolete_api**: api version is obsolete\n- **obsolete_sdk**: sdk (framework) version is obsolete\n- **obsolete_client**: client version is obsolete\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "This endpoint initiates the direct signup flow and creates an unconfirmed user. Unconfirmed users must confirm their accounts before they can login.\n\nIt triggers a confirmation email to the new user containing a confirmation code. This code must be passed to the POST variant of this endpoint to confirm the user and complete the signup. The code can expire, but the client must not make any assumptions regarding the lifetime of the code.\n\nIt is not an error to call this endpoint on a user that already exists but has not yet confirmed their account with a call to POST /accounts/users or PUT /accounts/ghosts. The parameters submitted here overwrite any existing values for the user. This endpoint returns an error if the user has already confirmed their account. This endpoint is subject to backend limits on signups. A 300 error is returned if signups are closed.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The email address of the user to create", 
                        "in": "body", 
                        "name": "email"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The password for the new user. This password must meet the requirements described in the documentation for POST /accounts/passwords.\n", 
                        "in": "body", 
                        "name": "password"
                    }, 
                    {
                        "required": true, 
                        "type": "object", 
                        "name": "metadata", 
                        "in": "body", 
                        "schema": {
                            "$ref": "#/definitions/signup_user_metadata"
                        }
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "An opaque identifier supplied by caller that tracks the user for analytics purposes. The server does nothing with this value beyond storing it and passing it back in the email sent to the user.\n", 
                        "name": "analytics_context"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "Indicates the marketing affiliate we got the user. Eg: WD, Sandisk. This is restricted to 100 characters.\n", 
                        "name": "affiliate"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "Indicates the signup source where the created user was initiated. Ex: Share, Organic, Waitlist etc. This is restricted to 100 characters.\n", 
                        "name": "source"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "Optional promotion code to use at signup. If provided, this is expected to be a promo code (an alpha-numeric string, 16-bytes long, without hyphens), a coupon code or a referral code.\n", 
                        "name": "promotion_code"
                    }, 
                    {
                        "in": "body", 
                        "type": "integer", 
                        "description": "Client ID of the client making the request. This must be included for a parley token to be included in the response.\n", 
                        "name": "client_id"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "Device ID of the device making the request. This must be included for a parley token to be included in the response.\n", 
                        "name": "device_id"
                    }
                ], 
                "tags": [
                    "accounts"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Create unconfirmed user"
            }, 
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/accounts_confirm_response"
                        }
                    }, 
                    "403": {
                        "description": "Possible messages:\n- **invalid_user_status**: user has already confirmed their account\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal server error"
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_request**:\n  - invalid request body\n  - invalid parameter\n  - invalid confirmation code\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "This endpoint finishes the direct signup flow. The user must supply a confirmation code obtained from the email sent by a call to the PUT variant of this endpoint.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Confirmation code obtained from the email sent by a call to the PUT variant of this endpoint.\n", 
                        "in": "body", 
                        "name": "token"
                    }, 
                    {
                        "in": "body", 
                        "type": "integer", 
                        "description": "Client ID of the client making the request. This must be included for a parley token to be included in the response.\n", 
                        "name": "client_id"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "Device ID of the device making the request. This must be included for a parley token to be included in the response.\n", 
                        "name": "device_id"
                    }
                ], 
                "tags": [
                    "accounts"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Confirm direct signup"
            }, 
            "delete": {
                "description": "This endpoint will enqueue an op that will mark the user's account as deleted, they will be unable to login after their current token expires. Within 1-2 weeks the account data will be removed from our servers.\n", 
                "summary": "Delete user's account", 
                "responses": {
                    "200": {
                        "type": "object", 
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/accounts_empty_success_response"
                        }
                    }, 
                    "403": {
                        "description": "Possible messages:\n- **access_denied**: the super access token cookie does not refer to a valid user\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "401": {
                        "description": "Possible messages:\n- **invalid token**: the super access token cookie is missing, invalid, or expired\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal server error"
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_request**: X-Requested-With header should be set to XMLHttpRequest\n- **user_subscribed**: User subscription must be terminated before deleting account\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The user is identified through a valid Super Access Token cookie.", 
                        "in": "cookie", 
                        "name": "SuperAccessToken"
                    }
                ], 
                "tags": [
                    "accounts"
                ]
            }
        }, 
        "/accounts/users/externals/:identity_provider": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success. External account has been removed from the user"
                    }, 
                    "404": {
                        "description": "Possible messages:\n- **nonexistent_external_account**: external account doesn't exist for the identity provider\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Possible messages:\n- **server_error**: internal server error\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **missing_identity_provider**: missing \"identity_provider\" parameter\n- **unsupported_identity_provider**: unsupported identity provider\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "This endpoint will remove the given external account associated with the user.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "integer", 
                        "description": "The identity provider of the external account", 
                        "in": "path", 
                        "name": "identity_provider"
                    }
                ], 
                "tags": [
                    "accounts"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Remove the given external account associated with the user"
            }
        }, 
        "/accounts/users/referrals": {
            "post": {
                "description": "This API provides the ability for the referrer to send the email notification to the new user(s). The current functionality is intended for web app to invite someone with the referral code. As part of this API, we also create the invited user in the ghost user status before sending the email.\n", 
                "summary": "Send the referral invitation", 
                "responses": {
                    "200": {
                        "type": "object", 
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/accounts_empty_success_response"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized request (no access token provided)"
                    }, 
                    "500": {
                        "description": "Internal server error"
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_request**: Missing or invalid email(s)\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "description": "The list of email(s) of the new user(s) to be invited.", 
                        "in": "body", 
                        "items": {
                            "type": "string"
                        }, 
                        "required": true, 
                        "type": "array", 
                        "name": "emails"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "The client ID of the referrer.", 
                        "in": "body", 
                        "name": "client_id"
                    }
                ], 
                "tags": [
                    "accounts"
                ]
            }, 
            "get": {
                "description": "This endpoint retrieves the referral information for a given user ID\n", 
                "summary": "Get the referral info for the given user ID", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/referral_details"
                        }
                    }, 
                    "500": {
                        "description": "Internal server error"
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_request**:\n  - invalid request body\n  - invalid parameter\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The user is identified through a valid Access Token header.", 
                        "in": "header", 
                        "name": "AccessToken"
                    }, 
                    {
                        "in": "body", 
                        "type": "boolean", 
                        "description": "If true, we only send the summary of the referral info. For example apps on the mobile devices may be only interested to show the summary instead of the details.\n", 
                        "name": "summary_only"
                    }
                ], 
                "tags": [
                    "accounts"
                ]
            }
        }, 
        "/accounts/users/referrals/id": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success. Referral code is valid and exists"
                    }, 
                    "404": {
                        "description": "Possible messages:\n- **nonexistent_referrer_id**: Referral code is valid but nonexistent\n- **nonexistent_coupon_code**: Coupon code is valid but nonexistent\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_referrer_id**: Referral code is invalid\n- **missing_referrer_id**: missing \"referrer_id\" query parameter\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "This endpoint will check the validity of a referral code.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The referral or coupon code to be checked", 
                        "in": "query", 
                        "name": "referrer_id"
                    }
                ], 
                "tags": [
                    "accounts"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Check the validity of a referral code"
            }
        }, 
        "/accounts/users/resend": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/accounts_empty_success_response"
                        }
                    }, 
                    "403": {
                        "description": "Possible messages:\n- **invalid_user_status**: user is a ghost user and cannot use this endpoint\n- **user_already_confirmed**: user is already confirmed and cannot use this endpoint\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal server error"
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_request**:\n  - invalid request body\n  - invalid parameter\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "This endpoint resends the signup confirmation email to an unconfirmed user. It cannot be used for users in any other state.\n\nEmails are rate limited to 3 per hour. When the limit is reached, this endpoint will not return an error but the backend will not send the email.\n", 
                "parameters": [
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "The user's email address. Either this or user id must be set.", 
                        "in": "body", 
                        "name": "email"
                    }, 
                    {
                        "required": false, 
                        "type": "int64", 
                        "description": "The user's id. Either this or email must be set.", 
                        "in": "body", 
                        "name": "user_id"
                    }
                ], 
                "tags": [
                    "accounts"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Resend signup confirmation email"
            }
        }, 
        "/batch": {
            "post": {
                "responses": {
                    "202": {
                        "description": "Accepted. A 202 response will guarantee that all operations have been successfully queued from processing. If these operations fail the client will receive appropriate errors in their user log.\n"
                    }, 
                    "415": {
                        "description": "Bad content type"
                    }, 
                    "403": {
                        "description": "The user does not have access to the requested resource"
                    }, 
                    "401": {
                        "description": "Unauthorized request (no access token provided)"
                    }, 
                    "400": {
                        "description": "Bad or malformed request"
                    }, 
                    "503": {
                        "description": "Service unavailable"
                    }, 
                    "500": {
                        "description": "Internal server error"
                    }, 
                    "501": {
                        "description": "Bad operation type"
                    }
                }, 
                "description": "The request body should contain either a stream of standard MsgPack objects or a multipart form-data of JSON objects, that follow the op entry definitions. If a multipart/form-data request is made, the operation type must be supplied in each part header \"X-Upthere-Otype\" and the part must be of type \"application/json\". Payload operations in a multipart request must be made with a JSON part and immediately followed by their corresponding payload part with a \"Content-Type\" header of \"application/octet-stream\". OpIDs and 256-bit seeds are passed as hex strings for all multipart/form-data requests. The gateway will add the User ID extracted from the auth token header to each of the provided operations before appending to the Opqueue.\n\nAny error that is returned may include a header \"X-Upthere-Last\", which contains the operation ID for the last successfully queued operation. This operation and any before it in the request do not need to be retransmitted. If an error is reported and this header is unset, no operations in the batch succeeded.\n\n[Ops definitions](https://git.corp.upthere.com/backend/upcode/blob/master/src/services/lib/entry/ops.go)\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "in": "body", 
                        "description": "An array of objects that follow the op entry definitions", 
                        "name": "body", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/op_entry"
                            }, 
                            "type": "array"
                        }
                    }
                ], 
                "tags": [
                    "batch"
                ], 
                "consumes": [
                    "application/msgpack", 
                    "multipart/form-data"
                ], 
                "summary": "Batch uploads"
            }
        }, 
        "/billing/cards": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/accounts_empty_success_response"
                        }
                    }, 
                    "400": {
                        "description": "Invalid request (see [bserror.go](http://git.corp.upthere.com/backend/upcode/blob/master/src/services/billing/internal/bserror/bserror.go))", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "402": {
                        "description": "Error returned by Stripe (see [bserror.go](http://git.corp.upthere.com/backend/upcode/blob/master/src/services/billing/internal/bserror/bserror.go))", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "403": {
                        "description": "Permission error (see [bserror.go](http://git.corp.upthere.com/backend/upcode/blob/master/src/services/billing/internal/bserror/bserror.go))", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal error (see [bserror.go](http://git.corp.upthere.com/backend/upcode/blob/master/src/services/billing/internal/bserror/bserror.go))", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The Stripe token providing access to the new credit card", 
                        "in": "body", 
                        "name": "stripe_token"
                    }
                ], 
                "tags": [
                    "billing"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Changes the user's payment information."
            }
        }, 
        "/billing/subscriptions": {
            "post": {
                "summary": "Subscribes the user.", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/accounts_empty_success_response"
                        }
                    }, 
                    "400": {
                        "description": "Invalid request (see [bserror.go](http://git.corp.upthere.com/backend/upcode/blob/master/src/services/billing/internal/bserror/bserror.go))", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "402": {
                        "description": "Error returned by Stripe (see [bserror.go](http://git.corp.upthere.com/backend/upcode/blob/master/src/services/billing/internal/bserror/bserror.go))", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "403": {
                        "description": "Permission error (see [bserror.go](http://git.corp.upthere.com/backend/upcode/blob/master/src/services/billing/internal/bserror/bserror.go))", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal error (see [bserror.go](http://git.corp.upthere.com/backend/upcode/blob/master/src/services/billing/internal/bserror/bserror.go))", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The ID of the plan to start (see [plans.go](http://git.corp.upthere.com/backend/upcode/blob/master/src/services/billing/lib/plans/plans.go))", 
                        "in": "body", 
                        "name": "plan"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "The Stripe token providing access to the user's credit card", 
                        "name": "stripe_token"
                    }
                ], 
                "tags": [
                    "billing"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "description": "This creates a Stripe customer for the user if they do not already have one. The user's trial will be started immediately if they are eligible to start one."
            }, 
            "get": {
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Returns the user's billing information", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/get_subscriptions_response"
                        }
                    }, 
                    "500": {
                        "description": "There was an error fetching user/subscription info", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "tags": [
                    "billing"
                ]
            }, 
            "delete": {
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Cancels the user's subscription.", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/accounts_empty_success_response"
                        }
                    }, 
                    "400": {
                        "description": "Invalid request (see [bserror.go](http://git.corp.upthere.com/backend/upcode/blob/master/src/services/billing/internal/bserror/bserror.go))", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "402": {
                        "description": "Error returned by Stripe (see [bserror.go](http://git.corp.upthere.com/backend/upcode/blob/master/src/services/billing/internal/bserror/bserror.go))", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "403": {
                        "description": "Permission error (see [bserror.go](http://git.corp.upthere.com/backend/upcode/blob/master/src/services/billing/internal/bserror/bserror.go))", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal error (see [bserror.go](http://git.corp.upthere.com/backend/upcode/blob/master/src/services/billing/internal/bserror/bserror.go))", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "tags": [
                    "billing"
                ]
            }
        }, 
        "/clientstatus/uploads": {
            "get": {
                "responses": {
                    "200": {
                        "example": {
                            "uis_status": [
                                {
                                    "uiid": 34359738368, 
                                    "upload_groups": [
                                        {
                                            "is_paused": false, 
                                            "upload_group_id": 1, 
                                            "total_size": 1234567890, 
                                            "uploaded_size": 502132, 
                                            "is_completed": false, 
                                            "import_source": 8, 
                                            "upload_type": 1, 
                                            "last_seen_ts": "f3227660-ae56-11e4-86d2-fdaa9168617e", 
                                            "fully_uploaded_doc_count": 2, 
                                            "total_doc_count": 1000, 
                                            "first_seen_ts": "ba10c290-b217-11e4-86d2-fdaa9168617e"
                                        }
                                    ], 
                                    "uiname": "Stanley's iPhone 6S"
                                }
                            ], 
                            "uid": 41717986918, 
                            "asof": "64b4711c-181d-11e6-b6ba-3e1d05defe78"
                        }, 
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/client_status_result_v1"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized request (no access token provided)"
                    }, 
                    "500": {
                        "description": "Internal server error"
                    }, 
                    "400": {
                        "description": "Bad or malformed request"
                    }
                }, 
                "description": "Returns the status of the user instances associated with the user.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "Returns the details of the document revisions in the upload group if \"true\"", 
                        "in": "query", 
                        "name": "detail"
                    }
                ], 
                "tags": [
                    "clientstatus"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Returns the client status of the authenticated user"
            }
        }, 
        "/clientstatus/uploads/:user_instance_id/:upload_group_id": {
            "get": {
                "responses": {
                    "200": {
                        "example": {
                            "uis_status": [
                                {
                                    "uiid": 34359738368, 
                                    "upload_groups": [
                                        {
                                            "is_paused": false, 
                                            "upload_group_id": 1, 
                                            "total_size": 1234567890, 
                                            "uploaded_size": 502132, 
                                            "is_completed": false, 
                                            "import_source": 8, 
                                            "upload_type": 1, 
                                            "last_seen_ts": "f3227660-ae56-11e4-86d2-fdaa9168617e", 
                                            "fully_uploaded_doc_count": 2, 
                                            "total_doc_count": 1000, 
                                            "first_seen_ts": "ba10c290-b217-11e4-86d2-fdaa9168617e"
                                        }
                                    ], 
                                    "uiname": "Stanley's iPhone 6S"
                                }
                            ], 
                            "uid": 41717986918, 
                            "asof": "64b4711c-181d-11e6-b6ba-3e1d05defe78"
                        }, 
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/client_status_result_v1"
                        }
                    }, 
                    "404": {
                        "description": "The user instance or the upload group doesn't exist"
                    }, 
                    "401": {
                        "description": "Unauthorized request (no access token provided)"
                    }, 
                    "500": {
                        "description": "Internal server error"
                    }, 
                    "400": {
                        "description": "Bad or malformed request"
                    }
                }, 
                "description": "Returns the status of an upload group in a given user instance associated with the user.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "User Instance ID of the user instance where the upload takes place", 
                        "in": "path", 
                        "name": "user_instance_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Upload Group ID of the upload group associated with the upload", 
                        "in": "path", 
                        "name": "upload_group_id"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "Returns the details of the document revisions in the upload group if \"true\"", 
                        "in": "query", 
                        "name": "detail"
                    }
                ], 
                "tags": [
                    "clientstatus"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Returns the status of an upload group in a given user instance associated with the authenticated user"
            }
        }, 
        "/comments": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/comment_bulk_response_item"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized request (no access token provided)"
                    }, 
                    "400": {
                        "description": "Bad or malformed request"
                    }
                }, 
                "description": "Returns an array of comment range query results", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "A Map of string <query_id> to query object", 
                        "name": "queries", 
                        "schema": {
                            "$ref": "#/definitions/comment_bulk_query"
                        }
                    }
                ], 
                "tags": [
                    "comments"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Returns an array of comment range query results"
            }
        }, 
        "/comments/:view_id": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/comment_comment_range"
                        }
                    }, 
                    "404": {
                        "description": "The view or document does not exist"
                    }, 
                    "403": {
                        "description": "The user does not have access to the view"
                    }, 
                    "401": {
                        "description": "Unauthorized request (no access token provided)"
                    }, 
                    "400": {
                        "description": "Bad or malformed request"
                    }
                }, 
                "description": "Returns a list of comments of a view or a document", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "ID of the view that comments belong to", 
                        "in": "path", 
                        "name": "view_id"
                    }, 
                    {
                        "required": false, 
                        "type": "integer", 
                        "description": "Locator associated with the view. An empty value means the view is located in the current data center. This is currently supported only in the v1000 endpoint.\n", 
                        "in": "query", 
                        "name": "view_locator"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "Type-1 UUID (in hex form) which represents the time start retrieving the comments from. An empty value means start from the latest one. Since the api only allows retrieving comments in reverse chronologic order, all the comments returned will be dated before this time.", 
                        "in": "body", 
                        "name": "from"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "Type-1 UUID (in hex form) which represents the time to stop retrieving the comments. Note that if there is comment created exactly at <to> timestamp, it will not be included. Combined with <from> parameter, this will construct a query time range. And the result will include comment in <from> but exclude comment in <to>.", 
                        "in": "body", 
                        "name": "to"
                    }, 
                    {
                        "description": "The maximum number of comments returned, default value is 100.", 
                        "in": "body", 
                        "default": 100, 
                        "required": false, 
                        "type": "integer", 
                        "name": "limit"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "ID of the document that comments belong to. An empty value means this request needs all comments in the view to be returned.", 
                        "in": "body", 
                        "name": "doc_id"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "ID of the document/branch that commetns belong to. When doc_id is empty, this value will be neglected.", 
                        "in": "body", 
                        "name": "branch_id"
                    }
                ], 
                "tags": [
                    "comments"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Returns a list of comments of a view or a document"
            }
        }, 
        "/comments/:view_id/:comment_id": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/comment_comment"
                        }
                    }, 
                    "404": {
                        "description": "The view or comment does not exist"
                    }, 
                    "403": {
                        "description": "The user does not have access to the view"
                    }, 
                    "401": {
                        "description": "Unauthorized request (no access token provided)"
                    }, 
                    "400": {
                        "description": "Bad or malformed request"
                    }
                }, 
                "description": "Returns the comment for given view id and comment id.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "ID of the view containing the comment", 
                        "in": "path", 
                        "name": "view_id"
                    }, 
                    {
                        "required": false, 
                        "type": "integer", 
                        "description": "Locator associated with the view. An empty value means the view is located in the current data center. This is currently supported only in the v1000 endpoint.\n", 
                        "in": "query", 
                        "name": "view_locator"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "ID of the comment", 
                        "in": "path", 
                        "name": "comment_id"
                    }
                ], 
                "tags": [
                    "comments"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Returns the comment"
            }
        }, 
        "/contents": {
            "get": {
                "description": "Returns the contents of all documents within a view as a zip", 
                "summary": "Returns the content of all documents within a view as a zip", 
                "responses": {
                    "200": {
                        "headers": {
                            "Content-Type": {
                                "type": "string", 
                                "description": "application/zip"
                            }
                        }, 
                        "description": "Success"
                    }, 
                    "404": {
                        "description": "The view does not exist"
                    }, 
                    "403": {
                        "description": "The user does not have access to the requested resource"
                    }, 
                    "401": {
                        "description": "Unauthorized request (no access token provided)"
                    }, 
                    "400": {
                        "description": "Bad or malformed request"
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "View ID of the view to retrieve the documents' contents from", 
                        "in": "query", 
                        "name": "view_id"
                    }, 
                    {
                        "required": false, 
                        "type": "integer", 
                        "description": "Locator associated with the view. An empty value means the view is located in the current data center.\n", 
                        "in": "query", 
                        "name": "view_locator"
                    }
                ], 
                "tags": [
                    "contents"
                ]
            }
        }, 
        "/contents/:doc_id/:rev_id": {
            "get": {
                "description": "Returns the content of a document", 
                "summary": "Returns the content of a document", 
                "responses": {
                    "200": {
                        "headers": {
                            "Content-Disposition": {
                                "type": "string", 
                                "description": "attachment; filename=\"FILE_NAME\""
                            }
                        }, 
                        "description": "Success"
                    }, 
                    "404": {
                        "description": "The document or revision does not exist"
                    }, 
                    "403": {
                        "description": "The user does not have access to the requested resource"
                    }, 
                    "401": {
                        "description": "Unauthorized request (no access token provided)"
                    }, 
                    "206": {
                        "description": "Partial content if requested by the client. See the \"Range\" parameter for more information.\n"
                    }, 
                    "400": {
                        "description": "Bad or malformed request"
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Document ID", 
                        "in": "path", 
                        "name": "doc_id"
                    }, 
                    {
                        "required": false, 
                        "type": "integer", 
                        "description": "Locator associated with the document. An empty value means the document is located in the current data center. This is currently supported only in the v1000 endpoint.\n", 
                        "in": "query", 
                        "name": "doc_locator"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Revision ID", 
                        "in": "path", 
                        "name": "rev_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "View ID of the view containing the document revision", 
                        "in": "query", 
                        "name": "view_id"
                    }, 
                    {
                        "required": false, 
                        "type": "integer", 
                        "description": "Locator associated with the view. An empty value means the view is located in the current data center. This is currently supported only in the v1000 endpoint.\n", 
                        "in": "query", 
                        "name": "view_locator"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "Branch ID of the branch containing the document revision; required for public requests only\n", 
                        "in": "query", 
                        "name": "branch_id"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "A byte range to specify that the server should only send partial content as defined in RFC 2616 section 14.35.\n", 
                        "in": "header", 
                        "name": "range"
                    }
                ], 
                "tags": [
                    "contents"
                ]
            }
        }, 
        "/devices": {
            "get": {
                "sumary": "Returns a list of devices that registered with the given user", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/device_device_batch"
                        }
                    }, 
                    "503": {
                        "description": "Service not available"
                    }, 
                    "401": {
                        "description": "Unauthorized request (no access token provided)"
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }
                ], 
                "tags": [
                    "devices"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "description": "Returns currently registered devices under the given user, or an empty list if this user doesn't have any device registered."
            }
        }, 
        "/devices/:skyline_device_id": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/device_device"
                        }
                    }, 
                    "404": {
                        "description": "The device doesn't belong to this user or it doen't exist"
                    }, 
                    "503": {
                        "description": "Service not available"
                    }, 
                    "401": {
                        "description": "Unauthorized request (no access token provided)"
                    }, 
                    "400": {
                        "description": "Bad or malformed request"
                    }
                }, 
                "description": "Returns the user device for given user id and device id.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "ID fo the device", 
                        "in": "path", 
                        "name": "device_id"
                    }
                ], 
                "tags": [
                    "devices"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Returns the user device"
            }
        }, 
        "/drives": {
            "get": {
                "responses": {
                    "200": {
                        "description": "An array of drives", 
                        "schema": {
                            "$ref": "#/definitions/drives_response"
                        }
                    }, 
                    "default": {
                        "description": "Unexpected error", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "The drives endpoint lists all drives associated with a user\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }
                ], 
                "tags": [
                    "Drives"
                ], 
                "summary": "List all drives"
            }
        }, 
        "/drives/:drive_id": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Drive metadata", 
                        "schema": {
                            "$ref": "#/definitions/drive_response"
                        }
                    }, 
                    "400": {
                        "description": "Bad request", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "default": {
                        "description": "Unexpected error", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "404": {
                        "description": "Not found", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "The drives endpoint retrieves the metadata of a single drive\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "hex-encoded 256-bit ID of the drive", 
                        "in": "path", 
                        "name": "drive_id"
                    }
                ], 
                "tags": [
                    "Drives"
                ], 
                "summary": "Retrieve drive metadata"
            }
        }, 
        "/drives/:drive_id/directories/:dir_id": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Directory metadata", 
                        "schema": {
                            "$ref": "#/definitions/dir_response"
                        }
                    }, 
                    "400": {
                        "description": "Bad request", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "default": {
                        "description": "Unexpected error", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "404": {
                        "description": "Not found", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "The directories endpoint retrieves the metadata of a directory.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "hex-encoded 256-bit ID of the drive", 
                        "in": "path", 
                        "name": "drive_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "hex-encoded 256-bit ID of the drive", 
                        "in": "path", 
                        "name": "dir_id"
                    }
                ], 
                "tags": [
                    "Directories"
                ], 
                "summary": "Retrieves directory metadata"
            }
        }, 
        "/drives/:drive_id/directories/:dir_id/child": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Directory metadata", 
                        "schema": {
                            "$ref": "#/definitions/dir_child_response"
                        }
                    }, 
                    "400": {
                        "description": "Bad request", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "default": {
                        "description": "Unexpected error", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "404": {
                        "description": "Not found", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "The child endpoint retrieves a directory entry which is a child (either direct or recursive) of\nthe requested dir.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "hex-encoded 256-bit ID of the drive", 
                        "in": "path", 
                        "name": "drive_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "hex-encoded 256-bit ID of the drive", 
                        "in": "path", 
                        "name": "dir_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "path of the entry to retrieve relative to the specified directory", 
                        "in": "query", 
                        "name": "path"
                    }
                ], 
                "tags": [
                    "Directories"
                ], 
                "summary": "Retrieves directory entry information of a child of a directory based on path"
            }
        }, 
        "/drives/:drive_id/directories/:dir_id/children": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Directory metadata", 
                        "schema": {
                            "$ref": "#/definitions/dir_children_response"
                        }
                    }, 
                    "400": {
                        "description": "Bad request", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "default": {
                        "description": "Unexpected error", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "404": {
                        "description": "Not found", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "Retrieves directory entries for children of a directory.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "hex-encoded 256-bit ID of the drive", 
                        "in": "path", 
                        "name": "drive_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "hex-encoded 256-bit ID of the drive", 
                        "in": "path", 
                        "name": "dir_id"
                    }, 
                    {
                        "default": "name", 
                        "in": "query", 
                        "type": "string", 
                        "description": "Controls attribute for sorting. Available attributes are\nname, size, mod_time, and kind\n", 
                        "name": "sort_by"
                    }, 
                    {
                        "default": false, 
                        "in": "query", 
                        "type": "boolean", 
                        "description": "Controls sort direction. If the value is a string which parses to true\n(see strconv.ParseBool), will reverse the sort order for the given\nsort_by.\n", 
                        "name": "descending"
                    }, 
                    {
                        "default": false, 
                        "in": "query", 
                        "type": "boolean", 
                        "description": "If the value is a string which parses to true (see strconv.ParseBool),\nthis will omit documents that are not payload complete.\n", 
                        "name": "exclude_incomplete"
                    }, 
                    {
                        "default": 10000, 
                        "in": "query", 
                        "type": "integer", 
                        "description": "limit bounds the total number of children which a request will return.\nThe server may enforce an arbitrary maximum limit.\nIncomplete result sets can be detected through the existence of a\npage_key in the response object.\n", 
                        "name": "limit"
                    }, 
                    {
                        "in": "query", 
                        "type": "string", 
                        "description": "page_key enables clients to page through results. It\na page_key value is supplied in a response if entries exist which would\ncome after the returned result set given the sort_by, descending, limit,\nand page_key parameters. A missing or blank page_key should be used for\nthe first request. As with other AsOf metadata routes which support this\nstyle of paging, only the AsOf of the first result page may be used to\naccurately track the result set.\n", 
                        "name": "page_key"
                    }
                ], 
                "tags": [
                    "Directories"
                ], 
                "summary": "Retrieves directory entries for children of a directory."
            }
        }, 
        "/drives/:drive_id/directories/:dir_id/parents": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Directory metadata", 
                        "schema": {
                            "$ref": "#/definitions/dir_parents_response"
                        }
                    }, 
                    "400": {
                        "description": "Bad request", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "default": {
                        "description": "Unexpected error", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "404": {
                        "description": "Not found", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "The directories endpoint retrieves the metadata of a directory.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "hex-encoded 256-bit ID of the drive", 
                        "in": "path", 
                        "name": "drive_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "hex-encoded 256-bit ID of the drive", 
                        "in": "path", 
                        "name": "dir_id"
                    }
                ], 
                "tags": [
                    "Directories"
                ], 
                "summary": "Retrieves metadata for a directory and its parents"
            }
        }, 
        "/drives/:drive_id/directories/:dir_id/recursive_children": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Directory metadata", 
                        "schema": {
                            "$ref": "#/definitions/recursive_dir_children_response"
                        }
                    }, 
                    "400": {
                        "description": "Bad request", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "default": {
                        "description": "Unexpected error", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "404": {
                        "description": "Not found", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "The directories endpoint retrieves the metadata of a directory and all of\nits recursive children.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "hex-encoded 256-bit ID of the drive", 
                        "in": "path", 
                        "name": "drive_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "hex-encoded 256-bit ID of the drive", 
                        "in": "path", 
                        "name": "dir_id"
                    }
                ], 
                "tags": [
                    "Directories"
                ], 
                "summary": "Retrieves directory metadata and all of its recursive children"
            }
        }, 
        "/drives_contents": {
            "get": {
                "tags": [
                    "drives_contents"
                ]
            }
        }, 
        "/facets": {
            "post": {
                "description": "Returns facet objects from the given context. The facets returned would include drives predicates and suggestions.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Query parameters", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/facet_request"
                        }
                    }
                ], 
                "tags": [
                    "facets"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/facet_response"
                        }
                    }, 
                    "404": {
                        "description": "View not found"
                    }, 
                    "403": {
                        "description": "The user does not have access to the requested resource"
                    }, 
                    "401": {
                        "description": "Unauthorized request (no access token provided)"
                    }, 
                    "400": {
                        "description": "Bad or malformed request"
                    }
                }
            }
        }, 
        "/feed": {
            "get": {
                "responses": {
                    "200": {
                        "example": {
                            "asof": {
                                "to": "f3227660-ae56-11e4-86d2-fdaa9168617e", 
                                "from": "ba10c290-b217-11e4-86d2-fdaa9168617e"
                            }, 
                            "next_cluster_offset": 3, 
                            "presence_info": {
                                "docs_presence_info": {
                                    "doc_in_view": [
                                        {
                                            "branch_id": "63463215b3fc6189984121f8663d4c108101fe563242967761ae2c558f2a3971", 
                                            "view_id": "fa58f9f0f4586848e672b93f847c78271edf043fe11199f0128a2179af732cf8", 
                                            "doc_id": "8af291eaee2c6aa2468f1bb5ee8292222758403a9eb2f899d9ddb056ec2ff676"
                                        }
                                    ], 
                                    "watermark": "028fbd3e-e1e5-11e5-b86d-9a79f06e9478", 
                                    "is_presence": false
                                }, 
                                "users_presence_info": {
                                    "user_in_view": [
                                        {
                                            "view_id": "fa58f9f0f4586848e672b93f847c78271edf043fe11199f0128a2179af732cf8", 
                                            "user_id": 34359738368
                                        }
                                    ], 
                                    "watermark": "20cd0f68-e1e5-11e5-b86d-9a79f06e9478", 
                                    "is_presence": false
                                }
                            }, 
                            "next_watermark": "f3227660-ae56-11e4-86d2-fdaa9168617e", 
                            "clusters": [
                                {
                                    "category": 2, 
                                    "recipients": [
                                        17179869184, 
                                        34359738368
                                    ], 
                                    "vloc": 98348731976, 
                                    "docs": [
                                        {
                                            "category": 1, 
                                            "branch_id": "a73e7c74417a7a89588641052dda813350c2717b4948157fcbe8a4db6cf713b0", 
                                            "dloc": 98348731976, 
                                            "doc_id": "b6a8dc2c59b1893fbd1ee64ba3d55fe82dfd08481f8f4a8e898c1b3697ddde20", 
                                            "rev_id": "c59b1893fbd1ee64ba3d55fe82dfd08481f8f4a8e898c1b3697ddde20b6a8dc2"
                                        }, 
                                        {
                                            "category": 3, 
                                            "branch_id": "520cd25b22e13b69a543629632d0b0624ec80249657f8774eda78667e9290590", 
                                            "dloc": 98348731976, 
                                            "doc_id": "8303ae4a7911e871a0afac7f774a4c914026094554fb5e30ead510523a4e5d66", 
                                            "rev_id": "d4c440a5114394802cffd9deb8bdd7219905909704d52954f3f2c9d5b27b7817"
                                        }
                                    ], 
                                    "watermarks": {
                                        "to": "f3227660-ae56-11e4-86d2-fdaa9168617e", 
                                        "from": "ba10c290-b217-11e4-86d2-fdaa9168617e"
                                    }, 
                                    "context": {
                                        "total_doc": 10, 
                                        "total_user": 5
                                    }, 
                                    "time": 1294968290, 
                                    "initiators": [
                                        98348731976, 
                                        57602932682
                                    ], 
                                    "type": 1, 
                                    "id": "743a0ca56720caf3", 
                                    "view": "a8dc2c59b1893fbd1ee64ba3d55fe82dfd08481f8f4a8e898c1b3697ddde2019"
                                }, 
                                {
                                    "category": 1, 
                                    "watermarks": {
                                        "to": "f3227660-ae56-11e4-86d2-fdaa9168617e", 
                                        "from": "ba10c290-b217-11e4-86d2-fdaa9168617e"
                                    }, 
                                    "time": 1294968295, 
                                    "initiators": [
                                        98348731976
                                    ], 
                                    "docs": [
                                        {
                                            "category": 2, 
                                            "branch_id": "8f6760d32f747402f5df2781ea2d8dd9964347e3766b258dd04a77f9263353f4", 
                                            "dloc": 98348731976, 
                                            "doc_id": "919b1ebcced4920bf9a8429acb375f2da435ca195a87d809da95854c6b3c0702", 
                                            "rev_id": "bdc282bdd4c05d5a26b61888f170b3d1abf3e29ea95483d62dde9f1ec0ce83ff"
                                        }, 
                                        {
                                            "category": 1, 
                                            "branch_id": "c489a4dd80829fee220c9218fb9ba9f875e1a2c059e0d1db5ed4e5949aa15c7a", 
                                            "dloc": 98348731976, 
                                            "doc_id": "dc2c59b1893fbd1ee64ba3d55fe82dfd08481f8f4a8e898c1b3697ddde20b6a8", 
                                            "rev_id": "1893fbd1ee64ba3d55fe82dfd08481f8f4a8e898c1b3697ddde20b6a8dc2c59b"
                                        }
                                    ], 
                                    "type": 0, 
                                    "id": "caf3743a0ca56720"
                                }
                            ]
                        }, 
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/feed_result_v2"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized request (no access token provided)"
                    }, 
                    "400": {
                        "description": "Bad or malformed request"
                    }
                }, 
                "description": "Returns the user's activity feed. The service uses \"utc_offset\" and \"day\" to determine the starting point in the user logs, and generates the activity feed by processing the user logs in reverse-chronological order one calendar day at a time. The returned activity feed also contains watermark and activity offset for the client to subsequently retrieve more activity feed in the past.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": true, 
                        "type": "integer", 
                        "description": "UTC offset of the client. UTC offset is the difference, in SECONDS, between UTC and local time. Note that this means that the offset is negative if the local timezone is behind UTC and positive if it is ahead. As an example, PST's UTC-offset is 28800 in winter time\n", 
                        "in": "query", 
                        "name": "utc_offset"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "Type-1 UUID (in hex form) which represents the calendar day to start retrieving the activity feed from. An empty value means today\n", 
                        "in": "query", 
                        "name": "day"
                    }, 
                    {
                        "description": "Activity offset with respect to the activities in the calendar day to start retrieving the activity feed from. An empty value means 0\n", 
                        "in": "query", 
                        "default": "0", 
                        "required": false, 
                        "type": "integer", 
                        "name": "cluster_offset"
                    }, 
                    {
                        "description": "Desire number of activities to be returned. The actual number of activities to return is determined by the activity feed service. An empty value means 10\n", 
                        "in": "query", 
                        "default": "10", 
                        "required": false, 
                        "type": "integer", 
                        "name": "max_cluster_count"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "Type-1 UUID (in hex form) which represents the time to be used for conditional request. If the requested activity has not been modified since the time specified in this parameter, the activity will not be returned from the server. An empty value means there is no condition\n", 
                        "in": "query", 
                        "name": "if_modified_since"
                    }, 
                    {
                        "description": "A flag indicating if empty Upload activities associated with completed upload group should be returned with the activity feed\n", 
                        "in": "query", 
                        "default": "0", 
                        "required": false, 
                        "type": "integer", 
                        "name": "empty_completed_upload"
                    }, 
                    {
                        "description": "A flag indicating if additional metadata should be returned with the activity (e.g. user metadata such a first and last name)\n", 
                        "in": "query", 
                        "default": "0", 
                        "required": false, 
                        "type": "integer", 
                        "name": "need_metadata"
                    }
                ], 
                "tags": [
                    "feed"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Returns the user's activity feed"
            }
        }, 
        "/feed/views/:view_id": {
            "get": {
                "responses": {
                    "200": {
                        "example": {
                            "asof": {
                                "to": "f3227660-ae56-11e4-86d2-fdaa9168617e", 
                                "from": "ba10c290-b217-11e4-86d2-fdaa9168617e"
                            }, 
                            "next_cluster_offset": 3, 
                            "presence_info": {
                                "docs_presence_info": {
                                    "doc_in_view": [
                                        {
                                            "branch_id": "63463215b3fc6189984121f8663d4c108101fe563242967761ae2c558f2a3971", 
                                            "view_id": "fa58f9f0f4586848e672b93f847c78271edf043fe11199f0128a2179af732cf8", 
                                            "doc_id": "8af291eaee2c6aa2468f1bb5ee8292222758403a9eb2f899d9ddb056ec2ff676"
                                        }
                                    ], 
                                    "watermark": "028fbd3e-e1e5-11e5-b86d-9a79f06e9478", 
                                    "is_presence": false
                                }, 
                                "users_presence_info": {
                                    "user_in_view": [
                                        {
                                            "view_id": "fa58f9f0f4586848e672b93f847c78271edf043fe11199f0128a2179af732cf8", 
                                            "user_id": 34359738368
                                        }
                                    ], 
                                    "watermark": "20cd0f68-e1e5-11e5-b86d-9a79f06e9478", 
                                    "is_presence": false
                                }
                            }, 
                            "next_watermark": "f3227660-ae56-11e4-86d2-fdaa9168617e", 
                            "clusters": [
                                {
                                    "category": 2, 
                                    "recipients": [
                                        17179869184, 
                                        34359738368
                                    ], 
                                    "vloc": 98348731976, 
                                    "docs": [
                                        {
                                            "category": 1, 
                                            "branch_id": "a73e7c74417a7a89588641052dda813350c2717b4948157fcbe8a4db6cf713b0", 
                                            "dloc": 98348731976, 
                                            "doc_id": "b6a8dc2c59b1893fbd1ee64ba3d55fe82dfd08481f8f4a8e898c1b3697ddde20", 
                                            "rev_id": "c59b1893fbd1ee64ba3d55fe82dfd08481f8f4a8e898c1b3697ddde20b6a8dc2"
                                        }, 
                                        {
                                            "category": 3, 
                                            "branch_id": "520cd25b22e13b69a543629632d0b0624ec80249657f8774eda78667e9290590", 
                                            "dloc": 98348731976, 
                                            "doc_id": "8303ae4a7911e871a0afac7f774a4c914026094554fb5e30ead510523a4e5d66", 
                                            "rev_id": "d4c440a5114394802cffd9deb8bdd7219905909704d52954f3f2c9d5b27b7817"
                                        }
                                    ], 
                                    "watermarks": {
                                        "to": "f3227660-ae56-11e4-86d2-fdaa9168617e", 
                                        "from": "ba10c290-b217-11e4-86d2-fdaa9168617e"
                                    }, 
                                    "context": {
                                        "total_doc": 10, 
                                        "total_user": 5
                                    }, 
                                    "time": 1294968290, 
                                    "initiators": [
                                        98348731976, 
                                        57602932682
                                    ], 
                                    "type": 1, 
                                    "id": "743a0ca56720caf3", 
                                    "view": "a8dc2c59b1893fbd1ee64ba3d55fe82dfd08481f8f4a8e898c1b3697ddde2019"
                                }
                            ]
                        }, 
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/feed_result_v2"
                        }
                    }, 
                    "404": {
                        "description": "The view doesn't exist"
                    }, 
                    "403": {
                        "description": "The user does not have access to the view"
                    }, 
                    "401": {
                        "description": "Unauthorized request (no access token provided)"
                    }, 
                    "400": {
                        "description": "Bad or malformed request"
                    }
                }, 
                "description": "Returns the user's activity feed for a view. The service uses \"utc_offset\" and \"day\" to determine the starting point in the view logs, and generates the activity feed by processing the view logs in reverse-chronological order for one calendar day. The returned activity feed also contains watermark and activity offset for the client to subsequently retrieve more activity feed in the past.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": true, 
                        "type": "integer", 
                        "description": "UTC offset of the client. UTC offset is the difference, in SECONDS, between UTC and local time. Note that this means that the offset is negative if the local timezone is behind UTC and positive if it is ahead. As an example, PST's UTC-offset is 28800 in winter time\n", 
                        "in": "query", 
                        "name": "utc_offset"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "Type-1 UUID (in hex form) which represents the calendar day to start retrieving the activity feed from. An empty value means today\n", 
                        "in": "query", 
                        "name": "day"
                    }, 
                    {
                        "description": "Activity offset with respect to the activities in the calendar day to start retrieving the activity feed from. An empty value means 0\n", 
                        "in": "query", 
                        "default": "0", 
                        "required": false, 
                        "type": "integer", 
                        "name": "cluster_offset"
                    }, 
                    {
                        "description": "Desire number of activities to be returned. The actual number of activities to return is determined by the activity feed service. An empty value means 10\n", 
                        "in": "query", 
                        "default": "10", 
                        "required": false, 
                        "type": "integer", 
                        "name": "max_cluster_count"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "Type-1 UUID (in hex form) which represents the time to be used for conditional request. If the requested activity has not been modified since the time specified in this parameter, the activity will not be returned from the server. An empty value means there is no condition\n", 
                        "in": "query", 
                        "name": "if_modified_since"
                    }, 
                    {
                        "description": "A flag indicating if empty Upload activities associated with completed upload group should be returned with the activity feed\n", 
                        "in": "query", 
                        "default": "0", 
                        "required": false, 
                        "type": "integer", 
                        "name": "empty_completed_upload"
                    }, 
                    {
                        "description": "A flag indicating if additional metadata should be returned with the activity (e.g. user metadata such a first and last name)\n", 
                        "in": "query", 
                        "default": "0", 
                        "required": false, 
                        "type": "integer", 
                        "name": "need_metadata"
                    }, 
                    {
                        "required": false, 
                        "type": "integer", 
                        "description": "Locator associated with the view. An empty value means the view is located in the current data center. This is currently supported only in the v1000 endpoint.\n", 
                        "in": "query", 
                        "name": "view_locator"
                    }
                ], 
                "tags": [
                    "feed"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Returns the user's activity feed for a view"
            }
        }, 
        "/graphql": {
            "post": {
                "responses": {
                    "200": {
                        "description": "JSON string containing query response."
                    }, 
                    "default": {
                        "description": "Unexpected error"
                    }
                }, 
                "description": "The graphql endpoint serves GraphQL queries for a user's Providers as well as Flashback devices and their content.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "GraphQL query body.", 
                        "in": "body", 
                        "name": "query"
                    }
                ], 
                "tags": [
                    "GraphQL"
                ], 
                "summary": "Cloud GraphQL endpoint."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "JSON string containing query response."
                    }, 
                    "default": {
                        "description": "Unexpected error"
                    }
                }, 
                "description": "The graphql endpoint serves GraphQL queries for a user's Providers as well as Flashback devices and their content.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "GraphQL query body.", 
                        "in": "body", 
                        "name": "query"
                    }
                ], 
                "tags": [
                    "GraphQL"
                ], 
                "summary": "Cloud GraphQL endpoint."
            }
        }, 
        "/graphqlold": {
            "post": {
                "responses": {
                    "200": {
                        "description": "JSON string containing query response."
                    }, 
                    "default": {
                        "description": "Unexpected error"
                    }
                }, 
                "description": "The graphql endpoint serves GraphQL queries for a user's StorageProviders and their respective StorageLocations\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "GraphQL query body.", 
                        "in": "body", 
                        "name": "query"
                    }
                ], 
                "tags": [
                    "GraphQL"
                ], 
                "summary": "GraphQL StorageProviders query"
            }
        }, 
        "/graphqlold/drives/:drive_id": {
            "post": {
                "responses": {
                    "200": {
                        "description": "JSON string containing query response."
                    }, 
                    "default": {
                        "description": "Unexpected error"
                    }
                }, 
                "description": "The graphql endpoint serves GraphQL queries for a drive StorageLocation and its contained Documents and Collections\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "hex-encoded 256-bit ID of the drive", 
                        "in": "path", 
                        "name": "drive_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "GraphQL query body.", 
                        "in": "body", 
                        "name": "query"
                    }
                ], 
                "tags": [
                    "GraphQL"
                ], 
                "summary": "GraphQL query for drive documents and collections"
            }
        }, 
        "/identity/.well-known/jwks.json": {
            "get": {
                "description": "This endpoint returns a list of public keys that are pairs of the private keys  identity service used to sign JWTs. Although this endpoint currently only returns a single RSA public key, but it's important to assume this endponit might return more JWKs in the future for the purpose of rotating signing keys.\nThe keys returned by this endpoint is all base64 url encoded. It follows the standard jwks format. A good example can be found here https://auth0.com/docs/tokens/reference/jwt/jwks-properties and here https://www.googleapis.com/oauth2/v3/certs.\nClients can use this endpoint to get the public keys then use this public key to verify the signature of the JWTs client receives. One example of using this key is when client receives an access token in JWT format and decode the claims from JWT, but isn't sure that there is no middle man modifying the claim. Then to assure this, client can use the keys returned by this endpoint, to verify the signature from JWTs.\n", 
                "summary": "Return a list of keys that identity service used to sign JWTs.", 
                "responses": {
                    "200": {
                        "description": "Success.", 
                        "schema": {
                            "$ref": "#/definitions/identity_well_known_jwks_response"
                        }
                    }
                }, 
                "tags": [
                    "identity"
                ]
            }
        }, 
        "/identity/passwords/check": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Possible reasons:\n- **\"\"**: valid\n- **too_short**: Length is less than 8.\n- **too_long**: Length is more than 70.\n- **only_numbers**: Only numbers are found.\n- **blacklisted**: The password is blacklisted.\n", 
                        "schema": {
                            "$ref": "#/definitions/passwords_check_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal server error."
                    }
                }, 
                "description": "This endpoint checks password format. It does not check if password matches. It returns validity and reason result.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The password to check.", 
                        "in": "body", 
                        "name": "password"
                    }
                ], 
                "tags": [
                    "identity"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Check password format"
            }
        }, 
        "/identity/passwords/reset": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success."
                    }, 
                    "404": {
                        "description": "Possible messages:\n  - **not_found**: Email or user ID is not found, or user is in ghost status.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "403": {
                        "description": "Possible messages:\n  - **user_unconfirmed**: The user is not confirmed.\n  - **flagged_for_deletion**: The user is flagged for deletion.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "401": {
                        "description": "Possible messages:\n  - **invalid_token**: The token is malformed or cannot be found in the database.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_client**: No data was found for a client ID.\n- **invalid_request**:\n  - invalid request body\n  - invalid parameter\n  - invalid email\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "503": {
                        "description": "Possible messages:\n  - **temporarily_unavailable**: Service is unavailable.\n"
                    }, 
                    "500": {
                        "description": "Internal server error."
                    }
                }, 
                "description": "This end point resets a user's password. There are two stages:\n\nIn the first stage, the user provides their email address and we send them an email with a token.\n\nIn the second stage, the user provides the token and the new password, and we check the token and change the password if it is valid.\n", 
                "parameters": [
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "The email address of the user.", 
                        "name": "email"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "The token sent via email in the first stage.", 
                        "name": "reset_token"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "The new password for the user.", 
                        "name": "new_password"
                    }, 
                    {
                        "required": false, 
                        "type": "integer", 
                        "description": "The ID of the client making the request. Although it is optional to be backward compitable, it is required for products other than Sirocco.\n", 
                        "in": "body", 
                        "name": "client_id"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "The ID of the device making this request. Although it is optional to be backward compitable, it is required for products other than Sirocco.\n", 
                        "in": "body", 
                        "name": "device_id"
                    }
                ], 
                "tags": [
                    "identity"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Reset user password."
            }
        }, 
        "/identity/passwords/reset/check": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success."
                    }, 
                    "404": {
                        "description": "Possible messages:\n  - **not_found**: Email or user ID is not found, or user is in ghost status.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "403": {
                        "description": "Possible messages:\n  - **user_unconfirmed**: The user is not confirmed.\n  - **flagged_for_deletion**: The user is flagged for deletion.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "401": {
                        "description": "Possible messages:\n  - **invalid_token**: The token is malformed or cannot be found in the database.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_request**:\n  - invalid request body\n  - invalid parameter\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal server error."
                    }
                }, 
                "description": "This end point checks if a reset password token is valid. Both non-existing tokens and expired tokens are considered invalid.\n", 
                "parameters": [
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "The token sent via email in the first stage.", 
                        "name": "reset_token"
                    }
                ], 
                "tags": [
                    "identity"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Check if aa reset password token is valid."
            }
        }, 
        "/identity/preferences": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success."
                    }, 
                    "404": {
                        "description": "Possible messages:\n  - **not_found**: Email or user ID is not found, or user is in ghost status.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "403": {
                        "description": "Possible messages:\n  - **flagged_for_deletion**: The user is flagged for deletion.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "401": {
                        "description": "Possible messages:\n  - **invalid_token**: The token is malformed or cannot be found in the database.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_request**:\n  - invalid request body\n  - invalid parameter\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal server error."
                    }
                }, 
                "description": "This end point sets marketing and analytics opt-in or opt-out. This requires the token has scope \"identity.prefs\"\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "This is the user's analytics opt-in choice. Values are \"opt-in\" or \"opt-out\", or empty string (no change)\n", 
                        "name": "analytics_opt_in"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "This is the user's marketing opt-in choice. Values are \"opt-in\" or \"opt-out\", or empty string (no change)\n", 
                        "name": "marketing_opt_in"
                    }
                ], 
                "tags": [
                    "identity"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Sets a user's preferences."
            }
        }, 
        "/identity/signup": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success.", 
                        "schema": {
                            "$ref": "#/definitions/identity_signup_response"
                        }
                    }, 
                    "403": {
                        "description": "Possible messages:\n  - **flagged_for_deletion**: The user was flagged for deletion.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "412": {
                        "description": "Possible messages:\n  - **user_confirmed**: The user has already been confirmed.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **obsolete_client**: Client version is obsolete.\n- **obsolete_sdk**: SDK (framework) version is obsolete.\n- **invalid_client**: No data was found for a client ID.\n- **invalid_request**:\n  - invalid request body\n  - invalid parameter\n  - invalid state: State is too long.\n  - invalid device_id\n  - invalid email\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "503": {
                        "description": "Possible messages:\n  - **temporarily_unavailable**: Service is unavailable.\n"
                    }, 
                    "500": {
                        "description": "Internal server error."
                    }
                }, 
                "description": "This endpoint initiates the direct signup flow and creates an unconfirmed user. Unconfirmed users must confirm their accounts before they can login.\n\nIt triggers a confirmation email to the new user containing a confirmation token. This token must be passed to the POST to /identity/signup/confirm endpoint to confirm the user and complete the signup. The token can expire, but the client must not make any assumptions regarding the lifetime of the token.\n\nIt returns error if the email is already signed up by another user including marked for deletion users. It also returns error if the provided user agent refers to an obsolete client or SDK\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The email address of the user to create.", 
                        "in": "body", 
                        "name": "email"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The password for the new user.\n", 
                        "in": "body", 
                        "name": "password"
                    }, 
                    {
                        "required": true, 
                        "type": "integer", 
                        "description": "The ID of the client making the request.\n", 
                        "in": "body", 
                        "name": "client_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The ID of the device making this request.\n", 
                        "in": "body", 
                        "name": "device_id"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/identity_signup_request_profile"
                        }, 
                        "description": "The user profile data.\n", 
                        "in": "body", 
                        "required": true, 
                        "type": "object", 
                        "name": "profile"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "State is arbitrary data that will be passed back through the confirmation email. This is opaque to the backend. The max length is 1024.\n", 
                        "name": "state"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "Application-specific data for application-specific event handlers. The max length is 1024.\n", 
                        "name": "app_data"
                    }, 
                    {
                        "in": "body", 
                        "type": "boolean", 
                        "description": "Indicates the user accepted the current terms of service as part of the signup process.\n", 
                        "name": "tos_was_accepted"
                    }
                ], 
                "tags": [
                    "identity"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Create unconfirmed user"
            }
        }, 
        "/identity/signup/automation": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success.", 
                        "schema": {
                            "$ref": "#/definitions/identity_signup_automation_response"
                        }
                    }, 
                    "403": {
                        "description": "Possible messages:\n  - **flagged_for_deletion**: The user is flagged for deletion.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "412": {
                        "description": "Possible messages:\n  - **user_confirmed**: The user has already been confirmed.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "401": {
                        "description": "Possible messages:\n  - **access_denied**: Access is denied.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_client**: No data was found for a client ID.\n- **invalid_request**:\n  - invalid request body\n  - invalid parameter\n  - invalid email\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal server error."
                    }
                }, 
                "description": "This endpoint creates a user in normal state for use in automation tests wihtout confirmation email.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Secret to authenticated the automation.", 
                        "in": "header", 
                        "name": "X-Upthere-Automation-Secret"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The email address of the user to create, must be automation email format starts with \"uptheretest\" and ends with \"@upthere.com\".\n", 
                        "in": "body", 
                        "name": "email"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The password for the new user. This password must meet the requirements described in the documentation for POST /identity/passwords/check.\n", 
                        "in": "body", 
                        "name": "password"
                    }, 
                    {
                        "required": true, 
                        "type": "integer", 
                        "description": "The ID of the client making the request.\n", 
                        "in": "body", 
                        "name": "client_id"
                    }, 
                    {
                        "in": "body", 
                        "type": "object", 
                        "description": "The user profile data.\n", 
                        "name": "profile", 
                        "schema": {
                            "$ref": "#/definitions/identity_signup_request_profile"
                        }
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "Application-specific data for application-specific event handlers. The max length is 1024.\n", 
                        "name": "app_data"
                    }, 
                    {
                        "in": "body", 
                        "type": "boolean", 
                        "description": "Indicates the user accepted the current terms of service as part of the signup process.\n", 
                        "name": "tos_was_accepted"
                    }, 
                    {
                        "in": "body", 
                        "type": "integer", 
                        "description": "Indicates the duration before the user will be trashed.\n", 
                        "name": "test_user_scheduled_trash_hours"
                    }
                ], 
                "tags": [
                    "identity"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "creates a user in normal state for use in automation tests"
            }
        }, 
        "/identity/signup/confirm": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success.", 
                        "schema": {
                            "$ref": "#/definitions/identity_signup_response"
                        }
                    }, 
                    "404": {
                        "description": "Possible messages:\n  - **not_found**: Email or user ID is not found, or user is in ghost status.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "403": {
                        "description": "Possible messages:\n  - **flagged_for_deletion**: The user is flagged for deletion.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "412": {
                        "description": "Possible messages:\n  - **user_confirmed**: The user has already been confirmed.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "401": {
                        "description": "Possible messages:\n  - **invalid_token**: The token is malformed or cannot be found in the database.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "400": {
                        "description": "Possible messages:\n  - **invalid_client**: No data was found for a client ID.\n  - **invalid_request**:\n    - invalid request body\n    - invalid parameter\n    - invalid state: State is too long.\n    - invalid device_id\n    - invalid email\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal server error."
                    }
                }, 
                "description": "This endpoint finishes the direct signup flow. The user must provide a confirmation token obtained from the email sent by signup endpoint.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The confirmation token sent to the user via email.", 
                        "in": "body", 
                        "name": "confirmation_token"
                    }, 
                    {
                        "required": true, 
                        "type": "integer", 
                        "description": "The ID of the client making the request.\n", 
                        "in": "body", 
                        "name": "client_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The ID of the device making this request.\n", 
                        "in": "body", 
                        "name": "device_id"
                    }
                ], 
                "tags": [
                    "identity"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Confirm direct signup"
            }
        }, 
        "/identity/signup/resend": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success."
                    }, 
                    "404": {
                        "description": "Possible messages:\n  - **not_found**: Email or user ID is not found, or user is in ghost status.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "403": {
                        "description": "Possible messages:\n  - **flagged_for_deletion**: The user is flagged for deletion.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "412": {
                        "description": "Possible messages:\n  - **user_confirmed**: The user has already been confirmed.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_client**: No data was found for a client ID.\n- **invalid_request**:\n  - invalid request body\n  - invalid parameter\n  - invalid email\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal server error."
                    }
                }, 
                "description": "This endpoint re-send signup confirmation email with confirmation token. A user id or email must be provided\n", 
                "parameters": [
                    {
                        "in": "body", 
                        "type": "integer", 
                        "description": "User ID.", 
                        "name": "user_id"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "The email address of the user.", 
                        "name": "email"
                    }, 
                    {
                        "required": false, 
                        "type": "integer", 
                        "description": "The ID of the client making the request. Although it is optional to be backward compitable, it is required for products other than Sirocco.\n", 
                        "in": "body", 
                        "name": "client_id"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "The ID of the device making this request. Although it is optional to be backward compitable, it is required for products other than Sirocco.\n", 
                        "in": "body", 
                        "name": "device_id"
                    }
                ], 
                "tags": [
                    "identity"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Re-send signup confirmation email"
            }
        }, 
        "/identity/tokens": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success.", 
                        "schema": {
                            "$ref": "#/definitions/identity_tokens_response"
                        }
                    }, 
                    "412": {
                        "description": "Possible messages:\n  - **user_confirmed**: The user has already been confirmed.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "429": {
                        "description": "Possible messages:\n  - **rate_limit_exceeded**\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "404": {
                        "description": "Possible messages:\n  - **not_found**: No data was found for a user ID.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "403": {
                        "description": "Possible messages:\n  - **flagged_for_deletion**: The user was flaged for deletion.\n  - **user_unconfirmed**: The user is not confirmed.\n  - **user_must_accept_tos**: The user must accept the terms of service to continue.\n  - **invalid_scope**: The scope is unauthorized is a given context.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "401": {
                        "description": "Possible messages:\n  - **invalid_token**: A token is malformed or cannot be found in the database.\n  - **access_denied**: Access is denied (can be login fail).\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **obsolete_client**: Client version is obsolete.\n- **obsolete_sdk**: SDK (framework) version is obsolete.\n- **invalid_client**: No data was found for a client ID.\n- **invalid_grant**: The grant type is not authorized.\n- **invalid_request**:\n  - invalid request body\n  - invalid parameter\n  - invalid client id\n  - invalid device_id\n  - invalid email\n  - invalid grant_type\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "503": {
                        "description": "Possible messages:\n  - **temporarily_unavailable**: Service is unavailable.\n"
                    }, 
                    "500": {
                        "description": "Internal server error."
                    }
                }, 
                "description": "This endpoint implements OAuth2 flows.\n\n- **Resource Owner Flow (Password Flow)**:\n  The user enters their username and password into the client directly.\n  This is the flow used by first-party clients.\n\n\n  This includes the following request parameters:\n    - grant_type (required): password\n    - username (required)\n    - password (required)\n    - client_id (required)\n    - client_secret\n    - scope\n\n\n  Reponse parameters:\n    - access_token\n    - refresh_token\n    - id_token\n    - token_type\n    - expires_in\n    - scope\n\n- **Refresh Flow**:\n  The client exchanges a refresh token for another access and refresh token.\n  Note that this flow does not invalidates the refresh token in the request immediately,\n  the refresh token will be invalidated when the refresh token in response is used (in next refresh flow)\n  It is recommended to use new refresh token each time.\n\n\n  This includes the following request parameters:\n    - grant_type (required): refresh_token\n    - refresh_token (required)\n    - client_id (required)\n    - client_secret\n    - device_id\n    - tos_was_accepted\n\n\n  Reponse parameters:\n    - access_token\n    - refresh_token\n    - id_token\n    - token_type\n    - expires_in\n    - scope\n\n- **Obtain Parley Token Flow (Custom)**:\n  The client can exchange their refresh token for a parley token, which can be used to obtain another access\n  and refresh token. They\u2019re expected to be used in the following scenarios:\n    - Auotmatically login during signup:\n      A parley token is returned from the signup endpoint.\n      This token can be used to automatically log the user in once they\u2019re confirmed.\n    - Bootstrap a login session on another device:\n      If the user is using Client A, which wants to log the user into Client B (maybe a hardware device),\n      client A requests a parley token and passes it to client B, which then exchanges the parley token\n      for its own access and refresh tokens. This ensures both clients have separate login sessions.\n\n\n  This includes the following request parameters:\n    - grant_type (required): upthere_obtain_parley\n    - refresh_token (required)\n    - client_id (required)\n    - client_secret\n\n\n  Reponse parameters:\n    - parley_token\n    - token_type\n    - expires_in\n    - scope\n\n- **Exchange Parley Token Flow (Custom)**:\n  A client exchanges a parley token for an access and refresh token. A parley token can be used only once.\n\n\n  This includes the following request parameters:\n    - grant_type (required): upthere_exchange_parley\n    - parley_token (required)\n    - client_id (required)\n    - client_secret\n    - device_id\n    - scope\n\n\n  Reponse parameters:\n    - access_token\n    - refresh_token\n    - id_token\n    - token_type\n    - expires_in\n    - scope\n\n\nIn lieu of the client_id and client_secret body parameters, these values can be passed through the HTTP Basic Auth header.\n", 
                "parameters": [
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "- password: Resource Owner Flow.\n\n- refresh_token: Refresh Flow.\n\n- upthere_obtain_parley: Obtain Parley Token Flow.\n\n- upthere_exchange_parley: Exchange Parley Token Flow.\n", 
                        "name": "grant_type"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "The user\u2019s identifier (email address).", 
                        "name": "username"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "The password for the user.", 
                        "name": "password"
                    }, 
                    {
                        "in": "body", 
                        "type": "integer", 
                        "description": "The client id making the request. Upthere clients can append the device id in this value as well, separated by a pipe (|).\n", 
                        "name": "client_id"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "The client secret corresponds to the client id. This is not necessary for public clients that lack a secret.\n", 
                        "name": "client_secret"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "The ID of the device making this request.\n", 
                        "name": "device_id"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "The space-delimited list of scopes requested:\n\n- openid: Allows clients to receive OpenID Connect ID Tokens in repsonses from /tokens.\n\n- offline: Allows clients to receive refresh tokens from /tokens.\n\n- identity.parley: Allows clients to request a parley token from /tokens.\n\n- identity.super: Allows clients to use API endpoints that require extra privileges.\n\n- identity.prefs: Allows clients to change user prefrences.\n\n- upthere.read: Allows clients to use Upthere read endpoints.\n\n- upthere.write: Allows clients to use Upthere write endpoints.\n", 
                        "name": "scope"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "The access token generated.", 
                        "name": "access_token"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "The refresh token generated.", 
                        "name": "refresh_token"
                    }, 
                    {
                        "in": "body", 
                        "type": "boolean", 
                        "description": "Indicates the user accepted the current terms of service as part of the signup process.\n", 
                        "name": "tos_was_accepted"
                    }
                ], 
                "tags": [
                    "identity"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Tokens of OAuth2 spec."
            }
        }, 
        "/identity/tokens/introspect": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success.", 
                        "schema": {
                            "$ref": "#/definitions/identity_tokens_introspect_response"
                        }
                    }, 
                    "401": {
                        "description": "Possible messages:\n  - **invalid_token**: The token is malformed or cannot be found in the database.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal server error."
                    }
                }, 
                "description": "This endpoint allows a client to inspect the contents and validity of an access token.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too. For example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }
                ], 
                "tags": [
                    "identity"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Inspect the contents and validity of an access token."
            }
        }, 
        "/identity/tokens/revoke": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success."
                    }, 
                    "404": {
                        "description": "Possible messages:\n  - **not_found**: Email or user ID is not found, or user is in ghost status.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "403": {
                        "description": "Possible messages:\n  - **flagged_for_deletion**: The user is flagged for deletion.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "401": {
                        "description": "Possible messages:\n  - **invalid_token**: The token is malformed or cannot be found in the database.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_request**:\n  - invalid request body\n  - invalid parameter\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal server error."
                    }
                }, 
                "description": "This end point is the logout endpoint, allowing clients to revoke refresh tokens.\n\nIt can be used in either \"self-logout\" or remote logout scenarios:\n\nFor self-logout, the request should contain a refresh token and that refresh token will be revoked. Authorization header is not needed if refresh token is provided. If token is not valid, no error is returned. Self-logout does not require authorization (access token).\nFor remote-logout, the request should be authenticated with a super access token and contain a client ID (optional) and a device ID (optional). If the device ID is included, the provided (client ID, device ID) pair will be logged out; if only a client id is provided, all devices associated with that client will be logged out; otherwise all devices of the user will be logged out. Remote-logout requires the token has scope \"identity.super\"\nRevoke API does not return errors for properly formed but invalid client id or device id.\n", 
                "parameters": [
                    {
                        "in": "header", 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "name": "Authorization"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "The refresh token to revoke. This is required for self-logout.\n", 
                        "name": "refresh_token"
                    }, 
                    {
                        "in": "body", 
                        "type": "integer", 
                        "description": "The client ID of the client to logout. This is used for remote logout. If this is omitted, all instances of the user are logged out.\n", 
                        "name": "client_id"
                    }, 
                    {
                        "in": "body", 
                        "type": "string", 
                        "description": "The device ID of the client to logout. If this is omitted, all instances associated with the client ID are logged out. If this is included, only the provided (client id, device id) combination is logged out.\n", 
                        "name": "device_id"
                    }
                ], 
                "tags": [
                    "identity"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Revoke refresh (to logout)."
            }
        }, 
        "/identity/userinfo": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success.", 
                        "schema": {
                            "$ref": "#/definitions/identity_get_userinfo_response"
                        }
                    }, 
                    "401": {
                        "description": "Possible messages:\n  - **invalid_token**: The token is malformed or cannot be found in the database.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal server error."
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_request**:\n  - invalid request body\n  - invalid parameter\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "This endpoint returns user information, including users in all status like mark deleted, unconfirmed, or ghost.\n\nAn access token with scope of \"upthere.read\", \"identity.prefs\", or \"ideneity.super\" is required. It returns all fields or certain fields in result according to the scope.\n\nFields for scope identity.super:\n  - user_id\n  - status\n  - email\n  - profile\n  - tos_was_accepted\n  - accepted_tos_version\n  - accepted_tos_version_change_at\n  - analytics_opt_in\n  - analytics_opt_in_changed_at\n  - marketing_opt_in\n  - marketing_opt_in_changed_at\n  - created_at\n  - confirmed_at\n  - trashed_at\n  - should_delete_at\n\n\nFields for scope upthere.read:\n  - status\n  - email\n  - profile\n  - tos_was_accepted\n  - accepted_tos_version_change_at\n  - created_at\n  - confirmed_at\n  - trashed_at\n  - should_delete_at\n\n\nFields for scope identity.prefs:\n  - analytics_opt_in\n  - analytics_opt_in_changed_at\n  - marketing_opt_in\n  - marketing_opt_in_changed_at\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }
                ], 
                "tags": [
                    "identity"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Get user information"
            }
        }, 
        "/identity/users/delete": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success."
                    }, 
                    "404": {
                        "description": "Possible messages:\n  - **not_found**: Email or user ID is not found, or user is in ghost status.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "401": {
                        "description": "Possible messages:\n  - **invalid_token**: The token is malformed or cannot be found in the database.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal server error."
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_request**:\n  - invalid request body\n  - invalid parameter\n  - invalid request: Header check error.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "This end point marks user as deleted before it will be actually deleted after grace period. It deregisters all users devices.\nRequest header must have \"X-Requested-With\" set to \"XMLHttpRequest\". This helps mitigate CSRF attacks.\nThis requires the token has scope \"identity.super\"\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Must be \"XMLHttpRequest\".\n", 
                        "in": "header", 
                        "name": "X-Requested-With"
                    }
                ], 
                "tags": [
                    "identity"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Delete user."
            }
        }, 
        "/logs": {
            "get": {
                "description": "The reponse body will contain either a stream of MsgPack objects or an array of JSON objects. Each object should be one of the predefined user log entries, encoded as a MsgPack or JSON map. There will be an additional field in the packed map at the key \"ts\", which contains the timestamp for the log entry.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Contains a valid auth token for the request", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "Return user log entries newer than \"asof\". Should be a type-1 UUID in hex form. If no \"asof\" is provided, will return log entries from the beginning of time.\n", 
                        "in": "query", 
                        "name": "asof"
                    }, 
                    {
                        "required": false, 
                        "type": "integer", 
                        "description": "The maximum number of user logs to return. If no \"max\" is provided, will return log entries up to now.\n", 
                        "in": "query", 
                        "name": "max"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Indicates whether the partial payload related user log entries are excluded. If no \"exclude-partial-payload\" is provided, the default is false.\n", 
                        "in": "query", 
                        "name": "exclude-partial-payload"
                    }
                ], 
                "tags": [
                    "logs"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Returns the user log of the authenticated user", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/log_entry"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "403": {
                        "description": "The user does not have access to the requested resource"
                    }, 
                    "401": {
                        "description": "Unauthorized request (no access token provided)"
                    }, 
                    "415": {
                        "description": "Unsupported Accept type"
                    }, 
                    "400": {
                        "description": "Bad or malformed request"
                    }, 
                    "503": {
                        "description": "Service unavailable"
                    }, 
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        }, 
        "/m2m/publickey": {
            "get": {
                "description": "Returns public key from associated private/public RSA keys pair.", 
                "produces": [
                    "plain/text"
                ], 
                "sumary": "Returns RSA public key as text", 
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "503": {
                        "description": "Service not available"
                    }
                }, 
                "tags": [
                    "m2m"
                ]
            }
        }, 
        "/m2m/token": {
            "post": {
                "summary": "Returns JWT authentication bearer token", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/token"
                        }
                    }, 
                    "404": {
                        "description": "Client ID or secret did not match."
                    }, 
                    "503": {
                        "description": "Service not available."
                    }, 
                    "500": {
                        "description": "Internal server error."
                    }, 
                    "400": {
                        "description": "Bad or malformed request."
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "ID of authenticating client.", 
                        "in": "body", 
                        "name": "clientId"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Secret of authenticating client.", 
                        "in": "body", 
                        "name": "secret"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/custom_payload"
                        }, 
                        "description": "User custom payload.", 
                        "in": "body", 
                        "required": false, 
                        "type": "object", 
                        "name": "customClaims"
                    }
                ], 
                "tags": [
                    "m2m"
                ], 
                "produces": [
                    "application/json"
                ], 
                "consumes": [
                    "application/json"
                ], 
                "description": "Signs user payload and returns JWT authentication token which can be used for M2M calls."
            }
        }, 
        "/modify/documents": {
            "put": {
                "summary": "Upload a file to Upthere", 
                "responses": {
                    "400": {
                        "description": "Invalid Request", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "451": {
                        "description": "Unavailable For Legal Reasons", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "409": {
                        "description": "Conflict (Duplicate Found)", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponseDuplicate"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/UploadResponse"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/UploadRequest"
                        }, 
                        "description": "This field is JSON with arguments to the endpoint. Required for application/octet-stream requests.\n", 
                        "in": "header", 
                        "required": false, 
                        "type": "string", 
                        "name": "X-Upthere-API-Arg"
                    }, 
                    {
                        "description": "Client supplied mime type for the file. Accepts multipart/form-data and application/octet-stream. Default to application/octet-stream.\n", 
                        "in": "header", 
                        "default": "application/octet-stream", 
                        "required": false, 
                        "type": "string", 
                        "name": "Content-Type"
                    }, 
                    {
                        "required": true, 
                        "type": "file", 
                        "description": "File to be uploaded. For multipart/form-data requests, this is located in the form-data.\n", 
                        "in": "body", 
                        "name": "data"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/UploadRequest"
                        }, 
                        "description": "JSON providing arguments to the endpoint. Required for multipart/form-data requests.\n", 
                        "in": "form-data", 
                        "required": false, 
                        "type": "string", 
                        "name": "arg"
                    }
                ], 
                "tags": [
                    "modify"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "consumes": [
                    "application/octet-stream", 
                    "multipart/form-data"
                ], 
                "description": "Upload file to Upthere. PUT is the chosen method because hash-based de-duplication will prevent uploading another copy\n"
            }
        }, 
        "/modify/documents/:doc_id/:branch_id": {
            "delete": {
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Delete a document.\n", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/DeleteDocResponse"
                        }
                    }, 
                    "400": {
                        "description": "Invalid Request", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The ID of the document being deleted.", 
                        "in": "path", 
                        "name": "doc_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The ID of the branch being deleted", 
                        "in": "path", 
                        "name": "branch_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The user instance ID for this user's client/installation", 
                        "in": "query", 
                        "name": "user_instance_id"
                    }
                ], 
                "tags": [
                    "modify"
                ]
            }
        }, 
        "/modify/documents/:doc_id/copy/:branch_id": {
            "post": {
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Copy a document and add it to this user's Home view.\n", 
                "responses": {
                    "400": {
                        "description": "Invalid Request", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/CopyDocResponse"
                        }
                    }, 
                    "409": {
                        "description": "Conflict (Duplicate Found)", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponseDuplicate"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The ID of the document being copied.", 
                        "in": "path", 
                        "name": "doc_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The ID of the branch being copied", 
                        "in": "path", 
                        "name": "branch_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The user instance ID for this user's client/installation", 
                        "in": "query", 
                        "name": "user_instance_id"
                    }, 
                    {
                        "in": "query", 
                        "type": "boolean", 
                        "description": "service will wait for metadata extracted for the coped doc if this is true", 
                        "name": "wait_for_metadata"
                    }
                ], 
                "tags": [
                    "modify"
                ]
            }
        }, 
        "/modify/documents/:doc_id/create_link/:branch_id": {
            "post": {
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Create a new link to a single document\n", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/CreateLinkResponse"
                        }
                    }, 
                    "400": {
                        "description": "Invalid Request", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error.", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The user instance ID for this user's client/installation", 
                        "in": "query", 
                        "name": "user_instance_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "ID of the document referenced by this link", 
                        "in": "path", 
                        "name": "doc_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "ID of the branch referenced by this link", 
                        "in": "path", 
                        "name": "branch_id"
                    }
                ], 
                "tags": [
                    "modify"
                ]
            }
        }, 
        "/modify/documents/:doc_id/create_rev/:branch_id": {
            "post": {
                "summary": "Upload a revision of a document", 
                "responses": {
                    "400": {
                        "description": "Invalid Request", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/UploadResponse"
                        }
                    }, 
                    "409": {
                        "description": "Conflict (Duplicate Found)", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponseDuplicate"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "This field is JSON with arguments to the endpoint. There are 3 top-level fields \"user_instance_id\", \"md\", and \"utc_offset\". \"md\" contains a metadata map for the initial client provided metadata. \"utc_offset\" is the difference IN SECONDS between UTC and local time. utc_offset is optional and will default to PST. Required for application/octet-stream requests.\n", 
                        "in": "header", 
                        "name": "X-Upthere-API-Arg"
                    }, 
                    {
                        "description": "Client supplied mime type for the file. Accepts multipart/form-data and application/octet-stream. Default to application/octet-stream.\n", 
                        "in": "header", 
                        "default": "application/octet-stream", 
                        "required": false, 
                        "type": "string", 
                        "name": "Content-Type"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "DocID of the document being revised", 
                        "in": "path", 
                        "name": "doc_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "BranchID of the branch being revised", 
                        "in": "path", 
                        "name": "branch_id"
                    }, 
                    {
                        "required": true, 
                        "type": "file", 
                        "description": "File to be uploaded. For multipart/form-data requests, this is located in the form-data.\n", 
                        "in": "body", 
                        "name": "data"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "JSON providing the user_instance_id, md, and utc_offset for multipart/form-data requests. Contains same fields as X-Upthere-API-Arg and is used in its place.\n", 
                        "in": "form-data", 
                        "name": "arg"
                    }
                ], 
                "tags": [
                    "modify"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "consumes": [
                    "application/octet-stream", 
                    "multipart/form-data"
                ], 
                "description": "Upload a revision of a document.\n"
            }
        }, 
        "/modify/documents/:doc_id/revert_rev/:branch_id": {
            "post": {
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Revert a document to a previous revision.", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/RevertRevisionResponse"
                        }
                    }, 
                    "400": {
                        "description": "Invalid Request", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The ID of the document which is having its filename updated", 
                        "in": "path", 
                        "name": "doc_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The ID of the branch which is being updated.", 
                        "in": "path", 
                        "name": "branch_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The user instance ID for this user's client/installation", 
                        "in": "query", 
                        "name": "user_instance_id"
                    }
                ], 
                "tags": [
                    "modify"
                ]
            }
        }, 
        "/modify/documents/:doc_id/update_md/:branch_id": {
            "post": {
                "summary": "Update document metadata", 
                "responses": {
                    "400": {
                        "description": "Invalid Request", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "451": {
                        "description": "Unavailable For Legal Reasons", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "409": {
                        "description": "Conflict (Duplicate Found)", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/MetadataUpdateResponse"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The ID of the document which is having its filename updated", 
                        "in": "path", 
                        "name": "doc_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The ID of the branch which is being updated.", 
                        "in": "path", 
                        "name": "branch_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The user instance ID for this user's client/installation", 
                        "in": "query", 
                        "name": "user_instance_id"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "metadata_update", 
                        "schema": {
                            "$ref": "#/definitions/MetadataUpdate"
                        }
                    }
                ], 
                "tags": [
                    "modify"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "consumes": [
                    "application/json", 
                    "application/octet-stream"
                ], 
                "description": "Update document metadata. A new revision is created with the updated metadata.\n"
            }
        }, 
        "/modify/drives/:drive_id": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "400": {
                        "description": "Invalid Request", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }, 
                "description": "This endpoint will delete the drive with provided drive_id as well as delete the documents associated with the drive (including archived documents)\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded) or long lived upload token", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "drive_id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "modify"
                ], 
                "produces": [
                    "application/msgpack", 
                    "application/json"
                ], 
                "summary": "Delete a Drive and all of its contents"
            }
        }, 
        "/modify/links": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/CreateLinkResponse"
                        }
                    }, 
                    "400": {
                        "description": "Invalid Request", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error.", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The user instance ID for this user's client/installation", 
                        "in": "query", 
                        "name": "user_instance_id"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "create_link_request", 
                        "schema": {
                            "$ref": "#/definitions/CreateLinkRequest"
                        }
                    }
                ], 
                "tags": [
                    "modify"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Create a new link to multiple documents\n"
            }
        }, 
        "/modify/multipart/documents": {
            "put": {
                "summary": "Upload a file to Upthere with client-provided IDs", 
                "responses": {
                    "400": {
                        "description": "Invalid Request", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/UploadResponse"
                        }
                    }, 
                    "409": {
                        "description": "Conflict (Duplicate Found)", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponseDuplicate"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/UploadMultipartDocRequest"
                        }, 
                        "description": "This field is JSON with arguments to the endpoint. Required for application/octet-stream requests.\n", 
                        "in": "header", 
                        "required": false, 
                        "type": "string", 
                        "name": "X-Upthere-API-Arg"
                    }, 
                    {
                        "description": "Client supplied mime type for the file. Accepts multipart/form-data and application/octet-stream. Default to application/octet-stream.\n", 
                        "in": "header", 
                        "default": "application/octet-stream", 
                        "required": false, 
                        "type": "string", 
                        "name": "Content-Type"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "user_instance_id", 
                        "in": "query"
                    }, 
                    {
                        "required": true, 
                        "type": "file", 
                        "description": "File to be uploaded. For multipart/form-data requests, this is located in the form-data.\n", 
                        "in": "body", 
                        "name": "data"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/UploadMultipartDocRequest"
                        }, 
                        "description": "JSON providing the fields found in X-Upthere-API-Arg. Required for multipart/form-data requests.\n", 
                        "in": "form-data", 
                        "required": false, 
                        "type": "string", 
                        "name": "arg"
                    }
                ], 
                "tags": [
                    "modify"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "consumes": [
                    "application/octet-stream", 
                    "multipart/form-data"
                ], 
                "description": "This request is for clients using the multipart upload API to perform an upload with a single request while also supplying doc/branch/rev/op IDs. PUT is the chosen method because hash-based de-duplication will prevent uploading another copy.\n"
            }, 
            "post": {
                "summary": "Create an incomplete document for a multipart upload.", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/RevRef"
                        }
                    }, 
                    "400": {
                        "description": "Invalid Request", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error.", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The user instance ID for this user's client/installation", 
                        "in": "query", 
                        "name": "user_instance_id"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "create_multipart_document", 
                        "schema": {
                            "$ref": "#/definitions/CreateMultipartDocRequest"
                        }
                    }
                ], 
                "tags": [
                    "modify"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "description": "Create a new incomplete document with the provided IDs. The intention is that this document will be used with the multipart upload routes.\n"
            }
        }, 
        "/modify/multipart/documents/:doc_id/create_rev/:branch_id": {
            "post": {
                "summary": "Create an incomplete revision for a multipart upload.", 
                "responses": {
                    "400": {
                        "description": "Invalid Request", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/RevRef"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error.", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The user instance ID for this user's client/installation", 
                        "in": "query", 
                        "name": "user_instance_id"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "create_multipart_revision", 
                        "schema": {
                            "$ref": "#/definitions/CreateMultipartRevRequest"
                        }
                    }
                ], 
                "tags": [
                    "modify"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "description": "Create a new incomplete revision on the specified doc branch. The intention is that this revision will be used with the multipart upload routes.\n"
            }
        }, 
        "/modify/multipart/documents/:doc_id/payload/:rev_id": {
            "put": {
                "responses": {
                    "400": {
                        "description": "Invalid Request", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "202": {
                        "description": "Accepted"
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded) or long lived upload token", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "doc_id", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "branch_id", 
                        "in": "query"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "view_id", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "Locator associated with the document. An empty value means the document is located in the current data center. This is required by the v1000 endpoint.\n", 
                        "in": "query", 
                        "name": "doc_locator"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "Locator associated with the view. An empty value means the view is located in the current data center. This is required by the v1000 endpoint.\n", 
                        "in": "query", 
                        "name": "view_locator"
                    }, 
                    {
                        "required": true, 
                        "type": "integer", 
                        "description": "byte range start", 
                        "in": "query", 
                        "name": "from"
                    }, 
                    {
                        "required": true, 
                        "type": "integer", 
                        "description": "size of chunk being uploaded", 
                        "in": "query", 
                        "name": "size"
                    }
                ], 
                "tags": [
                    "modify"
                ], 
                "description": "Upload payload bytes in a multipart upload for the specified doc_rev.\n", 
                "consumes": [
                    "binary/octet-stream"
                ], 
                "summary": "Upload payload bytes in a multipart upload"
            }
        }, 
        "/modify/multipart/documents/:doc_id/payload/:rev_id/complete": {
            "post": {
                "summary": "Complete a multipart upload", 
                "responses": {
                    "400": {
                        "description": "Invalid Request", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "200": {
                        "description": "Success. Used when wait_for_complete=true", 
                        "schema": {
                            "$ref": "#/definitions/UploadResponse"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "202": {
                        "description": "Accepted. Used when wait_for_complete=false"
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded) or long lived upload token", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "doc_id", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "rev_id", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "branch_id", 
                        "in": "query"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "view_id", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "Locator associated with the document. An empty value means the document is located in the current data center. This is required by the v1000 endpoint\n", 
                        "in": "query", 
                        "name": "doc_locator"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "Locator associated with the view. An empty value means the view is located in the current data center. This is required by the v1000 endpoint\n", 
                        "in": "query", 
                        "name": "view_locator"
                    }, 
                    {
                        "required": false, 
                        "in": "body", 
                        "description": "JSON containing file information and OpIDs for the upload being completed.", 
                        "name": "args", 
                        "schema": {
                            "$ref": "#/definitions/PayloadCompleteRequest"
                        }
                    }
                ], 
                "tags": [
                    "modify"
                ], 
                "produces": [
                    "application/msgpack", 
                    "application/json"
                ], 
                "consumes": [
                    "application/msgpack", 
                    "application/json"
                ], 
                "description": "This endpoint is intended for marking a multipart upload session as complete once all the payloads have uploaded. This will write an operation to Kafka which will schedule the construction of the final payload object.\n"
            }
        }, 
        "/modify/multipart/documents/:doc_id/upload_rev/:branch_id": {
            "post": {
                "summary": "Upload a revision of a document with client-provided IDs", 
                "responses": {
                    "400": {
                        "description": "Invalid Request", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/UploadResponse"
                        }
                    }, 
                    "409": {
                        "description": "Conflict (Duplicate Found)", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponseDuplicate"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/UploadMultipartRevRequest"
                        }, 
                        "description": "This field is JSON with arguments to the endpoint. Required for application/octet-stream requests.\n", 
                        "in": "header", 
                        "required": false, 
                        "type": "string", 
                        "name": "X-Upthere-API-Arg"
                    }, 
                    {
                        "description": "Client supplied mime type for the file. Accepts multipart/form-data and application/octet-stream. Default to application/octet-stream.\n", 
                        "in": "header", 
                        "default": "application/octet-stream", 
                        "required": false, 
                        "type": "string", 
                        "name": "Content-Type"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "DocID of the document being revised", 
                        "in": "path", 
                        "name": "doc_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "BranchID of the branch being revised", 
                        "in": "path", 
                        "name": "branch_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "user_instance_id", 
                        "in": "query"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "view_id", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "Locator associated with the document. An empty value means the document is located in the current data center. This is required by the v1000 endpoint.\n", 
                        "in": "query", 
                        "name": "doc_locator"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "Locator associated with the view. An empty value means the view is located in the current data center. This is required by the v1000 endpoint.\n", 
                        "in": "query", 
                        "name": "view_locator"
                    }, 
                    {
                        "required": true, 
                        "type": "file", 
                        "description": "File to be uploaded. For multipart/form-data requests, this is located in the form-data.\n", 
                        "in": "body", 
                        "name": "data"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/UploadMultipartRevRequest"
                        }, 
                        "description": "JSON providing the fields found in X-Upthere-API-Arg. Required for multipart/form-data requests.\n", 
                        "in": "form-data", 
                        "required": false, 
                        "type": "string", 
                        "name": "arg"
                    }
                ], 
                "tags": [
                    "modify"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "consumes": [
                    "application/octet-stream", 
                    "multipart/form-data"
                ], 
                "description": "This request is for clients using the multipart upload API to upload a revision with a single request while also supplying RevID and MergeOpID.\n"
            }
        }, 
        "/modify/views": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/CreateViewResponse"
                        }
                    }, 
                    "400": {
                        "description": "Invalid Request", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error.", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The user instance ID for this user's client/installation", 
                        "in": "query", 
                        "name": "user_instance_id"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/CreateViewRequest"
                        }, 
                        "description": "The view metadata of the new view", 
                        "in": "body", 
                        "required": true, 
                        "type": "object", 
                        "name": "view_metadata"
                    }
                ], 
                "tags": [
                    "modify"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Create a new view\n"
            }
        }, 
        "/modify/views/:view_id/comments/:comment_id": {
            "delete": {
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Delete a comment on an Upthere file\n", 
                "responses": {
                    "400": {
                        "description": "Invalid Request", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden. User does not have access to this view.", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Comment"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error.", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "View in which the comment is being deleted from", 
                        "in": "path", 
                        "name": "view_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "ID of comment being deleted", 
                        "in": "path", 
                        "name": "comment_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The user instance ID for this user's client/installation", 
                        "in": "query", 
                        "name": "user_instance_id"
                    }
                ], 
                "tags": [
                    "modify"
                ]
            }
        }, 
        "/modify/views/:view_id/comments/:doc_id/:branch_id": {
            "post": {
                "responses": {
                    "400": {
                        "description": "Invalid Request", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden. User does not have access to this view.", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Comment"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error. Not idempotent for now, so client should not automatically retry.", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "View in which the comment is being written", 
                        "in": "path", 
                        "name": "view_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "document which is being commented on.", 
                        "in": "path", 
                        "name": "doc_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "branch which is being commented on.", 
                        "in": "path", 
                        "name": "branch_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The user instance ID for this user's client/installation", 
                        "in": "query", 
                        "name": "user_instance_id"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "comment body. Must be non-empty. Leading and trailing whitespace will be stripped.", 
                        "name": "comment_body", 
                        "schema": {
                            "type": "string"
                        }
                    }
                ], 
                "tags": [
                    "modify"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "consumes": [
                    "text/plain"
                ], 
                "summary": "Comment on an Upthere file\n"
            }
        }, 
        "/modify/views/:view_id/documents/:doc_id/:branch_id": {
            "put": {
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Add a document branch to a view\n", 
                "responses": {
                    "400": {
                        "description": "Invalid Request", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden. User does not have access to this view.", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ModifyViewResponse"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error.", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "ID of the view which the branch is being added to", 
                        "in": "path", 
                        "name": "view_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "ID of the document being added to the view", 
                        "in": "path", 
                        "name": "doc_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "ID of the branch being added to the view", 
                        "in": "path", 
                        "name": "branch_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The user instance ID for this user's client/installation", 
                        "in": "query", 
                        "name": "user_instance_id"
                    }
                ], 
                "tags": [
                    "modify"
                ]
            }, 
            "delete": {
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Remove a document branch from a view\n", 
                "responses": {
                    "400": {
                        "description": "Invalid Request", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden. User does not have access to this view.", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ModifyViewResponse"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error.", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "ID of the view which the branch is being removed from", 
                        "in": "path", 
                        "name": "view_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "ID of the document being removed from the view", 
                        "in": "path", 
                        "name": "doc_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "ID of the branch being removed from the view", 
                        "in": "path", 
                        "name": "branch_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The user instance ID for this user's client/installation", 
                        "in": "query", 
                        "name": "user_instance_id"
                    }
                ], 
                "tags": [
                    "modify"
                ]
            }
        }, 
        "/modify/views/:view_id/invite": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/InviteUserToViewResponse"
                        }
                    }, 
                    "400": {
                        "description": "Invalid Request", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden. User does not have access to this view.", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error.", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "ID of the view which is being un-published", 
                        "in": "path", 
                        "name": "view_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The user instance ID for this user's client/installation", 
                        "in": "query", 
                        "name": "user_instance_id"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Email of the user to be removed from the view.", 
                        "name": "request", 
                        "schema": {
                            "$ref": "#/definitions/InviteUserToViewRequest"
                        }
                    }
                ], 
                "tags": [
                    "modify"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Invite a user to a view with an email\n"
            }
        }, 
        "/modify/views/:view_id/publish": {
            "put": {
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Publish a view\n", 
                "responses": {
                    "400": {
                        "description": "Invalid Request", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden. User does not have access to this view.", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error.", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/UpdateViewMetadataResponse"
                        }
                    }, 
                    "202": {
                        "description": "Accepted. No changes to be made.", 
                        "schema": {
                            "$ref": "#/definitions/UpdateViewMetadataResponse"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "ID of the view which is being published", 
                        "in": "path", 
                        "name": "view_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The user instance ID for this user's client/installation", 
                        "in": "query", 
                        "name": "user_instance_id"
                    }
                ], 
                "tags": [
                    "modify"
                ]
            }
        }, 
        "/modify/views/:view_id/remove_user": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/RemoveUserFromViewResponse"
                        }
                    }, 
                    "400": {
                        "description": "Invalid Request", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden. User does not have access to this view.", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error.", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "ID of the view which is being un-published", 
                        "in": "path", 
                        "name": "view_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The user instance ID for this user's client/installation", 
                        "in": "query", 
                        "name": "user_instance_id"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "UserID of the user to be removed from the view.", 
                        "name": "user_to_remove", 
                        "schema": {
                            "$ref": "#/definitions/RemoveUserFromViewRequest"
                        }
                    }
                ], 
                "tags": [
                    "modify"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Remove a user from a view\n"
            }
        }, 
        "/modify/views/:view_id/rename": {
            "put": {
                "responses": {
                    "400": {
                        "description": "Invalid Request", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden. User does not have access to this view.", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error.", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/UpdateViewMetadataResponse"
                        }
                    }, 
                    "202": {
                        "description": "Accepted. No changes to be made.", 
                        "schema": {
                            "$ref": "#/definitions/UpdateViewMetadataResponse"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "ID of the view which is being un-published", 
                        "in": "path", 
                        "name": "view_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The user instance ID for this user's client/installation", 
                        "in": "query", 
                        "name": "user_instance_id"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "New name of view. Must be non-empty. Leading and trailing whitespace will be stripped.", 
                        "name": "name", 
                        "schema": {
                            "type": "string"
                        }
                    }
                ], 
                "tags": [
                    "modify"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "consumes": [
                    "text/plain"
                ], 
                "summary": "Rename a view\n"
            }
        }, 
        "/modify/views/:view_id/unpublish": {
            "put": {
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Un-publish a view\n", 
                "responses": {
                    "400": {
                        "description": "Invalid Request", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden. User does not have access to this view.", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error.", 
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/UpdateViewMetadataResponse"
                        }
                    }, 
                    "202": {
                        "description": "Accepted. No changes to be made.", 
                        "schema": {
                            "$ref": "#/definitions/UpdateViewMetadataResponse"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "ID of the view which is being un-published", 
                        "in": "path", 
                        "name": "view_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The user instance ID for this user's client/installation", 
                        "in": "query", 
                        "name": "user_instance_id"
                    }
                ], 
                "tags": [
                    "modify"
                ]
            }
        }, 
        "/previews/data/:doc_id/:rev_id": {
            "get": {
                "description": "Returns a preview based on it's key.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Document ID", 
                        "in": "path", 
                        "name": "doc_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Revision ID", 
                        "in": "path", 
                        "name": "rev_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "View ID of the view containing the document revision", 
                        "in": "query", 
                        "name": "view_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Branch ID of the branch containing the document revision", 
                        "in": "query", 
                        "name": "branch_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The preview's key, base64-url encoded.", 
                        "in": "query", 
                        "name": "key"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "A byte range to specify that the server should only send partial content as defined in RFC 2616 section 14.35.\n", 
                        "in": "header", 
                        "name": "range"
                    }
                ], 
                "tags": [
                    "previews"
                ]
            }
        }, 
        "/previews/data/batch_get": {
            "post": {
                "summary": "Batch get previews from their info", 
                "responses": {
                    "200": {
                        "description": "Success, a succession of preview_with_info", 
                        "schema": {
                            "$ref": "#/definitions/preview_with_info"
                        }
                    }, 
                    "404": {
                        "description": "The document or revision does not exist"
                    }, 
                    "403": {
                        "description": "The user does not have access to the requested resource"
                    }, 
                    "401": {
                        "description": "Unauthorized request (no access token provided)"
                    }, 
                    "400": {
                        "description": "Bad or malformed request"
                    }, 
                    "503": {
                        "description": "Service unavailable"
                    }, 
                    "500": {
                        "description": "Internal server error"
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "A succession of object used to query individual previews", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/batch_get_query"
                        }
                    }
                ], 
                "tags": [
                    "previews"
                ], 
                "produces": [
                    "application/msgpack"
                ], 
                "consumes": [
                    "application/msgpack"
                ], 
                "description": "Returns multiple previews, based on the kind and the info. Both the query body and the response must be streamed, with each preview_with_info being appended to the response one after the other (NOT in an array). Please note that the order of the response may not necessarily be the same as the requests.\n"
            }
        }, 
        "/previews/kinds/frame/:doc_id/:rev_id": {
            "get": {
                "description": "Returns small jpeg frames from a video", 
                "summary": "Returns specific frames from a video", 
                "responses": {
                    "200": {
                        "headers": {
                            "Content-Type": {
                                "type": "string", 
                                "description": "The content type of the document returned."
                            }
                        }, 
                        "description": "Success"
                    }, 
                    "404": {
                        "description": "The document or revision does not exist"
                    }, 
                    "403": {
                        "description": "The user does not have access to the requested resource"
                    }, 
                    "401": {
                        "description": "Unauthorized request (no access token provided)"
                    }, 
                    "406": {
                        "description": "The requested output content type is not supported"
                    }, 
                    "400": {
                        "description": "Bad or malformed request"
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Document ID", 
                        "in": "path", 
                        "name": "doc_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Revision ID", 
                        "in": "path", 
                        "name": "rev_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "View ID of the view containing the document revision", 
                        "in": "query", 
                        "name": "view_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Branch ID of the branch containing the document revision", 
                        "in": "query", 
                        "name": "branch_id"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "Revision token for this doc-rev-branch. If this field is set then the client does not need to provide X-Upthere-At or Authorization and the view containing the document does not need to public.\n", 
                        "in": "query", 
                        "name": "rev_token"
                    }, 
                    {
                        "description": "If specified, the service will return a frame located at (or before) the timestamp specified. The timestamp is in ms.\n", 
                        "in": "query", 
                        "default": 0, 
                        "required": false, 
                        "type": "integer", 
                        "name": "at"
                    }, 
                    {
                        "description": "Used to request frames starting at this timestamp (in ms)\n", 
                        "in": "query", 
                        "default": 0, 
                        "required": false, 
                        "type": "integer", 
                        "name": "from"
                    }, 
                    {
                        "description": "Used to request multiple frames up to this timestamp (in ms). \"to\" must be higher...\n", 
                        "in": "query", 
                        "default": 0, 
                        "required": false, 
                        "type": "integer", 
                        "name": "to"
                    }, 
                    {
                        "description": "Used to return multiple frames in a single query. We will return every frame from \"from\" to \"to\", at a rate of frameratemultiplier * PreviewFrameRateV1.\n", 
                        "in": "query", 
                        "default": 1, 
                        "required": false, 
                        "type": "integer", 
                        "name": "frameratemultiplier"
                    }, 
                    {
                        "description": "Used to request multiple frames in a single query. Can be either application/msgpack or application/json Accept can also be set through the HTTP header.\n", 
                        "in": "query", 
                        "default": "application/msgpack", 
                        "required": false, 
                        "type": "string", 
                        "name": "accept"
                    }
                ], 
                "tags": [
                    "previews"
                ]
            }
        }, 
        "/previews/kinds/html/:doc_id/:rev_id": {
            "get": {
                "description": "Returns the HTML5 version of a document. Available if the PreviewKindsAvailableV1 metadata field is populated and has the bit 0x8 set.", 
                "summary": "Returns the HTML version of a document", 
                "responses": {
                    "200": {
                        "headers": {
                            "Content-Type": {
                                "type": "string", 
                                "description": "The content type of the document returned."
                            }, 
                            "Content-Encoding": {
                                "type": "string", 
                                "description": "The encoding will be set to \"gzip\" if the client supports it."
                            }
                        }, 
                        "description": "Success"
                    }, 
                    "404": {
                        "description": "The document or revision does not exist"
                    }, 
                    "403": {
                        "description": "The user does not have access to the requested resource"
                    }, 
                    "401": {
                        "description": "Unauthorized request (no access token provided)"
                    }, 
                    "406": {
                        "description": "The requested output content type is not supported"
                    }, 
                    "400": {
                        "description": "Bad or malformed request"
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Document ID", 
                        "in": "path", 
                        "name": "doc_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Revision ID", 
                        "in": "path", 
                        "name": "rev_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "View ID of the view containing the document revision", 
                        "in": "query", 
                        "name": "view_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Branch ID of the branch containing the document revision", 
                        "in": "query", 
                        "name": "branch_id"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "Revision token for this doc-rev-branch. If this field is set then the client does not need to provide X-Upthere-At or Authorization and the view containing the document does not need to public.\n", 
                        "in": "query", 
                        "name": "rev_token"
                    }
                ], 
                "tags": [
                    "previews"
                ]
            }
        }, 
        "/previews/kinds/multipage/:doc_id/:rev_id": {
            "get": {
                "description": "Returns the PDF version of a document. Available if the PreviewKindsAvailableV1 metadata field is populated and has the bit 0x2 set.", 
                "summary": "Returns the PDF version of a document", 
                "responses": {
                    "200": {
                        "headers": {
                            "Content-Type": {
                                "type": "string", 
                                "description": "The content type of the document returned."
                            }, 
                            "X-Upthere-Serving-Original": {
                                "type": "integer", 
                                "description": "If the PDF returned is the original file, this header be set to 1.\n"
                            }
                        }, 
                        "description": "Success"
                    }, 
                    "404": {
                        "description": "The document or revision does not exist"
                    }, 
                    "403": {
                        "description": "The user does not have access to the requested resource"
                    }, 
                    "406": {
                        "description": "The requested output content type is not supported"
                    }, 
                    "401": {
                        "description": "Unauthorized request (no access token provided)"
                    }, 
                    "206": {
                        "headers": {
                            "Content-Type": {
                                "type": "string", 
                                "description": "The content type of the file returned."
                            }, 
                            "X-Upthere-Serving-Original": {
                                "type": "integer", 
                                "description": "If the file returned is the original file, this header be set to 1.\n"
                            }
                        }, 
                        "description": "Partial content if requested by the client. See the \"Range\" parameter for more information.\n"
                    }, 
                    "400": {
                        "description": "Bad or malformed request"
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Document ID", 
                        "in": "path", 
                        "name": "doc_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Revision ID", 
                        "in": "path", 
                        "name": "rev_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "View ID of the view containing the document revision", 
                        "in": "query", 
                        "name": "view_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Branch ID of the branch containing the document revision", 
                        "in": "query", 
                        "name": "branch_id"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "Revision token for this doc-rev-branch. If this field is set then the client does not need to provide X-Upthere-At or Authorization and the view containing the document does not need to public.\n", 
                        "in": "query", 
                        "name": "rev_token"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "A byte range to specify that the server should only send partial content as defined in RFC 2616 section 14.35.\n", 
                        "in": "header", 
                        "name": "range"
                    }, 
                    {
                        "required": false, 
                        "type": "integer", 
                        "description": "If specified, the request will return a preview of the page requested in JPEG.\n", 
                        "in": "query", 
                        "name": "pagenumber"
                    }
                ], 
                "tags": [
                    "previews"
                ]
            }
        }, 
        "/previews/kinds/thumbnail/:doc_id/:rev_id": {
            "get": {
                "description": "Returns the thumbnail of a document. Available if the PreviewKindsAvailableV1 metadata field is populated and has the bit 0x1 set.", 
                "summary": "Returns the thumbnail of a document", 
                "responses": {
                    "200": {
                        "headers": {
                            "Content-Type": {
                                "type": "string", 
                                "description": "The content type of the thumbnail returned."
                            }, 
                            "X-Upthere-Serving-Original": {
                                "type": "integer", 
                                "description": "If the thumbnail returned is the original file, this header be set to 1.\n"
                            }
                        }, 
                        "description": "Success"
                    }, 
                    "404": {
                        "description": "The document or revision does not exist"
                    }, 
                    "403": {
                        "description": "The user does not have access to the requested resource"
                    }, 
                    "401": {
                        "description": "Unauthorized request (no access token provided)"
                    }, 
                    "406": {
                        "description": "The requested output content type is not supported"
                    }, 
                    "400": {
                        "description": "Bad or malformed request"
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Document ID", 
                        "in": "path", 
                        "name": "doc_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Revision ID", 
                        "in": "path", 
                        "name": "rev_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "View ID of the view containing the document revision", 
                        "in": "query", 
                        "name": "view_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Branch ID of the branch containing the document revision", 
                        "in": "query", 
                        "name": "branch_id"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "Revision token for this doc-rev-branch. If this field is set then the client does not need to provide X-Upthere-At or Authorization and the view containing the document does not need to public.\n", 
                        "in": "query", 
                        "name": "rev_token"
                    }, 
                    {
                        "required": true, 
                        "type": "integer", 
                        "description": "The height in pixel of the bounding box used to query thumbnail.", 
                        "in": "query", 
                        "name": "height"
                    }, 
                    {
                        "description": "The width in pixel of the bounding box used to query thumbnail.", 
                        "in": "query", 
                        "default": "(value of height)", 
                        "required": false, 
                        "type": "integer", 
                        "name": "width"
                    }, 
                    {
                        "description": "The mode can be 'fit' or 'fill'. If the mode is 'fit', a thumbnail with dimensions equal or below the bounding box will be returned. If the mode is 'fill', a thumbnail with dimensions equal or above the bounding box will be returned. The request can be for any size and the result will be a best effort to fit that size; there is no guarantee that the exact size will be returned.\n", 
                        "in": "query", 
                        "default": "fit", 
                        "required": false, 
                        "type": "integer", 
                        "name": "mode"
                    }, 
                    {
                        "default": 0, 
                        "required": false, 
                        "type": "integer", 
                        "name": "forceautorotation", 
                        "description": "If forceautorotation is set to 1, the thumbnail returned will be 'auto-rotated' correctly. Please note that setting this flag may lower the thumbnail's resolution (when the original is a jpeg with a width or height above 512px).\n"
                    }
                ], 
                "tags": [
                    "previews"
                ]
            }
        }, 
        "/previews/kinds/video/:doc_id/:rev_id": {
            "get": {
                "description": "Returns a streamable video from the document. Available if the PreviewKindsAvailableV1 metadata field is populated and has the bit 0x4 set.", 
                "summary": "Returns a streamable video from the document.", 
                "responses": {
                    "200": {
                        "headers": {
                            "Content-Type": {
                                "type": "string", 
                                "description": "The content type of the document returned."
                            }, 
                            "X-Upthere-Serving-Original": {
                                "type": "integer", 
                                "description": "If the PDF returned is the original file, this header be set to 1.\n"
                            }
                        }, 
                        "description": "Success"
                    }, 
                    "404": {
                        "description": "The document or revision does not exist"
                    }, 
                    "403": {
                        "description": "The user does not have access to the requested resource"
                    }, 
                    "406": {
                        "description": "The requested output content type is not supported"
                    }, 
                    "401": {
                        "description": "Unauthorized request (no access token provided)"
                    }, 
                    "206": {
                        "headers": {
                            "Content-Type": {
                                "type": "string", 
                                "description": "The content type of the file returned."
                            }, 
                            "X-Upthere-Serving-Original": {
                                "type": "integer", 
                                "description": "If the file returned is the original file, this header be set to 1.\n"
                            }
                        }, 
                        "description": "Partial content if requested by the client. See the \"Range\" parameter for more information.\n"
                    }, 
                    "400": {
                        "description": "Bad or malformed request"
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Document ID", 
                        "in": "path", 
                        "name": "doc_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Revision ID", 
                        "in": "path", 
                        "name": "rev_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "View ID of the view containing the document revision", 
                        "in": "query", 
                        "name": "view_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Branch ID of the branch containing the document revision", 
                        "in": "query", 
                        "name": "branch_id"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "Revision token for this doc-rev-branch. If this field is set then the client does not need to provide X-Upthere-At or Authorization and the view containing the document does not need to public.\n", 
                        "in": "query", 
                        "name": "rev_token"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "A byte range to specify that the server should only send partial content as defined in RFC 2616 section 14.35.\n", 
                        "in": "header", 
                        "name": "range"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "Can only be 'hls' or 'payload' in this API version. The client should first check if the hls transcoded stream is available for this video. If it's available you can request hls stream by setting type to hls otherwise set it to payload to request the original payload of the video. If the type is not specified, the payload is served.", 
                        "in": "query", 
                        "name": "type"
                    }, 
                    {
                        "description": "Defines the speed of the connection (for hls playback). Can be 'fast' or 'slow'. 'slow' should be used when streaming from a mobile broadband.\n", 
                        "in": "query", 
                        "default": "fast", 
                        "required": false, 
                        "type": "string", 
                        "name": "conn"
                    }
                ], 
                "tags": [
                    "previews"
                ]
            }
        }, 
        "/previews/metadata/batch_get": {
            "post": {
                "summary": "Batch get previews from their info", 
                "responses": {
                    "200": {
                        "description": "Success, a succession of batck_get_record_result", 
                        "schema": {
                            "$ref": "#/definitions/batch_get_record_result"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized request (no access token provided)"
                    }, 
                    "500": {
                        "description": "Internal server error"
                    }, 
                    "503": {
                        "description": "Service unavailable"
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "A succession of object used to query records with some previews", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/batch_get_record_query"
                        }
                    }
                ], 
                "tags": [
                    "previews"
                ], 
                "produces": [
                    "application/msgpack"
                ], 
                "consumes": [
                    "application/msgpack"
                ], 
                "description": "Returns multiple records and previews, based on the filter requested for a particular revision. If a filter object exist, the associated records will be returned. Based on the data of the filter, the preview may or may not be returned. Both the query body and the response must be streamed, with each batch_get_record_result being appended to the response one after the other (NOT in an array). Please note that the order of the response may not necessarily be the same as the requests.\n"
            }
        }, 
        "/previews/streams/:stream/:doc_id/:rev_id/*streamobject": {
            "get": {
                "description": "Returns the video stream's resource. Not currently expected to be used directly, rather through HLS+ manifests exposed through the public endpoint\n", 
                "summary": "Returns the resource requested for this video stream.", 
                "responses": {
                    "200": {
                        "headers": {
                            "Content-Type": {
                                "type": "string", 
                                "description": "The content type of the resource returned"
                            }
                        }, 
                        "description": "Success"
                    }, 
                    "404": {
                        "description": "The document or revision does not exist"
                    }, 
                    "403": {
                        "description": "The user does not have access to the requested resource"
                    }, 
                    "401": {
                        "description": "Unauthorized request (no access token provided)"
                    }, 
                    "406": {
                        "description": "The requested output content type is not supported"
                    }, 
                    "400": {
                        "description": "Bad or malformed request"
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "View ID of the view containing the document revision", 
                        "in": "query", 
                        "name": "view_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Doc ID of the Document", 
                        "in": "query", 
                        "name": "doc_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Rev ID of the Revision", 
                        "in": "query", 
                        "name": "rev_id"
                    }
                ], 
                "tags": [
                    "previews"
                ]
            }
        }, 
        "/query": {
            "post": {
                "summary": "Returns a chunked stream of results that fulfil the query", 
                "responses": {
                    "200": {
                        "description": "Success - a stream of search result objects will be streamed back over chunked encoding.\n", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/query_result"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized request (no access token provided)"
                    }, 
                    "400": {
                        "description": "Bad or malformed request"
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded)", 
                        "in": "header", 
                        "name": "X-Upthere-At"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "Responses will be returned in an array rather than a stream if set to something truthy\n", 
                        "in": "query", 
                        "name": "nostream"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "A Map of string <query_id> to query object.", 
                        "name": "queries", 
                        "schema": {
                            "$ref": "#/definitions/queries"
                        }
                    }
                ], 
                "tags": [
                    "query"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "description": "Query takes a map of QID (string) to query object and returns a stream of search result objects for each query. If JSON, these will be new-line separated. A query which has 0 results will return 1 result item with the \"qid\" plus \"last\" and \"complete\" marked true but no value. the query parameter \"nostream\" allows clients to request the results as an array rather than a stream. Will return aggregation buckets corresponding to missing values unless prevented with a match predicate. <br> QueryHandlerAD differs from QueryHandlerAC only in that it may take a {ViewID^[]} predicate to direct the query at multiple views simultaneously. Such a request will contain result objects for documents in each view that contain it. Limit applies to the number of document objects returned. So-called Multi-view queries are only valid for head of branches and are not valid with aggregations.\n"
            }
        }, 
        "/secrets": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success.", 
                        "schema": {
                            "$ref": "#/definitions/secrets_response"
                        }
                    }, 
                    "401": {
                        "description": "Possible messages:\n  - **invalid_token**: The token is malformed or cannot be found in the database.\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }, 
                    "500": {
                        "description": "Internal server error."
                    }, 
                    "400": {
                        "description": "Possible messages:\n- **invalid_request**:\n  - invalid request body\n  - invalid domain\n", 
                        "schema": {
                            "$ref": "#/definitions/error_response"
                        }
                    }
                }, 
                "description": "This API is to return secret for a user plus a domain. The API:\n  - is OAuth2 authorized API. An access token with secrets.read scope is required.\n  - returns the same base64 encoded secret per user+domain.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "A string of domain in request body. The max length of domain is 100 characters.", 
                        "in": "body", 
                        "name": "domain"
                    }
                ], 
                "tags": [
                    "secrets"
                ], 
                "consumes": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Get or create a secret"
            }
        }, 
        "/supports/promocode": {
            "post": {
                "produces": [
                    "application/json"
                ], 
                "summary": "Returns Promo Code information", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/support_promocode"
                        }
                    }, 
                    "404": {
                        "description": "The promocode doesn't exist"
                    }, 
                    "401": {
                        "description": "Unauthorized request (no access token provided, or token not valid)"
                    }, 
                    "400": {
                        "description": "Bad or malformed request"
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded), in the format of EmployeeToken=xxx", 
                        "in": "header", 
                        "name": "Cookie"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The promocode to search", 
                        "in": "body", 
                        "name": "promocode"
                    }
                ], 
                "tags": [
                    "supports"
                ]
            }
        }, 
        "/supports/users": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/support_user"
                        }
                    }, 
                    "404": {
                        "description": "The user doesn't exist"
                    }, 
                    "401": {
                        "description": "Unauthorized request (no access token provided, or token not valid, or user doesn't affiliate with employee's organization)"
                    }, 
                    "400": {
                        "description": "Bad or malformed request"
                    }
                }, 
                "description": "Returns customer related information, including promotion, subscription", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Authentication access token (Base64 encoded), in the format of EmployeeToken=xxx", 
                        "in": "header", 
                        "name": "Cookie"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The email of the requested user", 
                        "in": "body", 
                        "name": "email"
                    }
                ], 
                "tags": [
                    "supports"
                ], 
                "produces": [
                    "application/json"
                ], 
                "summary": "Returns customer related information"
            }
        }, 
        "/supports/wd/unshare": {
            "post": {
                "tags": [
                    "supports"
                ]
            }
        }, 
        "/supports/wd/users": {
            "post": {
                "tags": [
                    "supports"
                ]
            }
        }, 
        "/tempfile/:temporary_file_pointer_id": {
            "get": {
                "description": "The tempfile endpoint returns the payload of the temporary file.\n", 
                "summary": "Download a temporary file from its pointer ID.", 
                "responses": {
                    "200": {
                        "headers": {
                            "Content-Type": {
                                "type": "string", 
                                "description": "The content type of the document returned."
                            }, 
                            "Content-Disposition": {
                                "type": "string", 
                                "description": "attachment; filename=\"FILE_NAME\""
                            }
                        }, 
                        "description": "Success"
                    }, 
                    "400": {
                        "description": "Bad or malformed request"
                    }, 
                    "410": {
                        "description": "The file is no longer available"
                    }, 
                    "206": {
                        "description": "Partial content if requested by the client. See the \"Range\" parameter for more information.\n"
                    }, 
                    "503": {
                        "description": "The file is not currently available, but may be available later"
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "A valid temporary file pointer id", 
                        "in": "path", 
                        "name": "temporary_file_pointer_id"
                    }
                ], 
                "tags": [
                    "tempfile"
                ]
            }
        }, 
        "/tempfile/:temporary_file_pointer_id/info": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/info_response"
                        }
                    }, 
                    "400": {
                        "description": "Bad or malformed request"
                    }, 
                    "410": {
                        "description": "The file is no longer available"
                    }, 
                    "503": {
                        "description": "The file is not currently available, but may be available later"
                    }
                }, 
                "description": "The tempfile info endpoint returns some information the state of a temporary file. Mainly, if the file has been processing, is waiting for processing, is currently being processed, with some additional parameters.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "A valid temporary file pointer id", 
                        "in": "path", 
                        "name": "temporary_file_pointer_id"
                    }
                ], 
                "tags": [
                    "tempfile"
                ], 
                "produces": [
                    "application/json"
                ], 
                "summary": "Get the info about the generation of a temporary file"
            }
        }, 
        "/users": {
            "post": {
                "description": "Returns the shared properties of batches of multiple users in a view. The requesting user must have ListView permission on the views. The response is streamed, with each user's data being appended to the response one after the other (NOT in an array).\n\nA maximum of 100 users may be requested per call to this endpoint. If more users are requested, a 400 error will be returned.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "A map of string <qid> to query object.", 
                        "name": "queries", 
                        "schema": {
                            "$ref": "#/definitions/users_batch_request"
                        }
                    }
                ], 
                "tags": [
                    "users"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Returns multiple users' properties", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/users_batch_response"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "Bad or malformed request"
                    }
                }
            }
        }, 
        "/users/:user_id": {
            "get": {
                "description": "Returns the requested user's properties. If the requesting user does not match the requested user then a view_id must be passed. The requesting user must have ListView permission on the view, and the requested user must be a member of the view. If the requested user ID does not match the ID in X-Upthere-At, only the first name, last name, and email address are returned\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "User ID of the requested user", 
                        "in": "path", 
                        "name": "user_id"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "View id of the view that has the requested user as a member. The requesting user must have ListView permission to access the details. It is required if and only if the requested user is not the same as the requesting user\n", 
                        "in": "query", 
                        "name": "view_id"
                    }, 
                    {
                        "required": false, 
                        "type": "integer", 
                        "description": "Locator associated with the view. An empty value means the view is located in the current data center. This is currently supported only in the v1000 endpoint\n", 
                        "in": "query", 
                        "name": "view_locator"
                    }
                ], 
                "tags": [
                    "users"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Returns the user's properties", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/user_result_v2"
                        }
                    }, 
                    "404": {
                        "description": "User not found"
                    }, 
                    "403": {
                        "description": "The requesting user does not have access to the requested resource. This could happen if the requesting user does not have ListView permission to the view that was passed as a parameter or if the requested user is not a member of that view\n"
                    }, 
                    "401": {
                        "description": "Unauthorized request (no access token provided)"
                    }, 
                    "400": {
                        "description": "Bad or malformed request"
                    }
                }
            }
        }, 
        "/views": {
            "post": {
                "description": "Returns the metadata for multiple views. The response is returned, as an array, returning the view's metadata in the same order as was requested.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "in": "query", 
                        "type": "string", 
                        "description": "if string which parses to true, the set of users in the view response will include the current user if it is in the view.", 
                        "name": "include_self_in_view_users"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/view_batch_request_item"
                        }, 
                        "description": "An array of view_id and locator string tuples for the requested views.\n", 
                        "in": "body", 
                        "required": true, 
                        "type": "array", 
                        "name": "body"
                    }
                ], 
                "tags": [
                    "views"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Returns multiple views' properties", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/view_batch_result"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized request (no access token provided)"
                    }, 
                    "400": {
                        "description": "Bad or malformed request"
                    }
                }
            }
        }, 
        "/views/:view_id": {
            "get": {
                "description": "Returns the metadata for a view. This request will not return the list of documents in the view. Use the /query interface instead\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Includes access token in the header for authorization, token type should be included too.\n\nFor example, \"Bearer Rkmqo2UkEIyIBCrtro1QpIG\" indicates header: \"Authorization: Bearer Rkmqo2UkEIyIBCrtro1QpIG\"\n", 
                        "in": "header", 
                        "name": "Authorization"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "View ID", 
                        "in": "path", 
                        "name": "view_id"
                    }, 
                    {
                        "required": false, 
                        "type": "integer", 
                        "description": "Locator associated with the view. An empty value means the view is located in the current data center. This is currently supported only in the v1000 endpoint\n", 
                        "in": "query", 
                        "name": "view_locator"
                    }, 
                    {
                        "in": "query", 
                        "type": "string", 
                        "description": "if string which parses to true, the set of users in the view response will include the current user if it is in the view.", 
                        "name": "include_self_in_view_users"
                    }
                ], 
                "tags": [
                    "views"
                ], 
                "produces": [
                    "application/json", 
                    "application/msgpack"
                ], 
                "summary": "Returns the metadata for a view", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/view_result_v2"
                        }
                    }, 
                    "404": {
                        "description": "View not found"
                    }, 
                    "403": {
                        "description": "The user does not have access to the requested resource"
                    }, 
                    "401": {
                        "description": "Unauthorized request (no access token provided)"
                    }, 
                    "400": {
                        "description": "Bad or malformed request"
                    }
                }
            }
        }
    }, 
    "schemes": [
        "http"
    ], 
    "basePath": "/v9", 
    "host": "api.corp.upthere.com", 
    "definitions": {
        "PayloadCompleteRequest": {
            "type": "object", 
            "properties": {
                "merge_op_id": {
                    "type": "string"
                }, 
                "payload_size": {
                    "type": "integer", 
                    "description": "Expected size of payload. Used to verify that the entire payload has been uploaded."
                }, 
                "no_deduping": {
                    "type": "integer", 
                    "description": "Bitset which tells the backend which duplication logic apply. If the bit 0 is set, the backend will not perform deduping on the CryptoHash. If the bit 1 is set, the backend will not perform deduping on RealContentHashes.\n"
                }, 
                "ctx": {
                    "type": "object", 
                    "description": "The UploadContextV1 for this document upload."
                }, 
                "wait_for_complete": {
                    "type": "boolean", 
                    "description": "If true, wait for deduplication and MetadataExtractedLogV1, and return metadata and ids in response. Default to false for iOS background uploads which may not want the additional wait time.\n"
                }, 
                "client_id": {
                    "type": "string", 
                    "description": "The types.ClientID for the client performing the upload."
                }, 
                "payload_complete_op_id": {
                    "type": "string"
                }, 
                "content_hash": {
                    "type": "string", 
                    "description": "The client-provided payload hash for the revision. Used to verify payload contents."
                }
            }
        }, 
        "comment": {
            "required": [
                "comment_id", 
                "user_id", 
                "created_at"
            ], 
            "properties": {
                "created_at": {
                    "type": "string", 
                    "description": "Type-1 UUID (in hex form) which represents the time when a comment was created"
                }, 
                "comment_id": {
                    "type": "string", 
                    "description": "Comment ID of the comment"
                }, 
                "user_id": {
                    "type": "integer", 
                    "description": "User ID of the user who created the comment"
                }
            }
        }, 
        "UploadMultipartRevRequest": {
            "required": [
                "rev_id", 
                "rev_id_sd", 
                "rev_id_tm", 
                "merge_op_id"
            ], 
            "type": "object", 
            "properties": {
                "rev_id_sd": {
                    "type": "string"
                }, 
                "md": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Metadata upserts for the new revision\n"
                }, 
                "merge_op_id": {
                    "type": "string"
                }, 
                "no_deduping": {
                    "type": "integer", 
                    "description": "Bitset which tells the backend which duplication logic apply. If the bit 0 is set, the backend will not perform deduping on the CryptoHash. If the bit 1 is set, the backend will not perform deduping on RealContentHashes.\n"
                }, 
                "ctx": {
                    "type": "object", 
                    "description": "The UploadContextV1 for this document upload"
                }, 
                "wait_for_complete": {
                    "type": "boolean", 
                    "description": "If true, wait for deduplication and MetadataExtractedLogV1, and return metadata and ids in response.\n"
                }, 
                "client_id": {
                    "type": "string"
                }, 
                "rev_id_tm": {
                    "type": "integer"
                }, 
                "rev_id": {
                    "type": "string"
                }
            }
        }, 
        "dir_parents_response": {
            "type": "object", 
            "properties": {
                "directories": {
                    "items": {
                        "$ref": "#/definitions/dir_md"
                    }, 
                    "type": "array"
                }, 
                "asof": {
                    "$ref": "#/definitions/asof"
                }
            }
        }, 
        "support_user": {
            "required": [
                "emails"
            ], 
            "properties": {
                "status": {
                    "type": "string", 
                    "description": "Status of this account, one of Normal, Unconfirmed, Ghost, Diabled."
                }, 
                "promotions": {
                    "items": {
                        "$ref": "#/definitions/support_promotion_md"
                    }, 
                    "type": "array"
                }, 
                "first_name": {
                    "type": "string", 
                    "description": "The first name of the user"
                }, 
                "last_name": {
                    "type": "string", 
                    "description": "The last name of the user"
                }, 
                "last_login_time": {
                    "type": "string", 
                    "description": "The timestamp, in utc, when this account was last login"
                }, 
                "account_size": {
                    "type": "integer", 
                    "description": "The number of bytes used by this account"
                }, 
                "phones": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "The list of phones registered for this account"
                }, 
                "created_at": {
                    "type": "string", 
                    "description": "The timestamp, in utc, when this account was created"
                }, 
                "subscriptions": {
                    "items": {
                        "$ref": "#/definitions/support_subscription"
                    }, 
                    "type": "array", 
                    "description": "all of the user's subscriptions (including deactivated)"
                }, 
                "quota": {
                    "type": "integer", 
                    "description": "The number of bytes this account owns"
                }, 
                "trial_started": {
                    "type": "string", 
                    "description": "The timestamp, in utc, when this account started its trial"
                }, 
                "trial_end": {
                    "type": "string", 
                    "description": "The timestamp, in utc, when this account ended its trial"
                }, 
                "emails": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "The list of emails registered for this account"
                }, 
                "subscription": {
                    "description": "The user's dominant subscription (depracated)", 
                    "$ref": "#/definitions/support_subscription"
                }
            }
        }, 
        "query_predicate_options": {
            "properties": {
                "dist": {
                    "default": 0, 
                    "type": "float", 
                    "description": "compatible with operator: D Distance is used for querying a distance in km (as a float) to/from a specified geo point."
                }, 
                "highlight": {
                    "default": false, 
                    "type": "boolean", 
                    "description": "compatible with operator: FE Highlight the search result. If true, return a list of highlighted fragments to client even if this attribute is not required by client in search result. Highlight only works for string type and the op should be FE. The predicate option is not valid whent highlight is true and the attributes's type is not string."
                }, 
                "unanalyzed": {
                    "default": false, 
                    "type": "boolean", 
                    "description": "compatible with operator: FE Unanalyzed forces the query engine to search against the unanalyzed subfield instead of the usual analyzed field."
                }, 
                "fuzziness": {
                    "default": 0, 
                    "type": "integer", 
                    "description": "compatible with operator: FE Fuzziness specifies the max edit distance to use for fuzzy matching. If it is -1, the FE operator behaves as a non-fuzzy prefix match. If it is 0, the fuzziness is set to \"auto\", which increases the edit distance based on the length of the search string."
                }, 
                "include_missing": {
                    "default": false, 
                    "type": "boolean", 
                    "description": "compatible with operator: NE, GT, LE, LTE, GTE if true, the predicate also succeeds when the attribute is not set for the object."
                }
            }
        }, 
        "MetadataUpdateResponse": {
            "required": [
                "view_ids", 
                "doc_id", 
                "branch_id", 
                "rev_id", 
                "md"
            ], 
            "type": "object", 
            "properties": {
                "view_ids": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "View IDs of views containing this doc-branch\n"
                }, 
                "doc_id": {
                    "type": "string"
                }, 
                "branch_id": {
                    "type": "string"
                }, 
                "md": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Updated metadata map. Map from metadata key to value\n"
                }, 
                "rev_id": {
                    "type": "string", 
                    "description": "RevID for the new revision containing the updated metadata."
                }
            }
        }, 
        "RemoveUserFromViewRequest": {
            "required": [
                "user_to_remove"
            ], 
            "type": "object", 
            "properties": {
                "user_to_remove": {
                    "type": "string"
                }
            }
        }, 
        "custom_payload": {
            "type": "object", 
            "properties": {
                "registrationCode": {
                    "type": "string", 
                    "description": "Registration code for RSDK client."
                }, 
                "portalGuid": {
                    "type": "string", 
                    "description": "Portal ID for Discovery client."
                }
            }
        }, 
        "upload_group_doc_rev": {
            "required": [
                "doc_id", 
                "rev_id", 
                "uploaded_size", 
                "is_payload_complete"
            ], 
            "properties": {
                "uploaded_size": {
                    "type": "integer", 
                    "description": "The number of the uploaded bytes in the document revision"
                }, 
                "is_payload_complete": {
                    "type": "boolean", 
                    "description": "Whether the document revision has been fully uploaded"
                }, 
                "doc_id": {
                    "type": "integer", 
                    "description": "The Document ID of the document revision"
                }, 
                "rev_id": {
                    "type": "integer", 
                    "description": "The Revision ID of the document revision"
                }
            }
        }, 
        "InviteUserToViewResponse": {
            "required": [
                "view_id", 
                "user_to_add"
            ], 
            "type": "object", 
            "properties": {
                "view_locator": {
                    "type": "string"
                }, 
                "view_id": {
                    "type": "string"
                }, 
                "user_to_add": {
                    "type": "string"
                }
            }
        }, 
        "user_presence_info": {
            "required": [
                "user_in_view", 
                "is_presence", 
                "watermark"
            ], 
            "properties": {
                "user_in_view": {
                    "description": "User in a view", 
                    "$ref": "#/definitions/user_in_view"
                }, 
                "watermark": {
                    "type": "string", 
                    "description": "Type-1 UUID (in hex form) which represents the time when a user was added to the view or was removed from the view"
                }, 
                "is_presence": {
                    "type": "bool", 
                    "description": "true if the user was added to the view; false if the user was removed from the view"
                }
            }
        }, 
        "error_response": {
            "required": [
                "error"
            ], 
            "type": "object", 
            "description": "Error response with a machine-targeted error message.", 
            "properties": {
                "error": {
                    "type": "string", 
                    "description": "Machine-targeted error message"
                }
            }
        }, 
        "dir_ent": {
            "allOf": [
                {
                    "$ref": "#/definitions/dir_md_fields"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "child_rev_id": {
                            "type": "string", 
                            "description": "a 256-bit rev id, only exists if child_dir_id does not"
                        }, 
                        "child_dir_id": {
                            "type": "string", 
                            "description": "a 256-bit dir id, only exists if child_doc_id does not"
                        }, 
                        "child_doc_id": {
                            "type": "string", 
                            "description": "a 256-bit doc id, only exists if child_dir_id does not"
                        }, 
                        "child_branch_id": {
                            "type": "string", 
                            "description": "a 256-bit branch id, only exists if child_dir_id does not"
                        }
                    }
                }
            ]
        }, 
        "user_result_shared": {
            "properties": {
                "first_name": {
                    "type": "string"
                }, 
                "last_name": {
                    "type": "string"
                }, 
                "user_id": {
                    "type": "string"
                }, 
                "email": {
                    "type": "string"
                }, 
                "asof": {
                    "type": "string", 
                    "description": "Time of the most recent value in the result set. Hex-encoded type-1 UUID\n"
                }
            }
        }, 
        "doc_in_view": {
            "required": [
                "branch_id", 
                "doc_id", 
                "view_id"
            ], 
            "properties": {
                "branch_id": {
                    "type": "string", 
                    "description": "Branch ID of the document branch"
                }, 
                "view_id": {
                    "type": "string", 
                    "description": "View ID of the view containing the document branch"
                }, 
                "doc_id": {
                    "type": "string", 
                    "description": "Document ID of the document branch"
                }
            }
        }, 
        "accounts_get_instances_instance": {
            "required": [
                "client_id", 
                "device_id", 
                "user_instance_id"
            ], 
            "properties": {
                "last_refreshed_at": {
                    "type": "integer", 
                    "description": "Last time the client refreshed a token as Unix seconds."
                }, 
                "device_id": {
                    "type": "string", 
                    "description": "device id of the device"
                }, 
                "name": {
                    "type": "string", 
                    "description": "name of the device. May be empty if not set by the client."
                }, 
                "client_id": {
                    "type": "integer", 
                    "description": "client id of the device"
                }, 
                "user_instance_id": {
                    "type": "integer", 
                    "description": "user instance id of the device"
                }
            }
        }, 
        "preview_with_info": {
            "required": [
                "doc_id", 
                "rev_id", 
                "rec", 
                "data"
            ], 
            "properties": {
                "rec": {
                    "description": "the record information", 
                    "schema": {
                        "$ref": "#/definitions/record"
                    }
                }, 
                "rev_id": {
                    "type": "byte", 
                    "description": "the rev_id of the returned preview"
                }, 
                "doc_id": {
                    "type": "byte", 
                    "description": "the doc_id of the returned preview"
                }, 
                "err": {
                    "type": "integer", 
                    "description": "if set, contains the http error explaining why the request failed."
                }, 
                "data": {
                    "type": "byte", 
                    "description": "the actual preview bytes"
                }
            }
        }, 
        "support_promotion_md": {
            "required": [
                "name", 
                "start_at", 
                "end_at", 
                "promo_type"
            ], 
            "properties": {
                "promo_type": {
                    "type": "integer", 
                    "description": "The type of this promotion. 1 means generic promotion, 2 measn trial promotion, 3 means referral promotion, 4 means capacity promotion."
                }, 
                "start_at": {
                    "type": "string", 
                    "description": "The timestamp, in utc, this account started this promotion"
                }, 
                "name": {
                    "type": "string", 
                    "description": "The name of this promotion"
                }, 
                "end_at": {
                    "type": "string", 
                    "description": "The timestamp, in utc, this account ended this promotion"
                }
            }
        }, 
        "identity_signup_automation_response": {
            "type": "object", 
            "properties": {
                "user_id": {
                    "type": "integer", 
                    "description": "The id of the newly created user."
                }, 
                "cluster_id": {
                    "type": "string", 
                    "description": "The cluster of the user that was created."
                }
            }
        }, 
        "queries": {
            "properties": {
                "<qid>": {
                    "$ref": "#/definitions/query_arguments"
                }
            }
        }, 
        "RevRef": {
            "required": [
                "view_id", 
                "doc_id", 
                "branch_id", 
                "rev_id"
            ], 
            "type": "object", 
            "properties": {
                "branch_id": {
                    "type": "string"
                }, 
                "doc_locator": {
                    "type": "string"
                }, 
                "doc_id": {
                    "type": "string"
                }, 
                "view_id": {
                    "type": "string"
                }, 
                "view_locator": {
                    "type": "string"
                }, 
                "rev_id": {
                    "type": "string"
                }
            }
        }, 
        "accounts_get_instances": {
            "required": [
                "instances"
            ], 
            "properties": {
                "instances": {
                    "items": {
                        "$ref": "#/definitions/accounts_get_instances_instance"
                    }, 
                    "type": "array", 
                    "description": "the user's instances"
                }
            }
        }, 
        "accounts_signup_response": {
            "required": [
                "user_id"
            ], 
            "type": "object", 
            "properties": {
                "user_id": {
                    "type": "integer", 
                    "description": "the id of the newly created user"
                }, 
                "parley_token": {
                    "type": "bytes", 
                    "description": "a parley token that can be used to log the user in once they are confirmed. client_id and device_id must be set in the request for this to be included. The backend may choose to not return this value, so clients must handle its abscence gracefully.\n"
                }
            }
        }, 
        "UpdateViewMetadataResponse": {
            "required": [
                "view_id"
            ], 
            "type": "object", 
            "properties": {
                "is_public": {
                    "type": "bool"
                }, 
                "view_id": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "comment_comment": {
            "required": [
                "comment_id", 
                "view_id", 
                "user_id", 
                "created_at", 
                "body"
            ], 
            "properties": {
                "body": {
                    "type": "string", 
                    "description": "The content of this comment"
                }, 
                "branch_id": {
                    "type": "string", 
                    "description": "ID of the branch that this comment belongs to, nil if the comment is a view comment"
                }, 
                "user_id": {
                    "type": "integer", 
                    "description": "ID of the user who made this comment"
                }, 
                "doc_locator": {
                    "type": "integer", 
                    "description": "Locator associated with the document. An empty value means the document is located in the current data center.\n"
                }, 
                "view_id": {
                    "type": "string", 
                    "description": "ID of the view that this comment belongs to"
                }, 
                "comment_id": {
                    "type": "string", 
                    "description": "ID of the comment"
                }, 
                "view_locator": {
                    "type": "integer", 
                    "description": "Locator associated with the view. An empty value means the view is located in the current data center.\n"
                }, 
                "doc_id": {
                    "type": "string", 
                    "description": "ID of the doc that this comment belongs to, nil if the comment is a view comment"
                }, 
                "created_at": {
                    "type": "string", 
                    "description": "Type-1 UUID (in hex form) which represents the time when this comment was made"
                }
            }
        }, 
        "comment_bulk_query": {
            "properties": {
                "<qid>": {
                    "$ref": "#/definitions/comment_range_query"
                }
            }
        }, 
        "doc_presence_info": {
            "required": [
                "doc_in_view", 
                "is_presence", 
                "watermark"
            ], 
            "properties": {
                "doc_in_view": {
                    "description": "Doc in a view", 
                    "$ref": "#/definitions/doc_in_view"
                }, 
                "watermark": {
                    "type": "string", 
                    "description": "Type-1 UUID (in hex form) which represents the time when a doc was added to the view or was removed from the view"
                }, 
                "is_presence": {
                    "type": "bool", 
                    "description": "true if the doc was added to the view; false if the doc was removed from the view"
                }
            }
        }, 
        "user_instance": {
            "properties": {
                "id": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "feed_result_v2": {
            "required": [
                "clusters", 
                "removed", 
                "asof"
            ], 
            "properties": {
                "next_cluster_offset": {
                    "type": "integer", 
                    "description": "Activity offset to use in conjunction of 'next_watermark' for retrieving subsequent activities in the past\n"
                }, 
                "users_metadata": {
                    "items": {
                        "$ref": "#/definitions/users_metadata_value"
                    }, 
                    "type": "array", 
                    "description": "A map of userID to the user's metadata for all users found in this activity feed"
                }, 
                "clusters": {
                    "items": {
                        "$ref": "#/definitions/activity"
                    }, 
                    "type": "array", 
                    "description": "List of activities in the activity feed"
                }, 
                "presence_info": {
                    "description": "Collective info regarding whether a doc/user/comment is in a view at a specific time", 
                    "$ref": "#/definitions/presence_info"
                }, 
                "next_watermark": {
                    "type": "string", 
                    "description": "Type-1 UUID (in hex form) which represents the 'day' to use for the client to retrieve subsequent activities in the past\n"
                }, 
                "asof": {
                    "description": "Time interval associated with the log entries the service has processed to generate the activity feed", 
                    "$ref": "#/definitions/bookend_watermarks"
                }
            }
        }, 
        "feed_result_v1": {
            "required": [
                "clusters", 
                "removed"
            ], 
            "properties": {
                "clusters": {
                    "items": {
                        "$ref": "#/definitions/activity"
                    }, 
                    "type": "array", 
                    "description": "List of activities in the activity feed"
                }, 
                "removed": {
                    "description": "Removed docs-in-views and users-in-views", 
                    "$ref": "#/definitions/removed_list"
                }, 
                "asof": {
                    "description": "Time interval associated with the user log entries the service has processed to generate the activity feed", 
                    "$ref": "#/definitions/bookend_watermarks"
                }
            }
        }, 
        "info_response": {
            "required": [
                "status"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "type": "integer", 
                    "description": "The status of the file. - 0: the file has yet to be processing - 1: the file is currently being processed - 2: the file has been processed (and can be downloaded using the other endpoint) - 4: the generation of the temporary file failed\n"
                }, 
                "gen_progress": {
                    "type": "object", 
                    "description": "a json containing the current progress. The content depends on the processing type"
                }, 
                "mime_type": {
                    "type": "string", 
                    "description": "The mime type of the temporary file"
                }, 
                "filename": {
                    "type": "string", 
                    "description": "The name of the temporary file"
                }
            }
        }, 
        "comment_presence_info": {
            "required": [
                "comment_in_view", 
                "is_presence", 
                "watermark"
            ], 
            "properties": {
                "watermark": {
                    "type": "string", 
                    "description": "Type-1 UUID (in hex form) which represents the time when a comment was added to the view or was removed from the view"
                }, 
                "comment_in_view": {
                    "description": "Comment in a view", 
                    "$ref": "#/definitions/comment_in_view"
                }, 
                "is_presence": {
                    "type": "bool", 
                    "description": "true if the comment was added to the view; false if the comment was removed from the view"
                }
            }
        }, 
        "comment_in_view": {
            "required": [
                "comment_id", 
                "view_id"
            ], 
            "properties": {
                "view_id": {
                    "type": "string", 
                    "description": "View ID of the view associated with the comment."
                }, 
                "comment_id": {
                    "type": "string", 
                    "description": "Comment ID of the comment"
                }
            }
        }, 
        "asof": {
            "type": "string", 
            "description": "type 1 UUID corresponding to the a userlog timer after which all future\nupdates to this object will be contained.\n", 
            "format": "type 1 UUID"
        }, 
        "drives_response": {
            "type": "object", 
            "properties": {
                "drives": {
                    "items": {
                        "$ref": "#/definitions/drive"
                    }, 
                    "type": "array"
                }, 
                "asof": {
                    "$ref": "#/definitions/asof"
                }
            }
        }, 
        "identity_tokens_introspect_response": {
            "type": "object", 
            "properties": {
                "scopes": {
                    "type": "string", 
                    "description": "List of the scopes within the token."
                }, 
                "audience": {
                    "type": "string", 
                    "description": "The intended audience of the token."
                }, 
                "user_id": {
                    "type": "int64", 
                    "description": "ID of the user represented by the token."
                }, 
                "expires_at": {
                    "type": "int64", 
                    "description": "The time at which the token expires (Unix timestamp)."
                }
            }
        }, 
        "users_batch_response": {
            "properties": {
                "qid": {
                    "type": "string", 
                    "description": "The custom key in the users batch request map. Each key is associated with one query object and one query result.\n"
                }, 
                "error_code": {
                    "type": "int", 
                    "description": "The http status code (400, 403, 404, 500) for the user metadata query if an error occurs. Zero if successful.\n"
                }, 
                "users": {
                    "items": {
                        "$ref": "#/definitions/user_result_shared"
                    }, 
                    "type": "array", 
                    "description": "Array of the users metadata. Empty array if an error occurs fetching the metadata for any one of the users in this view's batch.\n"
                }
            }
        }, 
        "comment_comment_range": {
            "required": [
                "total_num_comments", 
                "has_more", 
                "asof"
            ], 
            "properties": {
                "has_more": {
                    "type": "boolean", 
                    "description": "True when there are more comments to fetch. This is used for paging through all the comments in a view or doc/branch."
                }, 
                "total_num_comments": {
                    "type": "integer", 
                    "description": "The number of all comments in this view or doc/branch"
                }, 
                "to_watermark": {
                    "type": "string", 
                    "description": "Type-1 UUID (in hex form) which represents the timestamp of next comments"
                }, 
                "comments": {
                    "items": {
                        "$ref": "#/definitions/comment_comment"
                    }, 
                    "type": "array", 
                    "description": "List of comments that match the query"
                }, 
                "asof": {
                    "type": "string", 
                    "description": "Type-1 UUID (in hex form) which represents how up-to-date the query result is. Client can expect all mutations to the corresponding view or doc/branch for this query will be observed in the user log later than this timestamp."
                }
            }
        }, 
        "ErrorResponseDuplicate": {
            "required": [
                "error", 
                "doc_id", 
                "branch_id", 
                "rev_id"
            ], 
            "type": "object", 
            "properties": {
                "branch_id": {
                    "type": "string"
                }, 
                "error": {
                    "type": "string"
                }, 
                "doc_id": {
                    "type": "string"
                }, 
                "rev_id": {
                    "type": "string"
                }
            }
        }, 
        "thumbnail_filter": {
            "properties": {
                "size_max": {
                    "type": "integer", 
                    "description": "If set, the query will also return all thumbnails that fits the bounding box \"size_max\" x \"size_max\"\n"
                }
            }
        }, 
        "view_info": {
            "allOf": [
                {
                    "type": "object", 
                    "properties": {
                        "view_id": {
                            "type": "string", 
                            "description": "ViewID for this view. In msgpack this will be encoded in binary as a 256 bit blob. In JSON this will be encoded as a hex string."
                        }, 
                        "name": {
                            "type": "string", 
                            "description": "Display name for the view. For untitled shared views, will contain a string based on member names. For untitled personal views will contain the string \\\"Untilted\\\""
                        }, 
                        "updated_at": {
                            "type": "string", 
                            "description": "type-1 uuid to represent the most recent update to the state of this view. In msgpack, this will be binary encoded."
                        }
                    }
                }, 
                {
                    "$ref": "view_match_info"
                }, 
                {
                    "$ref": "view_type_info"
                }
            ]
        }, 
        "identity_get_userinfo_response": {
            "type": "object", 
            "properties": {
                "status": {
                    "type": "string", 
                    "description": "User status: \"Normal\", \"Unconfirmed\", \"Ghost\", \"Disabled\", \"Flagged For Removal\", \"Invalid\".\n"
                }, 
                "profile": {
                    "type": "object", 
                    "description": "The user profile data.\n", 
                    "properties": {
                        "locale": {
                            "type": "string", 
                            "description": "locale of the user, BCP47 standard, default to en-US if not provided."
                        }, 
                        "family_name": {
                            "type": "string", 
                            "description": "The user's family (last) name."
                        }, 
                        "given_name": {
                            "type": "string", 
                            "description": "The user's given (first) name."
                        }, 
                        "country": {
                            "type": "string", 
                            "description": "Two-letter (ISO Alpha-2) country code of the user's country."
                        }
                    }
                }, 
                "analytics_opt_in_changed_at": {
                    "type": "string", 
                    "description": "String of most recent changed analytics option UTC timestamp.\n"
                }, 
                "trashed_at": {
                    "type": "string", 
                    "description": "String of user marked deletion UTC timestamp.\n"
                }, 
                "accepted_tos_version_change_at": {
                    "type": "string", 
                    "description": "String of most recent accepted ToS UTC timestamp.\n"
                }, 
                "analytics_opt_in": {
                    "type": "string", 
                    "description": "This is the user's analytics opt-in choice. Values are \"opt-in\" or \"opt-out\"\n"
                }, 
                "should_delete_at": {
                    "type": "string", 
                    "description": "String of UTC timestamp when user will be deleted permanently.\n"
                }, 
                "marketing_opt_in": {
                    "type": "string", 
                    "description": "This is the user's marketing opt-in choice. Values are \"opt-in\" or \"opt-out\"\n"
                }, 
                "user_id": {
                    "type": "integer", 
                    "description": "User ID."
                }, 
                "created_at": {
                    "type": "string", 
                    "description": "String of user creation UTC timestamp.\n"
                }, 
                "analytics_id": {
                    "type": "string", 
                    "description": "The ID for Analytics.\n"
                }, 
                "accepted_tos_version": {
                    "type": "string", 
                    "description": "The ToS version was accepted.\n"
                }, 
                "confirmed_at": {
                    "type": "string", 
                    "description": "String of user confirmation UTC timestamp.\n"
                }, 
                "marketing_opt_in_changed_at": {
                    "type": "string", 
                    "description": "String of most recent changed marketing option UTC timestamp.\n"
                }, 
                "tos_was_accepted": {
                    "type": "boolean", 
                    "description": "Indicates the user accepted terms of service.\n"
                }, 
                "email": {
                    "type": "string", 
                    "description": "The email address of the user to create."
                }
            }
        }, 
        "query_arguments": {
            "required": [
                "view_id", 
                "limit"
            ], 
            "properties": {
                "limit": {
                    "default": 10, 
                    "type": "integer", 
                    "description": "The maximum number of results to return. If this number is less than zero, the maximum number of documents the server will serve is used as the limit.\n"
                }, 
                "sorts": {
                    "items": {
                        "$ref": "#/definitions/sort_attribute"
                    }, 
                    "type": "array", 
                    "description": "Ordered list of sorts, limited to 5. NOTE: missing values will be sorted as larger than the largest value.\n"
                }, 
                "predicates": {
                    "items": {
                        "$ref": "#/definitions/query_predicates"
                    }, 
                    "type": "array", 
                    "description": "List of search predicates. Predicates are ANDed together."
                }, 
                "attributes": {
                    "items": {
                        "type": "integer", 
                        "description": "Attributes to return"
                    }, 
                    "type": "array", 
                    "description": "attributes to return in the query. [Attribute definitions](http://attributes.corp.upthere.com)\n"
                }, 
                "view_id": {
                    "default": "<vid>", 
                    "type": "string", 
                    "description": "The id of the view to be queried"
                }, 
                "aggregation": {
                    "type": "object", 
                    "description": "Aggregation is used in a query to signify that the query should be an aggregation over the requested attributes. The properties in the Aggregation then apply to the results in DocResults\n", 
                    "$ref": "#/definitions/aggregation"
                }, 
                "sort_values": {
                    "type": "boolean", 
                    "description": "used to enable value fields in sort attributes"
                }
            }
        }, 
        "MetadataUpdate": {
            "properties": {
                "upserts": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Map from metadata key to value\n"
                }, 
                "deletes": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Keys to be deleted\n"
                }
            }
        }, 
        "secrets_response": {
            "type": "object", 
            "properties": {
                "secret": {
                    "type": "string", 
                    "description": "the 32 bytes base64 encoded secret string to the user and domain. Decode before use."
                }
            }
        }, 
        "client_status_result_v1": {
            "required": [
                "uid", 
                "asof"
            ], 
            "properties": {
                "uis_status": {
                    "items": {
                        "$ref": "#/definitions/user_instance_status"
                    }, 
                    "type": "array", 
                    "description": "List of user instance status"
                }, 
                "uid": {
                    "type": "integer", 
                    "description": "The User ID of the user"
                }, 
                "asof": {
                    "type": "string", 
                    "description": "Type-1 UUID (in hex form) which represents the time the service generates the client status\n"
                }
            }
        }, 
        "accounts_confirm_response": {
            "required": [
                "user_id"
            ], 
            "type": "object", 
            "properties": {
                "user_id": {
                    "type": "integer", 
                    "description": "the id of the newly created user"
                }, 
                "parley_token": {
                    "type": "bytes", 
                    "description": "a parley token that can be used to log the user in once they are confirmed. client_id and device_id must be set in the request for this to be included. The backend may choose to not return this value, so clients must handle its abscence gracefully.\n"
                }
            }
        }, 
        "drive": {
            "type": "object", 
            "properties": {
                "used": {
                    "type": "integer", 
                    "description": "Used storage in bytes."
                }, 
                "capacity": {
                    "type": "integer", 
                    "description": "Capacity of product in bytes"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Client managed user visible drive name"
                }, 
                "drive_loc": {
                    "type": "string", 
                    "description": "locator for the drive"
                }, 
                "root_dir_id": {
                    "type": "string", 
                    "description": "DirID of the root directory of the drive"
                }, 
                "udid": {
                    "type": "string", 
                    "description": "UDID of the drive"
                }, 
                "sync_started_at": {
                    "type": "integer", 
                    "description": "unix nanos of time last backup was started.", 
                    "format": "timestamp"
                }, 
                "state": {
                    "type": "integer", 
                    "description": "Used to check read-write capabilities.\nThe 1's place bit, if set, signifies the drive can be read from.\nThe 2's place bit, if set, signifies the drive can be writtent to.\nFor example, ReadOnly=0001, WriteOnly=0010, ReadWrite=0011.\n"
                }, 
                "drive_type": {
                    "type": "string", 
                    "description": "Drive type in the form USB_<VID>_<PID> (ie USB_0781_5583)"
                }, 
                "synced_at": {
                    "type": "integer", 
                    "description": "unix nanos of time last complete backedup.", 
                    "format": "timestamp"
                }, 
                "drive_id": {
                    "type": "string", 
                    "description": "a 256 bit drive id"
                }, 
                "synced_from": {
                    "type": "integer", 
                    "description": "user instance id of last complete backup."
                }, 
                "created_at": {
                    "type": "integer", 
                    "description": "unix nanos of time when the drive was created", 
                    "format": "timestamp"
                }
            }
        }, 
        "UploadRequest": {
            "required": [
                "user_instance_id"
            ], 
            "type": "object", 
            "properties": {
                "md": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Metadata map for the new document\n"
                }, 
                "utc_offset": {
                    "type": "integer", 
                    "description": "the difference IN SECONDS between UTC and local time (Default to PST)"
                }, 
                "user_instance_id": {
                    "type": "integer"
                }
            }
        }, 
        "device_device_batch": {
            "required": [
                "asof"
            ], 
            "properties": {
                "devices": {
                    "items": {
                        "$ref": "#/definitions/device_device"
                    }, 
                    "type": "array", 
                    "description": "asof in device_device will not be returned"
                }, 
                "asof": {
                    "type": "string", 
                    "description": "Type-1 UUID (in hex form) which represents how up-to-date the query result is. Client can expect all mutations to the corresponding device for this query will be observed  in the user log later than this timestamp."
                }
            }
        }, 
        "view_match_info": {
            "properties": {
                "matches_content": {
                    "type": "boolean", 
                    "description": "true if the view matches content in the returned facet chains"
                }, 
                "matches_name": {
                    "type": "boolean", 
                    "description": "true if the query string matches the name of the view"
                }, 
                "matches_user": {
                    "type": "boolean", 
                    "description": "true if the query string matches metadata of a user in the view"
                }
            }
        }, 
        "bucket_query_arguments": {
            "required": [
                "view_id", 
                "attributes"
            ], 
            "properties": {
                "limit": {
                    "type": "integer", 
                    "description": "Maximum number of buckets to return. If omitted, all buckets will be returned\n"
                }, 
                "examples": {
                    "$ref": "#/definitions/bucket_examples"
                }, 
                "predicates": {
                    "items": {
                        "$ref": "#/definitions/query_predicates"
                    }, 
                    "type": "array", 
                    "description": "List of search predicates to filter the document set to be bucketed"
                }, 
                "attributes": {
                    "items": {
                        "type": "integer"
                    }, 
                    "type": "array", 
                    "description": "Attributes from which to create buckets. All attributes must be of type string or datetime (no mixing of types). If attributes are of type datetime then match is invalid. Datetime attributes will be bucketed by month.\n"
                }, 
                "view_id": {
                    "type": "string", 
                    "description": "The view id being queried"
                }, 
                "match": {
                    "type": "string", 
                    "description": "Optional query string to match against values in document attributes that satisfy the provided predicates.\n"
                }
            }
        }, 
        "query_result_internal": {
            "properties": {
                "uperror": {
                    "type": "integer", 
                    "desciption": "An integer to indicate search error. The value of this integer maps to uperror\n"
                }, 
                "results": {
                    "items": {
                        "$ref": "#/definitions/query_result"
                    }, 
                    "type": "array", 
                    "description": "The search result for given Query parameter.\n"
                }
            }
        }, 
        "passwords_check_response": {
            "required": [
                "is_valid", 
                "reason"
            ], 
            "type": "object", 
            "properties": {
                "reason": {
                    "type": "string", 
                    "description": "Reason of invalid password format or \"\"."
                }, 
                "is_valid": {
                    "type": "boolean", 
                    "description": "If the password format is valid."
                }
            }
        }, 
        "view_type_info": {
            "properties": {
                "is_home": {
                    "type": "boolean", 
                    "description": "true if the view is the home view"
                }, 
                "is_archive": {
                    "type": "boolean", 
                    "description": "true if the view is the archive view"
                }, 
                "is_shared": {
                    "type": "boolean", 
                    "description": "true if the view is shared with other users"
                }, 
                "is_published": {
                    "type": "boolean", 
                    "description": "true if the view is currently published"
                }
            }
        }, 
        "dir_children_response": {
            "type": "object", 
            "properties": {
                "page_key": {
                    "type": "string", 
                    "description": "value which, if exists, can be used with the page_key request param\nto fetch next page of results.\nThe page_key property is populated if there exist more results\n"
                }, 
                "children": {
                    "items": {
                        "$ref": "#/definitions/dir_ent"
                    }, 
                    "type": "array"
                }, 
                "asof": {
                    "$ref": "#/definitions/asof"
                }
            }
        }, 
        "bucket": {
            "properties": {
                "attribute": {
                    "type": "integer", 
                    "description": "attribute to which this bucket corresponds"
                }, 
                "score": {
                    "type": "float", 
                    "description": "score of the bucket"
                }, 
                "examples": {
                    "items": {
                        "type": "search result", 
                        "description": "A limited set of documents in this bucket. The documents will contain the set of document attributes requested unioned with the required attributes (docid, revid, branchid, viewid).\n\nThe keys are the UpthereKeys for attributes.\n"
                    }, 
                    "type": "array"
                }, 
                "value": {
                    "type": "string", 
                    "description": "value which this bucket respresents"
                }
            }
        }, 
        "identity_signup_response": {
            "type": "object", 
            "properties": {
                "user_id": {
                    "type": "integer", 
                    "description": "The id of the newly created user."
                }, 
                "parley_token": {
                    "type": "string", 
                    "description": "Parley token can be used to log the user in once they've confirmed their account."
                }
            }
        }, 
        "identity_tokens_response": {
            "type": "object", 
            "properties": {
                "token_type": {
                    "type": "string", 
                    "description": "Always be \"bearer\"."
                }, 
                "scopes": {
                    "type": "string", 
                    "description": "List of the scopes granted to the client, space-delimited."
                }, 
                "parley_token": {
                    "type": "string", 
                    "description": "The parley token."
                }, 
                "access_token": {
                    "type": "string", 
                    "description": "The access token."
                }, 
                "id_token": {
                    "type": "string", 
                    "description": "The ID token describing the user."
                }, 
                "expires_in": {
                    "type": "integer", 
                    "description": "number of seconds until the token expires."
                }, 
                "refresh_token": {
                    "type": "string", 
                    "description": "The refresh token that can be used to refresh the access token."
                }
            }
        }, 
        "CreateMultipartDocRequest": {
            "required": [
                "doc_id", 
                "doc_id_sd", 
                "doc_id_tm", 
                "branch_id", 
                "branch_id_sd", 
                "branch_id_tm", 
                "rev_id", 
                "rev_id_sd", 
                "rev_id_tm"
            ], 
            "type": "object", 
            "properties": {
                "rev_id_sd": {
                    "type": "string"
                }, 
                "branch_id": {
                    "type": "string"
                }, 
                "branch_id_tm": {
                    "type": "integer"
                }, 
                "md": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Metadata map for the new document.\n"
                }, 
                "doc_id": {
                    "type": "string", 
                    "description": "Document ID for the uploaded document"
                }, 
                "ctx": {
                    "type": "object", 
                    "description": "The UploadContextV1 for this document upload."
                }, 
                "doc_id_sd": {
                    "type": "string", 
                    "description": "seed used to generate doc_id"
                }, 
                "doc_id_tm": {
                    "type": "integer", 
                    "description": "timestamp used to generate doc_id"
                }, 
                "branch_id_sd": {
                    "type": "string"
                }, 
                "rev_id_tm": {
                    "type": "integer"
                }, 
                "rev_id": {
                    "type": "string"
                }
            }
        }, 
        "record": {
            "required": [
                "kind", 
                "size", 
                "info", 
                "ts"
            ], 
            "properties": {
                "info": {
                    "type": "byte", 
                    "description": "the preview info, serialized"
                }, 
                "kind": {
                    "type": "integer", 
                    "description": "the actual \"kind\" type, defined in services/lib/preview.Kind"
                }, 
                "ts": {
                    "type": "integer", 
                    "description": "the timestamp (linux epoch in ns) at which the preview was generated"
                }, 
                "size": {
                    "type": "integer", 
                    "description": "the size of the record"
                }
            }
        }, 
        "batch_get_record_result": {
            "required": [
                "doc_id", 
                "rev_id"
            ], 
            "properties": {
                "records": {
                    "items": {
                        "$ref": "#/definitions/record_and_preview"
                    }, 
                    "type": "array", 
                    "description": "the records of the requested kind"
                }, 
                "doc_id": {
                    "type": "byte", 
                    "description": "the doc_id of the records requested"
                }, 
                "err": {
                    "type": "integer", 
                    "description": "if set, contains the http error explaining why the request failed."
                }, 
                "rev_id": {
                    "type": "byte", 
                    "description": "the rev_id of the records requested"
                }
            }
        }, 
        "removed_list": {
            "required": [
                "docs", 
                "views"
            ], 
            "properties": {
                "docs": {
                    "items": {
                        "$ref": "#/definitions/doc_in_view"
                    }, 
                    "type": "array", 
                    "description": "List of documents in views that have been removed"
                }, 
                "views": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "List of View IDs that have been removed"
                }
            }
        }, 
        "query_predicates": {
            "required": [
                "attribute", 
                "operator", 
                "value"
            ], 
            "properties": {
                "operator": {
                    "default": false, 
                    "type": "string", 
                    "description": "* \"=\" : Equals\n* \"<\" : Less Than\n* \"<=\" : Less Than or Equal To\n* \">\" : GreaterThan\n* \">=\" : Greater Than or Equal To\n* \"!\" : Not Equal\n* \"~\" : Fuzzy Equals (only for analyzed string fields)\n* \"^\" : In (takes a list)\n* \"!^\" : Not In (takes a list)\n* \"X\" : Exists\n* \"NX\": Not Exists\n"
                }, 
                "attribute": {
                    "default": false, 
                    "type": "integer"
                }, 
                "value": {
                    "default": false, 
                    "type": "value", 
                    "description": "this field can actually contain any valid json type that matches the type of the attribute being queried, not just a string. The type depends on the type of the attribute.\nSee [Attribute Definitions](http://attributes.corp.upthere.com)"
                }
            }
        }, 
        "activity": {
            "required": [
                "id", 
                "time", 
                "type", 
                "initiators", 
                "watermarks"
            ], 
            "properties": {
                "category": {
                    "type": "integer", 
                    "description": "Enum type representing the category (Item|Music|Doc|Photo|Video) of the docs associated with the activity"
                }, 
                "recipients": {
                    "items": {
                        "type": "integer"
                    }, 
                    "type": "array", 
                    "description": "List of User ID of the recipients of the activity"
                }, 
                "vloc": {
                    "type": "integer", 
                    "description": "Locator of the view associated with the activity"
                }, 
                "docs": {
                    "items": {
                        "$ref": "#/definitions/doc"
                    }, 
                    "type": "array", 
                    "description": "List of docs associated with the activity"
                }, 
                "comments": {
                    "items": {
                        "$ref": "#/definitions/comment"
                    }, 
                    "type": "array", 
                    "description": "List of comments associated with the activity"
                }, 
                "watermarks": {
                    "description": "Time interval associated with the activity", 
                    "$ref": "#/definitions/bookend_watermarks"
                }, 
                "context": {
                    "description": "Context of the activity", 
                    "$ref": "#/definitions/activity_context"
                }, 
                "time": {
                    "type": "integer", 
                    "description": "Most recent UTC time in seconds associated with the activity"
                }, 
                "initiators": {
                    "items": {
                        "type": "integer"
                    }, 
                    "type": "array", 
                    "description": "List of User ID of the initiators of the activity. The first user in the list is the primary initiator"
                }, 
                "type": {
                    "type": "integer", 
                    "description": "Enum type representing the activity type (upload|read|share|add-user-to-view|on-boarding|add-doc-to-view|rename-view|change-view-publicity|copy-doc|remove-user-from-view|duplicate-doc|edit-doc|add-comment)\n"
                }, 
                "id": {
                    "type": "string", 
                    "description": "Activity ID associated with the activity"
                }, 
                "view": {
                    "type": "string", 
                    "description": "View ID of the view associated with the activity"
                }
            }
        }, 
        "comment_bulk_response_item": {
            "required": [
                "qid", 
                "view_id", 
                "doc_id", 
                "branch_id", 
                "asof"
            ], 
            "properties": {
                "has_more": {
                    "type": "boolean", 
                    "description": "True when there are more comments to fetch. This is used for paging through all the comments in a view or doc/branch."
                }, 
                "qid": {
                    "type": "string", 
                    "description": "The custom key in the bulk query request map. Each key is associated with one query object and one query result."
                }, 
                "error_code": {
                    "type": "integer", 
                    "description": "A non zero error code means there is an error getting comments for this query. The error code has the same meaning as http status code."
                }, 
                "comments": {
                    "items": {
                        "$ref": "#/definitions/comment_comment"
                    }, 
                    "type": "array", 
                    "description": "List of comments that match the query"
                }, 
                "asof": {
                    "type": "string", 
                    "description": "Type-1 UUID (in hex form) which represents how up-to-date the query result is. Client can expect all mutations to the corresponding view or doc/branch for this query will be observed  in the user log later than this timestamp."
                }
            }
        }, 
        "view_instance": {
            "properties": {
                "name": {
                    "type": "string"
                }, 
                "id": {
                    "type": "string"
                }, 
                "is_public": {
                    "type": "boolean"
                }, 
                "users": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "view_locator": {
                    "type": "integer", 
                    "description": "Locator associated with the view. This is currently supported only in the v1000 endpoint\n"
                }, 
                "is_home": {
                    "type": "boolean"
                }, 
                "is_archive": {
                    "type": "boolean"
                }
            }
        }, 
        "presence_info": {
            "properties": {
                "docs_presence_info": {
                    "items": {
                        "description": "Represents whether a doc is in a view at a specific time", 
                        "$ref": "#/definitions/doc_presence_info"
                    }, 
                    "type": "array", 
                    "description": "Represents the collective info regarding whether a doc is in a view at a specific time"
                }, 
                "users_presence_info": {
                    "items": {
                        "description": "Represents whether a user is in a view at a specific time", 
                        "$ref": "#/definitions/user_presence_info"
                    }, 
                    "type": "array", 
                    "description": "Represents the collective info regarding whether a user is in a view at a specific time"
                }, 
                "comments_presence_info": {
                    "items": {
                        "description": "Represents whether a comment is in a view at a specific time", 
                        "$ref": "#/definitions/comment_presence_info"
                    }, 
                    "type": "array", 
                    "description": "Represents the collective info regarding whether a comment is in a view at a specific time"
                }
            }
        }, 
        "query_result": {
            "required": [
                "qid"
            ], 
            "properties": {
                "count": {
                    "type": "integer", 
                    "description": "for aggregate search results, count specifies an approximation of the total number of documents in the aggregation. For non-aggregate results, count is applied to the first element returned as an indication of the total number of results that this query matches\n"
                }, 
                "last": {
                    "type": "boolean", 
                    "description": "Signifies that this result is the last result for this query. Will be omitted if not true\n"
                }, 
                "complete": {
                    "type": "boolean", 
                    "description": "signifies that the returned results represents the servers view of the complete result set for this query. Can be used to detect further result limiting by the server if the number of results was fewer than requested and complete is set to false.\n"
                }, 
                "qid": {
                    "type": "string", 
                    "description": "id of the query to which this result corresponds"
                }, 
                "value": {
                    "type": "metadata map", 
                    "description": "map of metadata attribute (integer) to value. If the query is an aggregation, this contains the values of the aggregation (the first of the month for DateTime aggregation).\n"
                }, 
                "doc_results": {
                    "items": {
                        "$ref": "#/definitions/query_result"
                    }, 
                    "type": "array", 
                    "description": "If the aggregation limit was non-zero, doc_results will be populated with query_result objects with values of documents which match this aggregation\n"
                }, 
                "score": {
                    "type": "float", 
                    "description": "Only provided for queries with '~' predicates. Score corresponding to this result\n"
                }, 
                "error": {
                    "type": "integer", 
                    "description": "If this query resulted in an error, an HTTP status code will be returned in this field. If error exists, none of [\"value\", \"score\", \"last\", \"complete\", \"count\", or \"doc_results\"] will exist\n"
                }, 
                "error_msg": {
                    "type": "string", 
                    "description": "Error message. Exists only if error exists."
                }
            }
        }, 
        "view_instance_v2": {
            "properties": {
                "name": {
                    "type": "string"
                }, 
                "id": {
                    "type": "string"
                }, 
                "is_public": {
                    "type": "boolean"
                }, 
                "users": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "view_locator": {
                    "type": "integer", 
                    "description": "Locator associated with the view. This is currently supported only in the v1000 endpoint\n"
                }, 
                "is_home": {
                    "type": "boolean"
                }, 
                "is_archive": {
                    "type": "boolean"
                }
            }
        }, 
        "support_subscription": {
            "required": [
                "state", 
                "start_at"
            ], 
            "properties": {
                "state": {
                    "type": "integer", 
                    "description": "User subscription state, -1 mean deactivated, 0 means invalid, 100 means active, 300 means paymen failed"
                }, 
                "payment_failed_at": {
                    "type": "string", 
                    "description": "The timestamp, in utc, this account failed at payment, if there is any"
                }, 
                "deactivated_at": {
                    "type": "string", 
                    "description": "The timestamp, in utc, this account was deactivated"
                }, 
                "deactivated_reason": {
                    "type": "string", 
                    "description": "The reason why this account was deactivated."
                }, 
                "payment_failed_reason": {
                    "type": "string", 
                    "description": "The reason why the payment failed"
                }, 
                "start_at": {
                    "type": "string", 
                    "description": "The timestamp, in utc, this account started to subscript"
                }
            }
        }, 
        "user_billing_result": {
            "properties": {
                "promotion_end": {
                    "type": "integer", 
                    "description": "The end date of the user's trial and all promotions as a unix timestamp. Omitted if the user has not started a trial yet.\n"
                }, 
                "trial_end": {
                    "type": "integer", 
                    "description": "The end date of \u2020he user's trial as a unix timestamp. Omitted if the user has not started a trial yet.\n"
                }, 
                "is_eligible_for_trial": {
                    "type": "boolean", 
                    "description": "If true, the user is eligible for a trial. If false, the user is not eligible for a trial.\n"
                }, 
                "account_size": {
                    "type": "integer", 
                    "description": "The number of total bytes a user's account is consuming against their quota.\n"
                }
            }
        }, 
        "UploadResponse": {
            "required": [
                "view_id", 
                "doc_id", 
                "branch_id", 
                "rev_id", 
                "md"
            ], 
            "type": "object", 
            "properties": {
                "branch_id": {
                    "type": "string"
                }, 
                "view_id": {
                    "type": "string"
                }, 
                "rev_id": {
                    "type": "string"
                }, 
                "doc_id": {
                    "type": "string"
                }, 
                "md": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Metadata map of uploaded file. Map from metadata key to value.\n"
                }
            }
        }, 
        "DeleteDocResponse": {
            "required": [
                "view_ids", 
                "doc_id", 
                "branch_id"
            ], 
            "type": "object", 
            "properties": {
                "view_ids": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "View IDs of views which contained this doc-branch\n"
                }, 
                "doc_id": {
                    "type": "string"
                }, 
                "branch_id": {
                    "type": "string"
                }
            }
        }, 
        "batch_get_record_query": {
            "required": [
                "doc_id", 
                "rev_id", 
                "branch_id", 
                "view_id"
            ], 
            "properties": {
                "branch_id": {
                    "type": "byte", 
                    "description": "the branch_id of the records requested"
                }, 
                "thumb": {
                    "description": "if set, thumbnail records associated with the doc/rev will be returned\n", 
                    "schema": {
                        "$ref": "#/definitions/thumbnail_filter"
                    }
                }, 
                "text": {
                    "description": "if set, text records associated with the doc/rev will be returned\n", 
                    "schema": {
                        "$ref": "#/definitions/text_filter"
                    }
                }, 
                "view_id": {
                    "type": "byte", 
                    "description": "the view_id of the records requested"
                }, 
                "html": {
                    "description": "if set, html records associated with the doc/rev will be returned\n", 
                    "schema": {
                        "$ref": "#/definitions/html_filter"
                    }
                }, 
                "video": {
                    "description": "if set, video records associated with the doc/rev will be returned\n", 
                    "schema": {
                        "$ref": "#/definitions/video_filter"
                    }
                }, 
                "doc_id": {
                    "type": "byte", 
                    "description": "the doc_id of the records requested"
                }, 
                "mult": {
                    "description": "if set, multipage records associated with the doc/rev will be returned\n", 
                    "schema": {
                        "$ref": "#/definitions/multipage_filter"
                    }
                }, 
                "rev_id": {
                    "type": "byte", 
                    "description": "the rev_id of the records requested"
                }
            }
        }, 
        "RevertRevisionResponse": {
            "required": [
                "view_ids", 
                "doc_id", 
                "branch_id", 
                "rev_id", 
                "md"
            ], 
            "type": "object", 
            "properties": {
                "view_ids": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "View IDs of views containing this doc-branch\n"
                }, 
                "doc_id": {
                    "type": "string"
                }, 
                "branch_id": {
                    "type": "string"
                }, 
                "md": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Metadata map for the new merged revision.\n"
                }, 
                "rev_id": {
                    "type": "string", 
                    "description": "RevID for the new merged revision."
                }
            }
        }, 
        "sort_attribute": {
            "required": [
                "attribute", 
                "ascending"
            ], 
            "properties": {
                "attribute": {
                    "type": "integer", 
                    "description": "Attribute to sort by"
                }, 
                "value": {
                    "default": false, 
                    "type": "value", 
                    "description": "this field can actually contain any valid json type that matches the type of the attribute being sorted.\\n The type depends on the type of the attribute (see [Attribute Definitions](http://attributes.corp.upthere.com)). values are only examined if sort_values is set to true.\n"
                }, 
                "ascending": {
                    "type": "boolean", 
                    "description": "sort ascending"
                }
            }
        }, 
        "identity_well_known_jwk": {
            "required": [
                "alg", 
                "kid", 
                "use", 
                "n", 
                "e"
            ], 
            "type": "object", 
            "description": "json web key, this endpints now only expose RSA public key, so N and E are required.", 
            "properties": {
                "x5t": {
                    "type": "string", 
                    "description": "SHA1 hashing for certificate. The result is base64URLEncode(ToUpperCase(hexEncode(SHA1Hash(certificate in DER format))))"
                }, 
                "use": {
                    "type": "string", 
                    "description": "The usage of this public key, for this endpoint, it's always \"sig\", meaning it's used for signature."
                }, 
                "e": {
                    "type": "string", 
                    "description": "The E value of RSA public key. It's in base64 url encoded format."
                }, 
                "kty": {
                    "type": "string", 
                    "description": "The public key type"
                }, 
                "alg": {
                    "type": "string", 
                    "description": "The hash algorithm of this key"
                }, 
                "n": {
                    "type": "string", 
                    "description": "The N vaule of RSA public key. It's in base64 url encoded format."
                }, 
                "x5c": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Ceritificate chain. This is a base64 standard encoding of your each ceritificate in DER format."
                }, 
                "kid": {
                    "type": "string", 
                    "description": "A unique id of this public key"
                }
            }
        }, 
        "dir_response": {
            "allOf": [
                {
                    "$ref": "#/definitions/dir_md"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "asof": {
                            "$ref": "#/definitions/asof"
                        }
                    }
                }
            ]
        }, 
        "accounts_empty_success_response": {
            "required": [
                "message"
            ], 
            "type": "object", 
            "description": "Response from successful accounts requests with no endpoint-specific body. \n", 
            "properties": {
                "message": {
                    "type": "string", 
                    "description": "value is always \"OK\""
                }
            }
        }, 
        "facet_request": {
            "properties": {
                "predicates": {
                    "items": {
                        "$ref": "#/definitions/query_predicates"
                    }, 
                    "type": "array", 
                    "description": "Predicates act as the context for the query."
                }, 
                "text": {
                    "type": "string", 
                    "description": "Free form text used to discover facets. Zero length or Whitespace-only strings will be treated as missing."
                }
            }
        }, 
        "view_result": {
            "properties": {
                "name": {
                    "type": "string"
                }, 
                "created_at": {
                    "type": "UUID", 
                    "description": "Time the view was created. In json Hex-encoded type-1 UUID"
                }, 
                "view_locator": {
                    "type": "integer", 
                    "description": "The locator string of the view ID for multidatacenter support. This is currently only returned in the v1000 endpoint\n"
                }, 
                "is_home": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "is_public": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "asof": {
                    "type": "UUID", 
                    "description": "Time the view was lasted updated. In json Hex-encoded type-1 UUID\n"
                }, 
                "is_archive": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "users": {
                    "items": {
                        "type": "string", 
                        "description": "List of user ids that belong to this view."
                    }, 
                    "type": "array"
                }
            }
        }, 
        "bucket_examples": {
            "properties": {
                "attributes": {
                    "items": {
                        "type": "integer", 
                        "description": "Attributes to return"
                    }, 
                    "type": "array", 
                    "description": "document attributes to be returned with examples in bucket results"
                }, 
                "sorts": {
                    "items": {
                        "$ref": "#/definitions/sort_attribute"
                    }, 
                    "type": "array", 
                    "description": "Ordered list of sorts, limited to 5. NOTE: missing values will be sorted as larger than the largest value. value must not be specified when using bucket examples\n"
                }, 
                "limit": {
                    "type": "integer", 
                    "description": "maximum number of documents to be returned in bucket examples"
                }
            }
        }, 
        "identity_well_known_jwks_response": {
            "required": [
                "keys"
            ], 
            "type": "object", 
            "properties": {
                "keys": {
                    "items": {
                        "$ref": "#/definitions/identity_well_known_jwk"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "CreateViewRequest": {
            "type": "object", 
            "properties": {
                "is_public": {
                    "type": "boolean"
                }, 
                "name": {
                    "type": "string"
                }
            }
        }, 
        "CreateViewResponse": {
            "required": [
                "view_id"
            ], 
            "type": "object", 
            "properties": {
                "view_id": {
                    "type": "string"
                }, 
                "vmd": {
                    "type": "object", 
                    "description": "ViewMetadata of the new view\n"
                }
            }
        }, 
        "facet": {
            "description": "A facet is a labeled set of predicates. Facets may additionally contain references to children facet chains. The last facet in a chain may also contain information about how the client ought to sort retreived documents for this chain. Facets may optionally contain information about the view ids which contain documents that satisfy the predicates along the path in the facet chain.", 
            "properties": {
                "predicates": {
                    "items": {
                        "$ref": "#/definitions/query_predicates"
                    }, 
                    "type": "array", 
                    "description": "predicates that correspond to this facet."
                }, 
                "doc_sorts": {
                    "items": {
                        "$ref": "#/definitions/sort_attribute"
                    }, 
                    "type": "array", 
                    "description": "Only exists on the last facet in a chain. Tells the client how to request document metadata that corresponds to this facet and its context."
                }, 
                "name": {
                    "type": "string", 
                    "description": "User-displayable name for this facet class. Generally a category label to be combined with the value. E.g. \\\"Category\\\""
                }, 
                "value": {
                    "type": "string", 
                    "description": "User-displayable value for this facet."
                }, 
                "views": {
                    "items": {
                        "type": "string", 
                        "description": "ViewIDs of views that contain documents that satisfy these predicates (and predicates of all parent facets in the chain)."
                    }, 
                    "type": "array"
                }
            }
        }, 
        "CreateLinkResponse": {
            "required": [
                "view_id", 
                "doc_branches"
            ], 
            "type": "object", 
            "properties": {
                "view_id": {
                    "type": "string"
                }, 
                "doc_branches": {
                    "items": {
                        "type": "object", 
                        "properties": {
                            "branch_id": {
                                "type": "string"
                            }, 
                            "doc_id": {
                                "type": "string"
                            }
                        }
                    }, 
                    "type": "array"
                }
            }
        }, 
        "upload_group_status": {
            "required": [
                "upload_group_id", 
                "upload_type", 
                "import_source", 
                "total_doc_count", 
                "total_size", 
                "fully_uploaded_doc_count", 
                "uploaded_size", 
                "is_paused", 
                "is_completed", 
                "first_seen_ts", 
                "last_seen_ts"
            ], 
            "properties": {
                "is_paused": {
                    "type": "boolean", 
                    "description": "Whether the upload group is paused"
                }, 
                "upload_group_id": {
                    "type": "integer", 
                    "description": "The Upload Group ID"
                }, 
                "doc_revs": {
                    "items": {
                        "$ref": "#/definitions/upload_group_doc_rev"
                    }, 
                    "type": "array", 
                    "description": "List of document revisions in the upload group. This is returned if \"details\" query param is \"true\""
                }, 
                "total_size": {
                    "type": "integer", 
                    "description": "The estimated total number of bytes in the upload group"
                }, 
                "uploaded_size": {
                    "type": "integer", 
                    "description": "The number of uploaded bytes in the upload group"
                }, 
                "is_completed": {
                    "type": "boolean", 
                    "description": "Whether the upload group is completed at the moment"
                }, 
                "import_source": {
                    "type": "integer", 
                    "description": "Enum type representing the import source"
                }, 
                "upload_type": {
                    "type": "integer", 
                    "description": "The Upload type"
                }, 
                "last_seen_ts": {
                    "type": "string", 
                    "description": "Type-1 UUID (in hex form) which represents the last time the service has seen the upload group\n"
                }, 
                "fully_uploaded_doc_count": {
                    "type": "integer", 
                    "description": "The number of fully uploaded documents in the upload group"
                }, 
                "total_doc_count": {
                    "type": "integer", 
                    "description": "The estimated total number of documents in the upload group"
                }, 
                "first_seen_ts": {
                    "type": "string", 
                    "description": "Type-1 UUID (in hex form) which represents the first time the service has seen the upload group\n"
                }
            }
        }, 
        "record_and_preview": {
            "required": [
                "rec"
            ], 
            "properties": {
                "rec": {
                    "description": "the record information", 
                    "schema": {
                        "$ref": "#/definitions/record"
                    }
                }, 
                "data": {
                    "type": "byte", 
                    "description": "the actual preview bytes, only if the filter allows it"
                }
            }
        }, 
        "multipage_filter": {
            "properties": {
                "jpeg_pages_to": {
                    "type": "integer", 
                    "description": "If is set, the query will also return up to \"jpeg_pages_to\" prerendered pages\n"
                }, 
                "get_pdf": {
                    "type": "boolean", 
                    "description": "if true, the \"PDF\" preview will be returned if available"
                }
            }
        }, 
        "facet_response": {
            "properties": {
                "facets": {
                    "items": {
                        "$ref": "#/definitions/chain"
                    }, 
                    "type": "array"
                }, 
                "chain": {
                    "items": {
                        "$ref": "#/definitions/facet"
                    }, 
                    "type": "array"
                }, 
                "views": {
                    "items": {
                        "$ref": "#/definitions/view_info"
                    }, 
                    "type": "array", 
                    "description": "Array of information about the views which match the query."
                }
            }
        }, 
        "device_device": {
            "required": [
                "asof", 
                "device_id", 
                "model", 
                "revision", 
                "serial", 
                "boot_version", 
                "mcu_version", 
                "app_version"
            ], 
            "properties": {
                "boot_version": {
                    "type": "string", 
                    "description": "Boot version of this device"
                }, 
                "battery_state": {
                    "type": "integer", 
                    "description": "Only available from skyline, it's either(not_charging:1, charging:2, done_charging:3)"
                }, 
                "tls_certificate_hash": {
                    "items": {
                        "type": "byte"
                    }, 
                    "type": "array", 
                    "description": "hash of the device's tls certificate"
                }, 
                "mcu_version": {
                    "type": "string", 
                    "description": "MCU version of this device"
                }, 
                "updated_at": {
                    "type": "string", 
                    "description": "Type-1 UUID (in hex form for JSON, binary for msgpack) which represents when this status was written to cloud."
                }, 
                "serial": {
                    "type": "string", 
                    "description": "Serial number of this device"
                }, 
                "network_ssid": {
                    "type": "string", 
                    "description": "The WIFI ssid to which this device is connecting."
                }, 
                "errors": {
                    "items": {
                        "type": "byte"
                    }, 
                    "required": false, 
                    "type": "array", 
                    "description": "up to 20 error bytes corresponding to current device errors."
                }, 
                "capacity": {
                    "type": "long", 
                    "description": "64 bits integer that represents total flash capaicty of this device, in bytes."
                }, 
                "revision": {
                    "type": "string", 
                    "description": "Revision of this device"
                }, 
                "ingestion_available_bytes": {
                    "type": "long", 
                    "description": "Only available from skyline, 64 bits integer that represents the ingested data in bytes"
                }, 
                "ingesting": {
                    "type": "boolean", 
                    "description": "Only available from skyline, True means the device is ingesting data"
                }, 
                "ingestion_mode": {
                    "type": "integer", 
                    "description": "Only available from skyline, ingestion mode"
                }, 
                "app_version": {
                    "type": "string", 
                    "description": "App version of this device"
                }, 
                "asof": {
                    "type": "string", 
                    "description": "Type-1 UUID (in hex form) which represents how up-to-date the query result is. Client can expect all mutations to the corresponding device for this query will be observed  in the user log later than this timestamp."
                }, 
                "network_is_online": {
                    "type": "boolean", 
                    "description": "True means this device can reach the backend."
                }, 
                "is_warming_up": {
                    "type": "boolean", 
                    "description": "Only available from skyline, True means this device is warming up the user"
                }, 
                "pending_bytes": {
                    "type": "long", 
                    "description": "64 bits integer that represents how many bytes left in skyline device to be sent to backend"
                }, 
                "network_state": {
                    "type": "integer", 
                    "description": "The current network state of this device, either (offline:1, access_point:2, station_connected:3, dual:4)"
                }, 
                "ops_pending": {
                    "type": "boolean", 
                    "description": "Only available from skyline, True means this device has some data yet to send out"
                }, 
                "short_state": {
                    "type": "long", 
                    "description": "64 bits integer that represents short version of all states of this device"
                }, 
                "pending_files": {
                    "type": "long", 
                    "description": "64 bits integer that represents how many files left in skyline device to be sent to backend"
                }, 
                "device_id": {
                    "type": "string", 
                    "description": "ID of this device"
                }, 
                "network_port": {
                    "type": "integer", 
                    "description": "The port of skyline app"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of this device"
                }, 
                "network_ip": {
                    "type": "string", 
                    "description": "The ip address of the device in the network above"
                }, 
                "created_at": {
                    "type": "string", 
                    "description": "Type-1 UUID (in hex form for JSON, binary for msgpack) which represents when the device was created in the cloud."
                }, 
                "battery_capacity": {
                    "type": "integer", 
                    "description": "Only available from skyline, 0 to 100 scale of the battery"
                }, 
                "last_sync_timestamp": {
                    "type": "long", 
                    "description": "Only available from skyline, 64 bits integer that represents unix timestamp when the last time the device synced with the backend"
                }, 
                "ops_sending": {
                    "descriptioin": "Only avaialble from skyline, True means this device is sending data to backend", 
                    "type": "boolean"
                }, 
                "model": {
                    "type": "string", 
                    "description": "Model of this device"
                }, 
                "led_mode": {
                    "type": "integer", 
                    "description": "Only available from skyline, led mode"
                }, 
                "throughput": {
                    "type": "double", 
                    "description": "64 bits float point number that represents the throughput when skyline uploading files"
                }, 
                "network_ssid_hash": {
                    "type": "long", 
                    "description": "64 bits integer that represents the hash value of the network_ssid"
                }
            }
        }, 
        "recursive_dir_children_response": {
            "allOf": [
                {
                    "$ref": "#/definitions/dir_response"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "recursive_children": {
                            "items": {
                                "$ref": "#/definitions/dir_ent"
                            }, 
                            "type": "array", 
                            "description": "The entries in the array are unordered but will have the invariant\nthat parents will precede their children. All entries will have\nparent_dir_id populated and that id will either point to a directory\nfrom a prior entry or to the requested base directory (which has its\nmetadata in the response body).\n"
                        }
                    }
                }
            ]
        }, 
        "RemoveUserFromViewResponse": {
            "required": [
                "view_id", 
                "user_to_remove"
            ], 
            "type": "object", 
            "properties": {
                "user_to_remove": {
                    "type": "string"
                }, 
                "view_id": {
                    "type": "string"
                }
            }
        }, 
        "dir_child_response": {
            "allOf": [
                {
                    "$ref": "#/definitions/dir_ent"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "asof": {
                            "$ref": "#/definitions/asof"
                        }
                    }
                }
            ]
        }, 
        "drive_response": {
            "allOf": [
                {
                    "$ref": "#/definitions/drive"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "asof": {
                            "$ref": "#/definitions/asof"
                        }
                    }
                }
            ]
        }, 
        "ErrorResponse": {
            "required": [
                "error"
            ], 
            "type": "object", 
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        }, 
        "ModifyViewResponse": {
            "required": [
                "view_id", 
                "doc_ids", 
                "branch_ids"
            ], 
            "type": "object", 
            "properties": {
                "branch_ids": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "view_id": {
                    "type": "string"
                }, 
                "doc_ids": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "view_batch_result": {
            "properties": {
                "error_code": {
                    "type": "integer", 
                    "description": "The http status code (400, 403, 404, 500) for the view metadata query if an error occurs. Zero if successful."
                }, 
                "view": {
                    "$ref": "#/definitions/view_result_v2"
                }
            }
        }, 
        "view_batch_request_item": {
            "properties": {
                "view_id": {
                    "required": true, 
                    "type": "UUID", 
                    "description": "The view ID to request metadata for.\n"
                }, 
                "view_locator": {
                    "type": "integer", 
                    "description": "The locator string of the view ID for multidatacenter support. This is currently only returned in the v1000 endpoint\n"
                }
            }
        }, 
        "users_batch_request": {
            "required": [
                "view_id"
            ], 
            "properties": {
                "view_id": {
                    "type": "string", 
                    "description": "View id of the view that has the requested user as a member. The requesting user must have ListView permission to access the details.\n"
                }, 
                "view_locator": {
                    "type": "integer", 
                    "description": "Locator associated with the view. An empty value means the view is located in the current data center. This is currently supported only in the v1000 endpoint.\n"
                }, 
                "user_ids": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "User IDs of the requested users. Users who are not a member of the view will be dropped silently from the response.\n"
                }
            }
        }, 
        "video_filter": {
            "properties": {
                "max_bitrate": {
                    "type": "integer", 
                    "description": "if set, the stream with a bitrate lower than the one passed will be returned."
                }
            }
        }, 
        "users_metadata_value": {
            "properties": {
                "first_name": {
                    "type": "string", 
                    "description": "The user's first name"
                }, 
                "last_name": {
                    "type": "string", 
                    "description": "The user's last name"
                }
            }
        }, 
        "html_filter": {
            "properties": {
                "get_html": {
                    "type": "boolean", 
                    "description": "if true, the \"HTML\" preview will be returned if available"
                }
            }
        }, 
        "promotion_response": {
            "required": [
                "name", 
                "start_at", 
                "end_at"
            ], 
            "type": "object", 
            "properties": {
                "start_at": {
                    "type": "dateTime", 
                    "description": "date the promotion starts (may be in the past or future)"
                }, 
                "affiliate": {
                    "type": "string", 
                    "description": "affiliate responsible for this promotion. No affiliate implies the promotion came from Upthere."
                }, 
                "name": {
                    "type": "string", 
                    "description": "The name of the promotion (suitable for displaying to the user)"
                }, 
                "end_at": {
                    "type": "dateTime", 
                    "description": "date the promotion ends (may be in the past or future)"
                }
            }
        }, 
        "user_in_view": {
            "required": [
                "user_id", 
                "view_id"
            ], 
            "properties": {
                "view_id": {
                    "type": "string", 
                    "description": "View ID of the view that the user is a member of"
                }, 
                "user_id": {
                    "type": "string", 
                    "description": "User ID of the user"
                }
            }
        }, 
        "query_results_deprecated": {
            "required": [
                "total_hits", 
                "asof"
            ], 
            "properties": {
                "total_hits": {
                    "type": "integer", 
                    "description": "The total number of results that this query matched.\n\nNote that this will not be equal necessarily to the number of results returned in results\n"
                }, 
                "results": {
                    "items": {
                        "type": "array", 
                        "description": "The documents will contain the set of document attributes requested unioned with the required attributes (docid, revid, branchid, viewid).\n\nThe keys are the UpthereKeys for attributes.\n"
                    }, 
                    "description": "List of search results."
                }, 
                "asof": {
                    "type": "string", 
                    "description": "Time of the most recent value in the result set. Hex-encoded type-1 UUID\n"
                }
            }
        }, 
        "bookend_watermarks": {
            "required": [
                "from", 
                "to"
            ], 
            "properties": {
                "to": {
                    "type": "string", 
                    "description": "Type-1 UUID (in hex form) which represents the least recent time\n"
                }, 
                "from": {
                    "type": "string", 
                    "description": "Type-1 UUID (in hex form) which represents the most recent time\n"
                }
            }
        }, 
        "aggregation": {
            "required": [
                "limit"
            ], 
            "properties": {
                "attributes": {
                    "items": {
                        "type": "integer"
                    }, 
                    "type": "array", 
                    "description": "List of attributes to include for the results in DocResults. Illegal if the aggregation limit is 0.\n"
                }, 
                "sorts": {
                    "items": {
                        "$ref": "#/definitions/sort_attribute"
                    }, 
                    "type": "array", 
                    "description": "Ordered list of sorts, limited to 5. NOTE: missing values will be sorted as larger than the largest value. aggregation sorts may not contain values. illegal if aggregation limit is 0.\n"
                }, 
                "limit": {
                    "type": "integer", 
                    "description": "The maximum number of DocResults to return. May be further limitted by the server. This case is detectabled through the last and complete boolean flags on the results in DocResults\n"
                }
            }
        }, 
        "activity_context": {
            "properties": {
                "total_doc": {
                    "type": "integer", 
                    "description": "Total number of docs involved"
                }, 
                "total_dup": {
                    "type": "integer", 
                    "description": "Total number of duplicated docs involved"
                }, 
                "prev_view_name": {
                    "type": "string", 
                    "description": "Previous name in rename-view operation."
                }, 
                "total_user": {
                    "type": "integer", 
                    "description": "Total number of users involved"
                }, 
                "is_view_deleted": {
                    "type": "boolean", 
                    "description": "Whether the view has been deleted in remove-user-from-view operation."
                }, 
                "view_name": {
                    "type": "string", 
                    "description": "New name in rename-view operation, or the existing view name in remove-user-from-view or delete-view operation."
                }, 
                "upload_group_id": {
                    "type": "integer", 
                    "description": "Represents the upload group id associated with the upload\n"
                }, 
                "is_manual": {
                    "type": "boolean", 
                    "description": "Whether the upload is manual"
                }, 
                "is_public": {
                    "type": "bool", 
                    "description": "The state of publicity of a view after publishing/unpublishing the view"
                }, 
                "user_instance_id": {
                    "type": "integer", 
                    "description": "Represents a sequential ID that is uniquely assigned to each device that a user has logged in\n"
                }
            }
        }, 
        "log_entry": {
            "type": "object", 
            "description": "Log entry encoded as MsgPack or JSON map."
        }, 
        "InviteUserToViewRequest": {
            "required": [
                "email"
            ], 
            "type": "object", 
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        }, 
        "user_result": {
            "properties": {
                "opt_in_setting_changed_at": {
                    "type": "integer"
                }, 
                "first_name": {
                    "type": "string"
                }, 
                "last_name": {
                    "type": "string"
                }, 
                "user_id": {
                    "type": "string"
                }, 
                "billing": {
                    "$ref": "#/definitions/user_billing_result"
                }, 
                "views": {
                    "items": {
                        "$ref": "#/definitions/view_instance"
                    }, 
                    "type": "array"
                }, 
                "analytics_id": {
                    "type": "string", 
                    "description": "User analytics ID. Only returned if analytics_opt_in is true.\n"
                }, 
                "analytics_opt_in": {
                    "type": "boolean"
                }, 
                "instances": {
                    "items": {
                        "$ref": "#/definitions/user_instance"
                    }, 
                    "type": "array"
                }, 
                "marketing_opt_in": {
                    "type": "boolean"
                }, 
                "has_shared": {
                    "type": "boolean"
                }, 
                "referrer_id": {
                    "type": "string"
                }, 
                "email": {
                    "type": "string"
                }, 
                "asof": {
                    "type": "string", 
                    "description": "Time of the most recent value in the result set. Hex-encoded type-1 UUID\n"
                }
            }
        }, 
        "UploadMultipartDocRequest": {
            "required": [
                "payload_complete_op_id", 
                "doc_id", 
                "doc_id_sd", 
                "doc_id_tm", 
                "branch_id", 
                "branch_id_sd", 
                "branch_id_tm", 
                "rev_id", 
                "rev_id_sd", 
                "rev_id_tm"
            ], 
            "type": "object", 
            "properties": {
                "utc_offset": {
                    "type": "integer", 
                    "description": "the difference IN SECONDS between UTC and local time (Default to PST)"
                }, 
                "md": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Metadata map for the new document\n"
                }, 
                "doc_id_sd": {
                    "type": "string", 
                    "description": "seed used to generate DocID"
                }, 
                "doc_id_tm": {
                    "type": "integer", 
                    "description": "timestamp used to generate DocID"
                }, 
                "client_id": {
                    "type": "string"
                }, 
                "rev_id_tm": {
                    "type": "integer"
                }, 
                "rev_id_sd": {
                    "type": "string"
                }, 
                "branch_id": {
                    "type": "string"
                }, 
                "branch_id_tm": {
                    "type": "integer"
                }, 
                "no_deduping": {
                    "type": "integer", 
                    "description": "Bitset which tells the backend which duplication logic apply. If the bit 0 is set, the backend will not perform deduping on the CryptoHash. If the bit 1 is set, the backend will not perform deduping on RealContentHashes.\n"
                }, 
                "ctx": {
                    "type": "object", 
                    "description": "The UploadContextV1 for this upload"
                }, 
                "wait_for_complete": {
                    "type": "boolean", 
                    "description": "If true, wait for deduplication and MetadataExtractedLogV1, and return metadata and ids in response.\n"
                }, 
                "payload_complete_op_id": {
                    "type": "string"
                }, 
                "branch_id_sd": {
                    "type": "string"
                }, 
                "doc_id": {
                    "type": "string", 
                    "description": "DocID for the uploaded document"
                }, 
                "rev_id": {
                    "type": "string"
                }
            }
        }, 
        "support_promocode": {
            "required": [
                "code", 
                "status", 
                "promotion", 
                "used_at"
            ], 
            "properties": {
                "status": {
                    "type": "string", 
                    "description": "It's either Invalidated, Unused or Used."
                }, 
                "promotion": {
                    "type": "string", 
                    "description": "A human-readable description of what this promotion is."
                }, 
                "code": {
                    "type": "string", 
                    "description": "The promocode itself."
                }, 
                "used_at": {
                    "type": "string", 
                    "description": "A human-readable time representation of when the promocode is used. na if the status is not Used."
                }
            }
        }, 
        "dir_md": {
            "allOf": [
                {
                    "$ref": "#/definitions/dir_md_fields"
                }, 
                {
                    "type": "object", 
                    "properties": {
                        "drive_id": {
                            "type": "string", 
                            "description": "a 256 bit drive id"
                        }, 
                        "dir_id": {
                            "type": "string", 
                            "description": "a 256 bit drive id"
                        }
                    }
                }
            ]
        }, 
        "CreateLinkRequest": {
            "required": [
                "doc_branches"
            ], 
            "type": "object", 
            "properties": {
                "doc_branches": {
                    "items": {
                        "type": "object", 
                        "properties": {
                            "branch_id": {
                                "type": "string"
                            }, 
                            "doc_id": {
                                "type": "string"
                            }
                        }
                    }, 
                    "type": "array"
                }
            }
        }, 
        "CreateMultipartRevRequest": {
            "required": [
                "rev_id", 
                "rev_id_sd", 
                "rev_id_tm"
            ], 
            "type": "object", 
            "properties": {
                "rev_id_sd": {
                    "type": "string"
                }, 
                "md": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Metadata upserts for the new revision\n"
                }, 
                "rev_id_tm": {
                    "type": "integer"
                }, 
                "ctx": {
                    "type": "object", 
                    "description": "The UploadContextV1 for this document upload"
                }, 
                "rev_id": {
                    "type": "string"
                }
            }
        }, 
        "Comment": {
            "required": [
                "comment_id", 
                "view_id", 
                "user_id", 
                "created_at"
            ], 
            "type": "object", 
            "properties": {
                "body": {
                    "type": "string", 
                    "description": "The content of this comment, nil if this is a delete comment response"
                }, 
                "branch_id": {
                    "type": "string", 
                    "description": "ID of the branch that this comment belongs to, nil if the comment is a view comment"
                }, 
                "user_id": {
                    "type": "string", 
                    "description": "ID of the user who made this comment"
                }, 
                "view_id": {
                    "type": "string", 
                    "description": "ID of the view that this comment belongs to"
                }, 
                "comment_id": {
                    "type": "string", 
                    "description": "ID of the comment"
                }, 
                "doc_id": {
                    "type": "string", 
                    "description": "ID of the doc that this comment belongs to, nil if the comment is a view comment"
                }, 
                "created_at": {
                    "type": "string", 
                    "description": "Type-1 UUID (in hex form) which represents the time when this comment was made"
                }
            }
        }, 
        "identity_signup_request_profile": {
            "required": [
                "given_name", 
                "family_name", 
                "country"
            ], 
            "type": "object", 
            "properties": {
                "locale": {
                    "type": "string", 
                    "description": "locale of the user, BCP47 standard, default to en-US if not provided."
                }, 
                "family_name": {
                    "type": "string", 
                    "description": "The user's family (last) name."
                }, 
                "given_name": {
                    "type": "string", 
                    "description": "The user's given (first) name."
                }, 
                "country": {
                    "type": "string", 
                    "description": "Two-letter (ISO Alpha-2) country code of the user's country."
                }
            }
        }, 
        "user_instance_status": {
            "required": [
                "uiid"
            ], 
            "properties": {
                "uiid": {
                    "type": "integer", 
                    "description": "The User Instance ID of the user instance"
                }, 
                "upload_groups": {
                    "items": {
                        "$ref": "#/definitions/upload_group_status"
                    }, 
                    "type": "array", 
                    "description": "List of upload group status"
                }, 
                "uiname": {
                    "type": "string", 
                    "description": "The display name of the user instance"
                }
            }
        }, 
        "comment_range_query": {
            "required": [
                "view_id", 
                "doc_id", 
                "branch_id"
            ], 
            "properties": {
                "branch_id": {
                    "type": "string", 
                    "description": "ID of the branch that this comment belongs to"
                }, 
                "from": {
                    "type": "string", 
                    "description": "Type-1 UUID (in hex form) which represents the time start retrieving the comments from. An empty value means start from the latest one. Since the api only allows retrieving comments in reverse chronologic order, all the comments returned will be dated before this time."
                }, 
                "doc_locator": {
                    "type": "integer", 
                    "description": "Locator associated with the document. An empty value means the document is located in the current data center.\n"
                }, 
                "view_id": {
                    "type": "string", 
                    "description": "ID of the view that this comment belongs to"
                }, 
                "view_locator": {
                    "type": "integer", 
                    "description": "Locator associated with the view. An empty value means the view is located in the current data center.\n"
                }, 
                "to": {
                    "type": "string", 
                    "description": "Type-1 UUID (in hex form) which represents the time to stop retrieving the comments. Note that if there is comment created exactly at <to> timestamp, it will not be included. Combined with <from> parameter, this will construct a query time range. And the result will include comment in <from> but exclude comment in <to>."
                }, 
                "limit": {
                    "type": "integer", 
                    "description": "The maximum number of comments returned, default value is 100. The maximum limit can be 10000"
                }, 
                "doc_id": {
                    "type": "string", 
                    "description": "ID of the doc that this comment belongs to"
                }
            }
        }, 
        "text_filter": {
            "properties": {
                "jpeg_text_md": {
                    "type": "boolean", 
                    "description": "if true, the \"TextMD\" preview will be returned if available"
                }, 
                "get_text": {
                    "type": "boolean", 
                    "description": "if true, the \"Text\" preview will be returned if available"
                }
            }
        }, 
        "doc": {
            "required": [
                "branch_id", 
                "category", 
                "doc_id", 
                "rev_id"
            ], 
            "properties": {
                "category": {
                    "type": "integer", 
                    "description": "Type category of the document revision"
                }, 
                "branch_id": {
                    "type": "string", 
                    "description": "Branch ID of the document revision"
                }, 
                "dloc": {
                    "type": "integer", 
                    "description": "Locator associated with the document"
                }, 
                "doc_id": {
                    "type": "string", 
                    "description": "Document ID of the document revision"
                }, 
                "doc_owner_id": {
                    "type": "string", 
                    "description": "The User ID of the owner of the document"
                }, 
                "rev_id": {
                    "type": "string", 
                    "description": "Revision ID of the document revision"
                }
            }
        }, 
        "view_result_v2": {
            "properties": {
                "name": {
                    "type": "string"
                }, 
                "created_at": {
                    "type": "UUID", 
                    "description": "Time the view was created. In json Hex-encoded type-1 UUID"
                }, 
                "view_locator": {
                    "type": "integer", 
                    "description": "The locator string of the view ID for multidatacenter support. This is currently only returned in the v1000 endpoint\n"
                }, 
                "is_home": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "creator_id": {
                    "type": "string"
                }, 
                "is_link": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "is_public": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "asof": {
                    "type": "UUID", 
                    "description": "Time the view was lasted updated. In json Hex-encoded type-1 UUID\n"
                }, 
                "is_archive": {
                    "default": false, 
                    "type": "boolean"
                }, 
                "users": {
                    "items": {
                        "type": "string", 
                        "description": "List of user ids that belong to this view."
                    }, 
                    "type": "array"
                }
            }
        }, 
        "user_change": {
            "properties": {
                "instances": {
                    "items": {
                        "$ref": "#/definitions/user_instance"
                    }, 
                    "type": "array"
                }, 
                "first_name": {
                    "type": "string"
                }, 
                "last_name": {
                    "type": "string"
                }, 
                "email": {
                    "type": "string"
                }
            }
        }, 
        "user_result_v2": {
            "properties": {
                "opt_in_setting_changed_at": {
                    "type": "integer"
                }, 
                "first_name": {
                    "type": "string"
                }, 
                "last_name": {
                    "type": "string"
                }, 
                "billing": {
                    "$ref": "#/definitions/user_billing_result"
                }, 
                "views": {
                    "items": {
                        "$ref": "#/definitions/view_instance_v2"
                    }, 
                    "type": "array"
                }, 
                "analytics_id": {
                    "type": "string"
                }, 
                "analytics_opt_in": {
                    "type": "boolean"
                }, 
                "instances": {
                    "items": {
                        "$ref": "#/definitions/user_instance"
                    }, 
                    "type": "array"
                }, 
                "marketing_opt_in": {
                    "type": "boolean"
                }, 
                "has_shared": {
                    "type": "boolean"
                }, 
                "referrer_id": {
                    "type": "string"
                }, 
                "email": {
                    "type": "string"
                }, 
                "asof": {
                    "type": "string", 
                    "description": "Time of the most recent value in the result set. Hex-encoded type-1 UUID\n"
                }
            }
        }, 
        "CopyDocResponse": {
            "required": [
                "doc_id", 
                "branch_id", 
                "rev_id"
            ], 
            "type": "object", 
            "properties": {
                "branch_id": {
                    "type": "string"
                }, 
                "doc_id": {
                    "type": "string"
                }, 
                "rev_id": {
                    "type": "string"
                }
            }
        }, 
        "dir_md_fields": {
            "type": "object", 
            "properties": {
                "mod_time": {
                    "type": "integer", 
                    "description": "unix nanos"
                }, 
                "kind": {
                    "type": "string", 
                    "description": "type of file (exact values TBD)"
                }, 
                "create_time": {
                    "type": "integer", 
                    "description": "unix nanos"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the directory. May be empty only for root directory."
                }, 
                "updated_at": {
                    "type": "string", 
                    "description": "time at which the last updated occurred.", 
                    "format": "type 1 UUID"
                }, 
                "size": {
                    "type": "integer", 
                    "description": "size in bytes (only on documents)"
                }
            }
        }, 
        "get_subscriptions_response": {
            "required": [
                "subscriptions"
            ], 
            "type": "object", 
            "properties": {
                "has_ever_canceled": {
                    "type": "boolean", 
                    "description": "indicates whether the user has ever completely canceled their account."
                }, 
                "account_size": {
                    "type": "integer", 
                    "description": "size of the user's account in bytes, not taking promotions into consideration"
                }, 
                "is_subscribed": {
                    "type": "boolean", 
                    "description": "indicates the user is subscribed. If this is set, the subscription field will contain the details of the user's subscription. This will be set even if the user is still in their trial period but has elected to subscribe."
                }, 
                "quota": {
                    "type": "integer", 
                    "description": "the user's quota in bytes. -1 if their quota is unlimited."
                }, 
                "trial_end_at": {
                    "type": "dateTime", 
                    "description": "the end date of the user's trial"
                }, 
                "cc_last4": {
                    "type": "string", 
                    "description": "The last 4 digits of the user's default payment source"
                }, 
                "estimated_price": {
                    "type": "integer", 
                    "description": "an estimate of the price (in cents) the user will pay next billing period based on their current effective usage and plans. If the user is not currently subscribed, this represents what they would pay if they were to subscribe."
                }, 
                "promotion_end_at": {
                    "type": "dateTime", 
                    "description": "the end date of all promotions applied to the user's account"
                }, 
                "cc_exp_month": {
                    "type": "string", 
                    "description": "The expiration month of the user's default payment source"
                }, 
                "subscription": {
                    "type": "object", 
                    "description": "The user's subscription. This is not included if the user has no subscription or their subscription has been deactivated.", 
                    "schema": {
                        "$ref": "#/definitions/single_subscription_response"
                    }
                }, 
                "promotions": {
                    "items": {
                        "$ref": "#/definitions/promotion_response"
                    }, 
                    "type": "array", 
                    "description": "The user's promotions"
                }, 
                "data_kept_until": {
                    "type": "dateTime", 
                    "description": "The date until which we promise to keep the user's data"
                }, 
                "cc_brand": {
                    "type": "string", 
                    "description": "The brand of the user's default payment source"
                }, 
                "is_canceling": {
                    "type": "boolean", 
                    "description": "indicates the user's subscription is canceling. This will remain set until the end of their current billing period, at which point their subscription will be deactivated."
                }, 
                "cc_exp_year": {
                    "type": "string", 
                    "description": "The expiration year of the user's default payment source"
                }, 
                "customer_id": {
                    "type": "string", 
                    "description": "This user's Stripe customer ID"
                }, 
                "is_trialing": {
                    "type": "boolean", 
                    "description": "indicates the user is in a trial. A trialing user may or may not also be subscribed."
                }, 
                "effective_account_size": {
                    "type": "integer", 
                    "description": "size of the user's account in bytes after subtracting credits from promotions"
                }
            }
        }, 
        "single_subscription_response": {
            "required": [
                "fixed_plan_id", 
                "incr_plan_id", 
                "state", 
                "current_period_end"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "int", 
                    "description": "The state of the subscription: -1 (deactivated), 0 (invalid), 100 (active), or 300 (payment failed) (see [billing.go](http://git.corp.upthere.com/backend/upcode/blob/master/src/services/lib/updb/billing.go))"
                }, 
                "payment_failed_at": {
                    "type": "dateTime", 
                    "description": "The date/time at which payment failed for this subscription"
                }, 
                "incr_plan_id": {
                    "type": "string", 
                    "description": "The plan id of the user's incremental plan"
                }, 
                "payment_failed_reason": {
                    "type": "string", 
                    "description": "The reason payment failed, provided by Stripe (https://stripe.com/docs/api#errors)"
                }, 
                "started_at": {
                    "type": "dateTime", 
                    "description": "The date/time at which this subscription started"
                }, 
                "fixed_plan_id": {
                    "type": "string", 
                    "description": "The plan id of the user's fixed plan"
                }, 
                "current_period_end": {
                    "type": "dateTime", 
                    "description": "The date/time at which the current period ends for this subscription"
                }
            }
        }, 
        "bucket_results": {
            "properties": {
                "buckets": {
                    "items": {
                        "$ref": "#/definitions/bucket"
                    }, 
                    "type": "array", 
                    "description": "Buckets will be streamed back using chunked encoding over HTTP. JSON results will be newline separated. In the case of a match they will be sorted by score, otherwise they will be sorted by the value they represent.\n"
                }
            }
        }, 
        "chain": {
            "items": {
                "$ref": "#/definitions/facet"
            }, 
            "type": "array"
        }, 
        "batch_get_query": {
            "required": [
                "doc_id", 
                "rev_id", 
                "branch_id", 
                "view_id", 
                "key"
            ], 
            "properties": {
                "branch_id": {
                    "type": "byte", 
                    "description": "the branch_id of the preview requested"
                }, 
                "view_id": {
                    "type": "byte", 
                    "description": "the view_id of the preview requested"
                }, 
                "doc_id": {
                    "type": "byte", 
                    "description": "the doc_id of the preview requested"
                }, 
                "key": {
                    "type": "byte", 
                    "description": "the key of the preview requested"
                }, 
                "rev_id": {
                    "type": "byte", 
                    "description": "the rev_id of the preview requested"
                }
            }
        }, 
        "op_entry": {
            "description": "An op entry"
        }, 
        "token": {
            "type": "object", 
            "properties": {
                "token": {
                    "type": "string", 
                    "description": "Bearer token."
                }
            }
        }
    }
   
}